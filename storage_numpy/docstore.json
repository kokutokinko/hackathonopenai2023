{"docstore/metadata": {"25cc5a33-39b0-4a88-b0f3-8f7df0bed927": {"doc_hash": "37285335fe68a10801d6396f15f47927bf84e4701b47d6d0da5c54938a278f4a"}, "c7b62c68-e0c4-4504-9010-665a275c49a8": {"doc_hash": "62259d5b1b25079630ae6fcb57283eca705a478da581468838d899c2ceef106a"}, "f8483515-a53e-4edb-b787-4e7d72fb0bca": {"doc_hash": "a718e853d42ea17ab0a7d1dd509b8f7351f0d0403fec6169f0c9b70b0256a995"}, "dc0ca8f5-4f6a-40b0-a5fc-4799c56b5261": {"doc_hash": "b411e1e390414849ac1ddc888167635548cc5257227a199af296e231da48c526"}, "db575dfe-e490-465f-9c5e-ffd3a059c5f5": {"doc_hash": "6620f431a9e89e48490c0cc5fd7a6a3f1602d624f0b27cf7d16d5bf4e7fb9e40"}, "4b184c26-1b77-4c28-8e4e-b79d8a60cd20": {"doc_hash": "4d537b1040aa2b22eb9ca245d10e9a90c5629775d286c5b9538a34c04138b2ab"}, "6cd9ad88-0fb7-45ff-bd22-52fb85de2657": {"doc_hash": "0a4bee9617b027b286120f5eaf90bab5b26f450e077e3cfeb84f0451b2c20dc0"}, "0055a139-82cc-46a6-ae41-540a21862431": {"doc_hash": "4610e0e864162ab0ec1154b3a6fbce462984f51ba0eadf45afc3969f239c7df8"}, "def10e11-1b43-458d-96ca-f9c0989af2d8": {"doc_hash": "d7485eb37ba9e1991dcf4b16f19117e4c944efab87d24c9ba89912963fb35cc4"}, "2bd29eec-be71-4312-8543-b1d0fc88d34d": {"doc_hash": "6d137cb88ca94e4daee9e2cd654c4d1b08576925801cf8065d761acc3a940f37"}, "aa2182b4-a0fc-4dc5-8b08-d69035155266": {"doc_hash": "95fe135b31db59a9b1d37def283058d6c94e3fcfe91b128cb3ebd11f4006d240"}, "f6553eb6-cb4e-45b3-ba1b-276554fa821c": {"doc_hash": "c0141ed337b9316896b80916b36ad0e15555b94d2dad8a62e0a5e7ae8bd4700f"}, "fb496c5f-8200-4dcc-b720-6ca7fd26659a": {"doc_hash": "c7ea2ca4fd3cdb7df5b728c8f29768371e837cc6f5bcf626a76e33e0f541d2c5"}, "732e8efb-c7ab-493e-8d32-0b8819f4ad2c": {"doc_hash": "efb0ee2049d0f34483db00ba82442321442324a1798dca927c5f7a9ae8a8c2b3"}, "11d3e4bb-92fb-41a4-b8f6-77ddcaf3dfcd": {"doc_hash": "a2a81ce490862d0965acab80cac5f1f237b1c8afb185ccd581ae2efeb44a010f"}, "d0cdf394-b8ee-4a18-aefc-f5331047de1c": {"doc_hash": "72f33d3d0af4dc909fb706ea46ee481c7b9786ff14d0bb6526e133234cfda9f3"}, "7b1e4963-447c-46be-9752-349be22555f4": {"doc_hash": "ef1ba5c4d72dd544af6c024a75fc0864b6bfd07cd9c7193bff2892e46676121a"}, "d5d4ee8a-3003-4875-973e-7faa249750f8": {"doc_hash": "b1c165c40778f9b569a57ab945d0071afae824c2a3ef5633a78bec81ad7de6d4"}, "437af0ee-b752-459a-8890-6e5158efcdd4": {"doc_hash": "7442585702b71934aa7628c3af3c9b6779899ea7fd0380f0796c66098bc3021c"}, "b0f690bb-79eb-4243-8f83-a51f8254490b": {"doc_hash": "93bc070ad8a264e0982dcb9f62f897edbbec6e72a94d7056351520bd673df3b4"}, "23d237ef-99ee-4991-8d7c-44c054530c9c": {"doc_hash": "aa309c9bb4f7d23286358e35c17fb99eb2025095ac49a3a339c7a2b02c70562a"}, "06dbbc93-7b08-4bee-8643-0c3b645197aa": {"doc_hash": "0c69cbebf95c465d7975176020b4a00eef624554ddfe15bb2b69b29384b23dfe"}, "855544ea-8bee-4fdf-8dbf-d2342be8dba8": {"doc_hash": "3071db45fb9cdd456b35bb9bc896e063b089958731896a6a054f85da735c2bcb"}, "4618d1df-51d4-4bd5-9ef1-3b4c0eb8e2e6": {"doc_hash": "12a38b53b817f98adfa608a4ed4eb687b65521a6637c4562150ed5642c4f7dd1"}, "181d0856-ebe2-4587-a7a5-37d7797c1d85": {"doc_hash": "ad098a209c166a9e86abe7d65eafd10443f4c83569704d70a1f367b6935436b2"}, "bae14aab-8d18-45e0-89d9-e33eec15a872": {"doc_hash": "b0d3e21361ec7a521031458cfca9c91fbdc2ddc765979716f99331c8b2a00284"}, "a25bef9a-21ce-4e8c-acd8-c4076e77c3b3": {"doc_hash": "16a541934622ba1b0793341d0c2fdc676547dfe10201b80db6fb35fdd0d1e86d"}, "a4a689df-ea8e-4645-a979-292f19ffb784": {"doc_hash": "a4786eec0ebddf40ba580dba3146dc868adf4956f5593213ca0bda162099f1f0"}, "2e0580dc-5985-4e68-b7e1-a855bd7cf1a6": {"doc_hash": "cedd4425b1797ea957c7d7e8a3d0ec82975b9d9e9d2ef9cd0f29c7ea108d798f"}, "4e4ccd09-f71d-4ac6-b449-b8edd7991c17": {"doc_hash": "20abed8e0297da8571c4b0f7d0aa4f1c1b22faaf0d112bcd44a86510ce0387d5"}, "9f3db1d2-b0ac-4736-b789-811cf2e87026": {"doc_hash": "babcc681b65aea03803b9f641db32f9afd721508f07f39b21cfd36cb94e5f781"}, "38deafa5-851d-4122-9483-a8f083fd823d": {"doc_hash": "1cf4242114b9b27c450aa8c829cf1e30164df64272f24cb939cbb6cefb28777f"}, "f87e5466-1af8-48ba-8de0-280016439107": {"doc_hash": "2f398e35aa4eff5766380bd4996556af85f9ad61e37643e30a5475758e89a221"}, "784e0b24-8250-4bbc-896a-ee14934c6e9e": {"doc_hash": "4b9932a4c81b0188a054e8400c4614518f2c02a2e0d974ead8effe51651f66cb"}, "47be2403-e970-4b63-bdff-68e3b34217ee": {"doc_hash": "5f961b394f079d3400571813cc5c8dbc21bc2e580b8686b855228f4499440adc"}, "c985c05d-d4a6-42e2-b0d6-d660d7021fe6": {"doc_hash": "b00b97aa76f50ca6b88d9b881837f490b9db748fc6a61aafed9d0feee4113f22"}, "67a02caf-e95f-4867-8334-0e99f0c7fdea": {"doc_hash": "e4d467130ed704031619aa433bcaffc5aa35a9aa0d0c3578d0f4bbe25520d1a5"}, "9e77e281-115e-4e81-bfda-6be05f1d4615": {"doc_hash": "ac4098a40604d0caedc6bf272d6a40f7f4bc0bec9034e796fdfc394c0dffc7a1"}, "8479f2b6-1938-4ba8-a93d-eb91b3cdf0fc": {"doc_hash": "84586c7ed5823c3b7be2ef76645b5f42cc12f07d80b7863ed351a420854672b2"}, "53dfa191-ee3e-4606-937f-7946a1874c58": {"doc_hash": "e157a1a10d09f8969a7d91597b5a953305b28b069bc1ddb513391bfc6c07c475"}, "e8f5ea98-4287-4afe-bdc8-ca4bcf2324d5": {"doc_hash": "394408ffd53c68e20eba9c2872f99ebf80feb9822a8de18b6a5e8c87a770e8d0"}, "2402daad-b0f9-468c-80b8-7dcd7b9adc50": {"doc_hash": "2435b4a5c0112bc375d0ba084c88dfd64ed388243d3def22c4b6b21bf0acb3b1"}, "ba59edfe-9cc7-4b3d-86b6-7ef73f4a8d1c": {"doc_hash": "5065725082da0f0ea3d8dd1782a69a7a476b8d3f6f8ca4d03259d4d4ac05b9ff"}, "9cfc03fe-bf8d-4359-abf6-7c39ac3f8ac2": {"doc_hash": "5c690cd6fad29e4bf73d09d4133300ae4b6b00e203b596e7f2cc82e666f725c0"}, "f0fdc397-0961-48f7-b332-e5cdeddc144e": {"doc_hash": "b2845ea9afcfd8a656ac0c3963701518fd31eb14bbc794ca1cd810b5a60a57a0"}, "87633160-8f3e-4eca-8870-f1b7ef3cf7c6": {"doc_hash": "88126e1d6baa3c7c9a43f20b6256134039f8b09fc9ac8b37f67a78b32696f33e"}, "9c6f75fa-e005-42b8-9100-2a1caac682b6": {"doc_hash": "d01bcd9678ff788001b32462cb0172a879f5d2e3247b2e4309051e5be1238491"}, "4b4b7a1a-506c-47c2-aff7-6f14fdd6aa1e": {"doc_hash": "0289d442c9be54f08beb5a31a8b04bd91d6180b3dcf1eb51db630d27a8ebc075"}, "dd436182-60b1-446c-b51d-62ea5332c79f": {"doc_hash": "8930c8a54adbbf4f0ec93735a0b370d3415a5dbd93a142391d31ce0b46394f38"}, "c935ed94-2f02-4e4f-8d9d-110839860e09": {"doc_hash": "fcf36592440be56aa36eee9e98a0dd792ce1abeb7306bd9a7e393ce91e297fd9"}, "9b444deb-22ac-4bf8-aa98-9cc4d434f301": {"doc_hash": "cf3b1f09e282c3f80a695e2903d873a411a4ae96288f7af4e4ca22bd881b9b74"}, "07a0ad22-1305-42a0-834e-311d9e2b3fc3": {"doc_hash": "2670e1ed0cb9ce68dd128fa6f83cadb8b0adcc95aab11b47d27db482454da566"}, "2621dbf6-4124-4846-92d9-e0c3b71ba439": {"doc_hash": "04c8f31c1c65755afc2f689eb7f9f7d04c292e6e01d4731ee446e6f1f435e95d"}, "05f3ba7b-cf98-4d53-883a-542db8bac06d": {"doc_hash": "4364e0899ae664e17643477665c0d1a6c8ae3a910491095977cde809f319fdc3"}, "2df45e91-a352-4e85-a10d-b2d666d9684e": {"doc_hash": "de2fbff11997ff10d16ed84ef8bdb4e0f78c77aeb9499bceff650e952f93fd86"}, "2d36bc3d-9d41-4b13-843b-d44df28db0dd": {"doc_hash": "e853b29449020f8a2a37fe554a831af5499ea5c472e464e6820ff89791ef40b5"}, "bb3627c9-48d9-47e6-985e-ff0bf6c4623d": {"doc_hash": "39027abb343c5eeabf4cb26642e533e52bbdbe6cfa641c7780a478ad86937e1f"}, "ca98f346-60e1-4dfa-b4ba-dd52e1a43405": {"doc_hash": "211ced362a074bc8717978ebe32728b00ab3fc9abd7621461afb29f368e362e2"}, "97837abf-db5d-473a-b0c6-9a0bb79d7619": {"doc_hash": "a20f5c532342341bd257bdd2dff6c1b3d706175632abad09421ea75cdd33cdf6"}, "a5496327-fc3d-48d5-94e7-d5aee9d3af2a": {"doc_hash": "bfab40f2fa356652f094a26cd2a588ab493ecdba7eb7f585f8b4cb7d1556e78b"}, "f893a8f5-70a0-435c-b615-61f5c4242837": {"doc_hash": "a5d6d0470f5dd084013eee4f91cf2715349bcaee9f0ace47dde0dde427b7bcde"}, "390a0dd7-39b3-40a4-82e6-c078ae811d1a": {"doc_hash": "f0fe8e8117d6af9896b7687da143ddecb79e37bc2627dd77d730e831248ce5d8"}, "32c8faff-b5d4-44d8-b6c7-a5851ce648c1": {"doc_hash": "88316cb72ea09c51df0543932cc345b89b9a492f87e686e18fdd34ed655b50fa"}, "91fc05a1-182d-4822-ac1b-0acc613e9e1f": {"doc_hash": "37285335fe68a10801d6396f15f47927bf84e4701b47d6d0da5c54938a278f4a"}, "81b6cf7e-bcd7-43da-acad-3ae2d694620e": {"doc_hash": "62259d5b1b25079630ae6fcb57283eca705a478da581468838d899c2ceef106a"}, "d42c2472-75af-435f-9764-de7ca8736055": {"doc_hash": "0a05c83a0075504aa52577918e2acd76efa0446478ed2bb259ba429f437d2dc6"}, "fa2d1940-be2c-427d-bdd1-95b453c6b419": {"doc_hash": "b51366c4a307b639dc7c24f90b08c3473b1f8d42e2d7affc7479fa734c794bd3"}, "89706bb4-6652-4a41-abc2-c9e3b24f9cd2": {"doc_hash": "e29b9f57ac4daf36a806a1aa13d66eab09c27fe6d9d807dba3fc26a6327fc248"}, "c47bfbc6-9c28-4ac5-bad1-15089fc3b73c": {"doc_hash": "051a2e71cca305225e4166871c1775f46084bf4b341998e278e4cdf2400ec2d3"}, "e9c304c8-1eae-45f6-a3a5-0560e9dc034a": {"doc_hash": "f7a6b381e0d822610357a9e68249f8bed5a2f6a2b6b9323517089358811a6a6f"}, "2cd9f06f-e422-4711-a598-6d7f50b386d8": {"doc_hash": "350d0ea0fec8b59a73eec65b63656c1637756ee00e6b0cce79523c0c651bb89e"}, "851a6e9d-ddfd-4968-9727-359ab9123d4b": {"doc_hash": "b6dc8673c7e66c996c955793961469ebb1b5158ce7921a9459c8e986d823d75e"}, "86f66825-1024-4e23-8af1-1b9761e53d43": {"doc_hash": "b176c543261e8196ce1041ebc5010572a063d4205b85fa6cb8da75c32156676e"}, "09a512f6-8c2a-443d-9828-495f4ed91477": {"doc_hash": "0a4bee9617b027b286120f5eaf90bab5b26f450e077e3cfeb84f0451b2c20dc0"}, "813bd369-de33-4cf1-ae2a-832c7e65bba7": {"doc_hash": "c3aa72c30282432229bd64d1b1ec83bfce6a399db62fe034255794ee4137953e"}, "daafb0f0-5387-4956-9b63-777d0605e7e5": {"doc_hash": "4ad7746c0b353071de456c1b8cf2a61acc745650f0305de27892aaf833934c2a"}, "5d5782d6-0681-40ed-9571-4254cc039de6": {"doc_hash": "d7485eb37ba9e1991dcf4b16f19117e4c944efab87d24c9ba89912963fb35cc4"}, "d34f4964-f265-47cb-88d5-2b7a013795cd": {"doc_hash": "6d137cb88ca94e4daee9e2cd654c4d1b08576925801cf8065d761acc3a940f37"}, "21162c97-b8c7-42a2-9d30-cea2f4539595": {"doc_hash": "95fe135b31db59a9b1d37def283058d6c94e3fcfe91b128cb3ebd11f4006d240"}, "e67b4c7c-0115-492a-b3ae-05cc62986eec": {"doc_hash": "f78aef3a4b69ed9a3edddc0b2d159e87f8f56e3eb47c9dda84f3b624bbf9f618"}, "3a987ee0-d406-4e89-a6e5-9658d8c7704e": {"doc_hash": "6d1b2794843ca6a0c2313e31bc26913b3c61331f0a114974a959dbfb69b80e34"}, "aec7ecd9-cc8d-45ab-a73b-47b90464610b": {"doc_hash": "13d12ef85d167503ec4709c67a3220abcb71e082b59f6c85f32f610340673b61"}, "4f5c8391-a046-4de5-99be-ac4aed3cd64f": {"doc_hash": "5ec5aea8811876d84fdec825ace4f0a8b7f0ab11630223b721d2ccd522afc865"}, "cbcb36a5-70b7-4c4a-afb8-aa15b9a40e31": {"doc_hash": "efb0ee2049d0f34483db00ba82442321442324a1798dca927c5f7a9ae8a8c2b3"}, "63dd1113-04b1-4b0e-98a1-fb78d4f95dd8": {"doc_hash": "a2a81ce490862d0965acab80cac5f1f237b1c8afb185ccd581ae2efeb44a010f"}, "fb307454-d4d9-4321-a520-e21e1080e7cf": {"doc_hash": "72f33d3d0af4dc909fb706ea46ee481c7b9786ff14d0bb6526e133234cfda9f3"}, "73472dcf-1ab7-4490-89a8-88b949f905dc": {"doc_hash": "ef1ba5c4d72dd544af6c024a75fc0864b6bfd07cd9c7193bff2892e46676121a"}, "7bfe714b-33df-4dac-973d-d57488adb652": {"doc_hash": "b1c165c40778f9b569a57ab945d0071afae824c2a3ef5633a78bec81ad7de6d4"}, "518e8508-9425-478f-b22d-6551001cd474": {"doc_hash": "7442585702b71934aa7628c3af3c9b6779899ea7fd0380f0796c66098bc3021c"}, "192ba8c5-0c66-47d0-8802-dfcad97a8a7b": {"doc_hash": "93bc070ad8a264e0982dcb9f62f897edbbec6e72a94d7056351520bd673df3b4"}, "205d50a8-7b34-445b-9d05-444f51a72fc6": {"doc_hash": "aa309c9bb4f7d23286358e35c17fb99eb2025095ac49a3a339c7a2b02c70562a"}, "cff4b4f5-d501-4996-ad67-9c2cfa92e4ec": {"doc_hash": "0c69cbebf95c465d7975176020b4a00eef624554ddfe15bb2b69b29384b23dfe"}, "ed06c202-3951-417b-8cdb-0445f8de99ef": {"doc_hash": "3071db45fb9cdd456b35bb9bc896e063b089958731896a6a054f85da735c2bcb"}, "66b59aac-4407-4e4b-8e4c-12aaa3bedacc": {"doc_hash": "12a38b53b817f98adfa608a4ed4eb687b65521a6637c4562150ed5642c4f7dd1"}, "154d685e-efb7-4e96-acd3-9cb796723e2e": {"doc_hash": "ad098a209c166a9e86abe7d65eafd10443f4c83569704d70a1f367b6935436b2"}, "c83f388b-74fe-4841-9465-e872cc074f5b": {"doc_hash": "b0d3e21361ec7a521031458cfca9c91fbdc2ddc765979716f99331c8b2a00284"}, "f88f2f6e-f96d-48b6-838f-f2b6de46ac4b": {"doc_hash": "16a541934622ba1b0793341d0c2fdc676547dfe10201b80db6fb35fdd0d1e86d"}, "4c2c252d-8f80-45d4-8f5c-1e18498ca0ac": {"doc_hash": "a4786eec0ebddf40ba580dba3146dc868adf4956f5593213ca0bda162099f1f0"}, "20adf04d-ce78-4618-a4c4-0c2ef2aa2b80": {"doc_hash": "fb616b74921697349267508ef6e11d0cc2a98c25d2130f319ce30d2a18572321"}, "c1e25029-40dc-4e65-9822-b075c8e3e4da": {"doc_hash": "6f9253c3cdd4a03a65e7ba2591a2720bd17aab4959b2a69ea181479ea600ed9f"}, "6075c815-38c1-425e-a8f1-45c5b7dad322": {"doc_hash": "20abed8e0297da8571c4b0f7d0aa4f1c1b22faaf0d112bcd44a86510ce0387d5"}, "df36ad9a-a1e0-4ace-b5ab-ad40b52d4d2c": {"doc_hash": "babcc681b65aea03803b9f641db32f9afd721508f07f39b21cfd36cb94e5f781"}, "40a0e7b6-004b-4496-9a04-217861b8db91": {"doc_hash": "1cf4242114b9b27c450aa8c829cf1e30164df64272f24cb939cbb6cefb28777f"}, "18fcd429-7a45-4138-bd60-1e70ee1625d6": {"doc_hash": "2f398e35aa4eff5766380bd4996556af85f9ad61e37643e30a5475758e89a221"}, "f6f6bf2f-21be-4845-9827-31ad87624c56": {"doc_hash": "4b9932a4c81b0188a054e8400c4614518f2c02a2e0d974ead8effe51651f66cb"}, "a2e73441-a37d-4910-a26e-0eea4e728955": {"doc_hash": "5f961b394f079d3400571813cc5c8dbc21bc2e580b8686b855228f4499440adc"}, "c1766dcd-8e1c-4730-94d9-aeeec4761f60": {"doc_hash": "b00b97aa76f50ca6b88d9b881837f490b9db748fc6a61aafed9d0feee4113f22"}, "fbb8fbd2-4b04-4314-97bf-05d7e2259301": {"doc_hash": "e4d467130ed704031619aa433bcaffc5aa35a9aa0d0c3578d0f4bbe25520d1a5"}, "73e180b7-3529-4398-addb-54bebbc0c3ef": {"doc_hash": "ac4098a40604d0caedc6bf272d6a40f7f4bc0bec9034e796fdfc394c0dffc7a1"}, "2f3f74ad-fa52-4255-b635-7453f6a48b2f": {"doc_hash": "84586c7ed5823c3b7be2ef76645b5f42cc12f07d80b7863ed351a420854672b2"}, "52cddf3c-4090-430a-95ef-8898965cb61e": {"doc_hash": "e157a1a10d09f8969a7d91597b5a953305b28b069bc1ddb513391bfc6c07c475"}, "4a9c838f-60dd-43d6-a7c0-e80735c3d212": {"doc_hash": "394408ffd53c68e20eba9c2872f99ebf80feb9822a8de18b6a5e8c87a770e8d0"}, "9dd6a957-924c-409c-bfa9-5f31d8a6ef83": {"doc_hash": "2435b4a5c0112bc375d0ba084c88dfd64ed388243d3def22c4b6b21bf0acb3b1"}, "ddb171a0-56b6-4b57-9e45-0b0d9c79f602": {"doc_hash": "5065725082da0f0ea3d8dd1782a69a7a476b8d3f6f8ca4d03259d4d4ac05b9ff"}, "dfe66497-97d0-4f6d-89d8-d80961108f11": {"doc_hash": "5c690cd6fad29e4bf73d09d4133300ae4b6b00e203b596e7f2cc82e666f725c0"}, "6638938e-1e60-4871-80b6-e61dba125c0f": {"doc_hash": "b2845ea9afcfd8a656ac0c3963701518fd31eb14bbc794ca1cd810b5a60a57a0"}, "9d9ead42-7979-4c50-a792-80ad3a986a4d": {"doc_hash": "88126e1d6baa3c7c9a43f20b6256134039f8b09fc9ac8b37f67a78b32696f33e"}, "62dffc74-91d0-4b5d-9416-ffbbb27b6122": {"doc_hash": "d01bcd9678ff788001b32462cb0172a879f5d2e3247b2e4309051e5be1238491"}, "478e2f36-e530-4a7d-be5a-152aee5ae43e": {"doc_hash": "0289d442c9be54f08beb5a31a8b04bd91d6180b3dcf1eb51db630d27a8ebc075"}, "c317f5f3-3faf-4443-8c35-5c3fa8d3edf3": {"doc_hash": "65eeeff59c5b9b6d481255e13668bb1a0d4227d4f04694570b1ab2add2ff052d"}, "933436a3-326f-4e82-b804-46313921e071": {"doc_hash": "da3b383ae70122d4ac77ee405bf558f7e6b920125e468111c2b284f0b938cc56"}, "ef08a8e4-de3e-471c-8a67-a3577ce3d168": {"doc_hash": "fcf36592440be56aa36eee9e98a0dd792ce1abeb7306bd9a7e393ce91e297fd9"}, "3571f1b4-13ed-45de-affe-5224c8973737": {"doc_hash": "ea75ac40911107038a56b4e84f11d19b41ccbd58afe36b570171b56095898c46"}, "0dc937d0-34e8-450e-bbce-3d4f1b4d65a8": {"doc_hash": "6d85d791d1020cc7817917768b3a42797d11fff4cdfad2c69c59dea23b2960d9"}, "3d9bc4e8-ab59-46a0-bca4-f11c6029b195": {"doc_hash": "9b0fceae956eb383f7b03dc2d24808e7c0357a142a2d10418833b2ce9588a095"}, "ddd0b075-b4dd-4971-917a-ced6a45bf35b": {"doc_hash": "4bed4ddc2c56cb607ebefe3042ac74089f495eff24e523f4f9971ffc0287d20c"}, "5953ddc4-861e-4dac-9226-c4df7197e17a": {"doc_hash": "65d35b2ac6364be1220f6352b732ab58ec77c2bde132a3dfa107ee1f73ddb29f"}, "4358345d-1ed1-4f09-9ad4-1467847fbadf": {"doc_hash": "caa28bb356fddcbbc000c8af75e5b37389584d2b22a22bf010d29a77df2570af"}, "f29f667b-fcfe-4d7a-9a34-cf7831348da9": {"doc_hash": "4364e0899ae664e17643477665c0d1a6c8ae3a910491095977cde809f319fdc3"}, "0413540e-8d7c-47fe-b3e3-273122e9a4cb": {"doc_hash": "de2fbff11997ff10d16ed84ef8bdb4e0f78c77aeb9499bceff650e952f93fd86"}, "153ebbd2-32a2-41a6-b82c-55381b1783e6": {"doc_hash": "e853b29449020f8a2a37fe554a831af5499ea5c472e464e6820ff89791ef40b5"}, "4a23706e-3d19-4212-bd83-61943299cf22": {"doc_hash": "39027abb343c5eeabf4cb26642e533e52bbdbe6cfa641c7780a478ad86937e1f"}, "dbbc0d48-4906-4699-985c-fbaadd1e44d2": {"doc_hash": "211ced362a074bc8717978ebe32728b00ab3fc9abd7621461afb29f368e362e2"}, "07da99d4-28f5-4cf2-b1eb-e690d1dd40cb": {"doc_hash": "a20f5c532342341bd257bdd2dff6c1b3d706175632abad09421ea75cdd33cdf6"}, "d7c4d289-b62a-4f4c-8976-173b0a4a1ab0": {"doc_hash": "bfab40f2fa356652f094a26cd2a588ab493ecdba7eb7f585f8b4cb7d1556e78b"}, "b4dc472e-74cd-4889-bcd8-a6874bc46fa6": {"doc_hash": "a5d6d0470f5dd084013eee4f91cf2715349bcaee9f0ace47dde0dde427b7bcde"}, "5b04372e-4d06-4e1d-b8f2-3b47442c6763": {"doc_hash": "f0fe8e8117d6af9896b7687da143ddecb79e37bc2627dd77d730e831248ce5d8"}, "746494d9-65ae-41c5-8447-f935c62384e7": {"doc_hash": "88316cb72ea09c51df0543932cc345b89b9a492f87e686e18fdd34ed655b50fa"}}, "docstore/data": {"91fc05a1-182d-4822-ac1b-0acc613e9e1f": {"__data__": {"text": "\u3010Name\u3011Numpy\u3010Chapter\u3011Array and fft\u3010Section\u3011numpy.fft.fft\u3010Content\u3011numpy.fft.fft#fft.fft(a,n=None,axis=-1,norm=None)[source]#Compute the one-dimensional discrete Fourier Transform.This function computes the one-dimensionaln-point discrete Fourier\nTransform (DFT) with the efficient Fast Fourier Transform (FFT)\nalgorithm [CT].Parameters:aarray_likeInput array, can be complex.nint, optionalLength of the transformed axis of the output.\nIfnis smaller than the length of the input, the input is cropped.\nIf it is larger, the input is padded with zeros.  Ifnis not given,\nthe length of the input along the axis specified byaxisis used.axisint, optionalAxis over which to compute the FFT.  If not given, the last axis is\nused.norm{\u201cbackward\u201d, \u201cortho\u201d, \u201cforward\u201d}, optionalNew in version 1.10.0.Normalization mode (seenumpy.fft). Default is \u201cbackward\u201d.\nIndicates which direction of the forward/backward pair of transforms\nis scaled and with what normalization factor.New in version 1.20.0:The \u201cbackward\u201d, \u201cforward\u201d values were added.Returns:outcomplex ndarrayThe truncated or zero-padded input, transformed along the axis\nindicated byaxis, or the last one ifaxisis not specified.Raises:IndexErrorIfaxisis not a valid axis ofa.See alsonumpy.fftfor definition of the DFT and conventions used.ifftThe inverse offft.fft2The two-dimensional FFT.fftnThen-dimensional FFT.rfftnThen-dimensional FFT of real input.fftfreqFrequency bins for given FFT parameters.NotesFFT (Fast Fourier Transform) refers to a way the discrete Fourier\nTransform (DFT) can be calculated efficiently, by using symmetries in the\ncalculated terms.  The symmetry is highest whennis a power of 2, and\nthe transform is therefore most efficient for these sizes.The DFT is defined, with the conventions used in this implementation, in\nthe documentation for thenumpy.fftmodule.References[CT]Cooley, James W., and John W. Tukey, 1965, \u201cAn algorithm for the\nmachine calculation of complex Fourier series,\u201dMath. Comput.19: 297-301.Examples>>>np.fft.fft(np.exp(2j*np.pi*np.arange(8)/8))array([-2.33486982e-16+1.14423775e-17j,  8.00000000e+00-1.25557246e-15j,2.33486982e-16+2.33486982e-16j,  0.00000000e+00+1.22464680e-16j,-1.14423775e-17+2.33486982e-16j,  0.00000000e+00+5.20784380e-16j,1.14423775e-17+1.14423775e-17j,  0.00000000e+00+1.22464680e-16j])In this example, real input has an FFT which is Hermitian, i.e., symmetric\nin the real part and anti-symmetric in the imaginary part, as described in\nthenumpy.fftdocumentation:>>>importmatplotlib.pyplotasplt>>>t=np.arange(256)>>>sp=np.fft.fft(np.sin(t))>>>freq=np.fft.fftfreq(t.shape[-1])>>>plt.plot(freq,sp.real,freq,sp.imag)[<matplotlib.lines.Line2D object at 0x...>, <matplotlib.lines.Line2D object at 0x...>]>>>plt.show()", "doc_id": "91fc05a1-182d-4822-ac1b-0acc613e9e1f", "embedding": null, "doc_hash": "37285335fe68a10801d6396f15f47927bf84e4701b47d6d0da5c54938a278f4a", "extra_info": null, "node_info": {"start": 0, "end": 2726, "_node_type": "1"}, "relationships": {"1": "25cc5a33-39b0-4a88-b0f3-8f7df0bed927"}}, "__type__": "1"}, "81b6cf7e-bcd7-43da-acad-3ae2d694620e": {"__data__": {"text": "\u3010Name\u3011Numpy\u3010Chapter\u3011Array and fft\u3010Section\u3011numpy.fft.ifft\u3010Content\u3011numpy.fft.ifft#fft.ifft(a,n=None,axis=-1,norm=None)[source]#Compute the one-dimensional inverse discrete Fourier Transform.This function computes the inverse of the one-dimensionaln-point\ndiscrete Fourier transform computed byfft.  In other words,ifft(fft(a))==ato within numerical accuracy.\nFor a general description of the algorithm and definitions,\nseenumpy.fft.The input should be ordered in the same way as is returned byfft,\ni.e.,a[0]should contain the zero frequency term,a[1:n//2]should contain the positive-frequency terms,a[n//2+1:]should contain the negative-frequency terms, in\nincreasing order starting from the most negative frequency.For an even number of input points,A[n//2]represents the sum of\nthe values at the positive and negative Nyquist frequencies, as the two\nare aliased together. Seenumpy.fftfor details.Parameters:aarray_likeInput array, can be complex.nint, optionalLength of the transformed axis of the output.\nIfnis smaller than the length of the input, the input is cropped.\nIf it is larger, the input is padded with zeros.  Ifnis not given,\nthe length of the input along the axis specified byaxisis used.\nSee notes about padding issues.axisint, optionalAxis over which to compute the inverse DFT.  If not given, the last\naxis is used.norm{\u201cbackward\u201d, \u201cortho\u201d, \u201cforward\u201d}, optionalNew in version 1.10.0.Normalization mode (seenumpy.fft). Default is \u201cbackward\u201d.\nIndicates which direction of the forward/backward pair of transforms\nis scaled and with what normalization factor.New in version 1.20.0:The \u201cbackward\u201d, \u201cforward\u201d values were added.Returns:outcomplex ndarrayThe truncated or zero-padded input, transformed along the axis\nindicated byaxis, or the last one ifaxisis not specified.Raises:IndexErrorIfaxisis not a valid axis ofa.See alsonumpy.fftAn introduction, with definitions and general explanations.fftThe one-dimensional (forward) FFT, of whichifftis the inverseifft2The two-dimensional inverse FFT.ifftnThe n-dimensional inverse FFT.NotesIf the input parameternis larger than the size of the input, the input\nis padded by appending zeros at the end.  Even though this is the common\napproach, it might lead to surprising results.  If a different padding is\ndesired, it must be performed before callingifft.Examples>>>np.fft.ifft([0,4,0,0])array([ 1.+0.j,  0.+1.j, -1.+0.j,  0.-1.j]) # may varyCreate and plot a band-limited signal with random phases:>>>importmatplotlib.pyplotasplt>>>t=np.arange(400)>>>n=np.zeros((400,),dtype=complex)>>>n[40:60]=np.exp(1j*np.random.uniform(0,2*np.pi,(20,)))>>>s=np.fft.ifft(n)>>>plt.plot(t,s.real,label='real')[<matplotlib.lines.Line2D object at ...>]>>>plt.plot(t,s.imag,'--',label='imaginary')[<matplotlib.lines.Line2D object at ...>]>>>plt.legend()<matplotlib.legend.Legend object at ...>>>>plt.show()", "doc_id": "81b6cf7e-bcd7-43da-acad-3ae2d694620e", "embedding": null, "doc_hash": "62259d5b1b25079630ae6fcb57283eca705a478da581468838d899c2ceef106a", "extra_info": null, "node_info": {"start": 0, "end": 2848, "_node_type": "1"}, "relationships": {"1": "c7b62c68-e0c4-4504-9010-665a275c49a8"}}, "__type__": "1"}, "d42c2472-75af-435f-9764-de7ca8736055": {"__data__": {"text": "\u3010Name\u3011Numpy\u3010Chapter\u3011Array and fft\u3010Section\u3011numpy.fft.fft2\u3010Content\u3011numpy.fft.fft2#fft.fft2(a,s=None,axes=(-2,-1),norm=None)[source]#Compute the 2-dimensional discrete Fourier Transform.This function computes then-dimensional discrete Fourier Transform\nover any axes in anM-dimensional array by means of the\nFast Fourier Transform (FFT).  By default, the transform is computed over\nthe last two axes of the input array, i.e., a 2-dimensional FFT.Parameters:aarray_likeInput array, can be complexssequence of ints, optionalShape (length of each transformed axis) of the output\n(s[0]refers to axis 0,s[1]to axis 1, etc.).\nThis corresponds tonforfft(x,n).\nAlong each axis, if the given shape is smaller than that of the input,\nthe input is cropped.  If it is larger, the input is padded with zeros.\nifsis not given, the shape of the input along the axes specified\nbyaxesis used.axessequence of ints, optionalAxes over which to compute the FFT.  If not given, the last two\naxes are used.  A repeated index inaxesmeans the transform over\nthat axis is performed multiple times.  A one-element sequence means\nthat a one-dimensional FFT is performed.norm{\u201cbackward\u201d, \u201cortho\u201d, \u201cforward\u201d}, optionalNew in version 1.10.0.Normalization mode (seenumpy.fft). Default is \u201cbackward\u201d.\nIndicates which direction of the forward/backward pair of transforms\nis scaled and with what normalization factor.New in version 1.20.0:The \u201cbackward\u201d, \u201cforward\u201d values were added.Returns:outcomplex ndarrayThe truncated or zero-padded input, transformed along the axes\nindicated byaxes, or the last two axes ifaxesis not given.Raises:ValueErrorIfsandaxeshave different length, oraxesnot given andlen(s)!=2.IndexErrorIf an element ofaxesis larger than than the number of axes ofa.See alsonumpy.fftOverall view of discrete Fourier transforms, with definitions and conventions used.ifft2The inverse two-dimensional FFT.fftThe one-dimensional FFT.fftnThen-dimensional FFT.fftshiftShifts zero-frequency terms to the center of the array. For two-dimensional input, swaps first and third quadrants, and second and fourth quadrants.Notesfft2is justfftnwith a different default foraxes.The output, analogously tofft, contains the term for zero frequency in\nthe low-order corner of the transformed axes, the positive frequency terms\nin the first half of these axes, the term for the Nyquist frequency in the\nmiddle of the axes and the negative frequency terms in the second half of\nthe axes, in order of decreasingly negative frequency.Seefftnfor details and a plotting example, andnumpy.fftfor\ndefinitions and conventions used.Examples>>>a=np.mgrid[:5,:5][0]>>>np.fft.fft2(a)array([[ 50.  +0.j        ,   0.  +0.j        ,   0.  +0.j        , # may vary0.  +0.j        ,   0.  +0.j        ],[-12.5+17.20477401j,   0.  +0.j        ,   0.  +0.j        ,0.  +0.j        ,   0.  +0.j        ],[-12.5 +4.0614962j ,   0.  +0.j        ,   0.  +0.j        ,0.  +0.j        ,  ", "doc_id": "d42c2472-75af-435f-9764-de7ca8736055", "embedding": null, "doc_hash": "0a05c83a0075504aa52577918e2acd76efa0446478ed2bb259ba429f437d2dc6", "extra_info": null, "node_info": {"start": 0, "end": 2924, "_node_type": "1"}, "relationships": {"1": "f8483515-a53e-4edb-b787-4e7d72fb0bca", "3": "fa2d1940-be2c-427d-bdd1-95b453c6b419"}}, "__type__": "1"}, "fa2d1940-be2c-427d-bdd1-95b453c6b419": {"__data__": {"text": "   ,   0.  +0.j        , # may vary0.  +0.j        ,   0.  +0.j        ],[-12.5+17.20477401j,   0.  +0.j        ,   0.  +0.j        ,0.  +0.j        ,   0.  +0.j        ],[-12.5 +4.0614962j ,   0.  +0.j        ,   0.  +0.j        ,0.  +0.j        ,   0.  +0.j        ],[-12.5 -4.0614962j ,   0.  +0.j        ,   0.  +0.j        ,0.  +0.j        ,   0.  +0.j        ],[-12.5-17.20477401j,   0.  +0.j        ,   0.  +0.j        ,0.  +0.j        ,   0.  +0.j        ]])", "doc_id": "fa2d1940-be2c-427d-bdd1-95b453c6b419", "embedding": null, "doc_hash": "b51366c4a307b639dc7c24f90b08c3473b1f8d42e2d7affc7479fa734c794bd3", "extra_info": null, "node_info": {"start": 2674, "end": 3140, "_node_type": "1"}, "relationships": {"1": "f8483515-a53e-4edb-b787-4e7d72fb0bca", "2": "d42c2472-75af-435f-9764-de7ca8736055"}}, "__type__": "1"}, "89706bb4-6652-4a41-abc2-c9e3b24f9cd2": {"__data__": {"text": "\u3010Name\u3011Numpy\u3010Chapter\u3011Array and fft\u3010Section\u3011numpy.fft.ifft2\u3010Content\u3011numpy.fft.ifft2#fft.ifft2(a,s=None,axes=(-2,-1),norm=None)[source]#Compute the 2-dimensional inverse discrete Fourier Transform.This function computes the inverse of the 2-dimensional discrete Fourier\nTransform over any number of axes in an M-dimensional array by means of\nthe Fast Fourier Transform (FFT).  In other words,ifft2(fft2(a))==ato within numerical accuracy.  By default, the inverse transform is\ncomputed over the last two axes of the input array.The input, analogously toifft, should be ordered in the same way as is\nreturned byfft2, i.e. it should have the term for zero frequency\nin the low-order corner of the two axes, the positive frequency terms in\nthe first half of these axes, the term for the Nyquist frequency in the\nmiddle of the axes and the negative frequency terms in the second half of\nboth axes, in order of decreasingly negative frequency.Parameters:aarray_likeInput array, can be complex.ssequence of ints, optionalShape (length of each axis) of the output (s[0]refers to axis 0,s[1]to axis 1, etc.).  This corresponds tonforifft(x,n).\nAlong each axis, if the given shape is smaller than that of the input,\nthe input is cropped.  If it is larger, the input is padded with zeros.\nifsis not given, the shape of the input along the axes specified\nbyaxesis used.  See notes for issue onifftzero padding.axessequence of ints, optionalAxes over which to compute the FFT.  If not given, the last two\naxes are used.  A repeated index inaxesmeans the transform over\nthat axis is performed multiple times.  A one-element sequence means\nthat a one-dimensional FFT is performed.norm{\u201cbackward\u201d, \u201cortho\u201d, \u201cforward\u201d}, optionalNew in version 1.10.0.Normalization mode (seenumpy.fft). Default is \u201cbackward\u201d.\nIndicates which direction of the forward/backward pair of transforms\nis scaled and with what normalization factor.New in version 1.20.0:The \u201cbackward\u201d, \u201cforward\u201d values were added.Returns:outcomplex ndarrayThe truncated or zero-padded input, transformed along the axes\nindicated byaxes, or the last two axes ifaxesis not given.Raises:ValueErrorIfsandaxeshave different length, oraxesnot given andlen(s)!=2.IndexErrorIf an element ofaxesis larger than than the number of axes ofa.See alsonumpy.fftOverall view of discrete Fourier transforms, with definitions and conventions used.fft2The forward 2-dimensional FFT, of whichifft2is the inverse.ifftnThe inverse of then-dimensional FFT.fftThe one-dimensional FFT.ifftThe one-dimensional inverse FFT.Notesifft2is justifftnwith a different default foraxes.Seeifftnfor details and a plotting example, andnumpy.fftfor\ndefinition and conventions used.Zero-padding, analogously withifft, is performed by appending zeros to\nthe input along the specified dimension.  Although this is the common\napproach, it might lead to surprising results.  If another form of zero\npadding is desired, it must be performed beforeifft2is called.Examples>>>a=4*np.eye(4)>>>np.fft.ifft2(a)array([[1.+0.j,  0.+0.j,  0.+0.j,  0.+0.j], # may vary[0.+0.j,  0.+0.j,  0.+0.j,  1.+0.j],[0.+0.j,  0.+0.j,  1.+0.j,  0.+0.j],[0.+0.j,  1.+0.j,  0.+0.j,", "doc_id": "89706bb4-6652-4a41-abc2-c9e3b24f9cd2", "embedding": null, "doc_hash": "e29b9f57ac4daf36a806a1aa13d66eab09c27fe6d9d807dba3fc26a6327fc248", "extra_info": null, "node_info": {"start": 0, "end": 3151, "_node_type": "1"}, "relationships": {"1": "dc0ca8f5-4f6a-40b0-a5fc-4799c56b5261", "3": "c47bfbc6-9c28-4ac5-bad1-15089fc3b73c"}}, "__type__": "1"}, "c47bfbc6-9c28-4ac5-bad1-15089fc3b73c": {"__data__": {"text": "to\nthe input along the specified dimension.  Although this is the common\napproach, it might lead to surprising results.  If another form of zero\npadding is desired, it must be performed beforeifft2is called.Examples>>>a=4*np.eye(4)>>>np.fft.ifft2(a)array([[1.+0.j,  0.+0.j,  0.+0.j,  0.+0.j], # may vary[0.+0.j,  0.+0.j,  0.+0.j,  1.+0.j],[0.+0.j,  0.+0.j,  1.+0.j,  0.+0.j],[0.+0.j,  1.+0.j,  0.+0.j,  0.+0.j]])", "doc_id": "c47bfbc6-9c28-4ac5-bad1-15089fc3b73c", "embedding": null, "doc_hash": "051a2e71cca305225e4166871c1775f46084bf4b341998e278e4cdf2400ec2d3", "extra_info": null, "node_info": {"start": 2750, "end": 3162, "_node_type": "1"}, "relationships": {"1": "dc0ca8f5-4f6a-40b0-a5fc-4799c56b5261", "2": "89706bb4-6652-4a41-abc2-c9e3b24f9cd2"}}, "__type__": "1"}, "e9c304c8-1eae-45f6-a3a5-0560e9dc034a": {"__data__": {"text": "\u3010Name\u3011Numpy\u3010Chapter\u3011Array and fft\u3010Section\u3011numpy.fft.fftn\u3010Content\u3011numpy.fft.fftn#fft.fftn(a,s=None,axes=None,norm=None)[source]#Compute the N-dimensional discrete Fourier Transform.This function computes theN-dimensional discrete Fourier Transform over\nany number of axes in anM-dimensional array by means of the Fast Fourier\nTransform (FFT).Parameters:aarray_likeInput array, can be complex.ssequence of ints, optionalShape (length of each transformed axis) of the output\n(s[0]refers to axis 0,s[1]to axis 1, etc.).\nThis corresponds tonforfft(x,n).\nAlong any axis, if the given shape is smaller than that of the input,\nthe input is cropped.  If it is larger, the input is padded with zeros.\nifsis not given, the shape of the input along the axes specified\nbyaxesis used.axessequence of ints, optionalAxes over which to compute the FFT.  If not given, the lastlen(s)axes are used, or all axes ifsis also not specified.\nRepeated indices inaxesmeans that the transform over that axis is\nperformed multiple times.norm{\u201cbackward\u201d, \u201cortho\u201d, \u201cforward\u201d}, optionalNew in version 1.10.0.Normalization mode (seenumpy.fft). Default is \u201cbackward\u201d.\nIndicates which direction of the forward/backward pair of transforms\nis scaled and with what normalization factor.New in version 1.20.0:The \u201cbackward\u201d, \u201cforward\u201d values were added.Returns:outcomplex ndarrayThe truncated or zero-padded input, transformed along the axes\nindicated byaxes, or by a combination ofsanda,\nas explained in the parameters section above.Raises:ValueErrorIfsandaxeshave different length.IndexErrorIf an element ofaxesis larger than than the number of axes ofa.See alsonumpy.fftOverall view of discrete Fourier transforms, with definitions and conventions used.ifftnThe inverse offftn, the inversen-dimensional FFT.fftThe one-dimensional FFT, with definitions and conventions used.rfftnThen-dimensional FFT of real input.fft2The two-dimensional FFT.fftshiftShifts zero-frequency terms to centre of arrayNotesThe output, analogously tofft, contains the term for zero frequency in\nthe low-order corner of all axes, the positive frequency terms in the\nfirst half of all axes, the term for the Nyquist frequency in the middle\nof all axes and the negative frequency terms in the second half of all\naxes, in order of decreasingly negative frequency.Seenumpy.fftfor details, definitions and conventions used.Examples>>>a=np.mgrid[:3,:3,:3][0]>>>np.fft.fftn(a,axes=(1,2))array([[[ 0.+0.j,   0.+0.j,   0.+0.j], # may vary[ 0.+0.j,   0.+0.j,   0.+0.j],[ 0.+0.j,   0.+0.j,   0.+0.j]],[[ 9.+0.j,   0.+0.j,   0.+0.j],[ 0.+0.j,   0.+0.j,   0.+0.j],[ 0.+0.j,   0.+0.j,   0.+0.j]],[[18.+0.j,   0.+0.j,   0.+0.j],[ 0.+0.j,   0.+0.j,   0.+0.j],[ 0.+0.j,   0.+0.j,   0.+0.j]]])>>>np.fft.fftn(a,(2,2),axes=(0,1))array([[[ 2.+0.j,  2.+0.j,  2.+0.j], # may", "doc_id": "e9c304c8-1eae-45f6-a3a5-0560e9dc034a", "embedding": null, "doc_hash": "f7a6b381e0d822610357a9e68249f8bed5a2f6a2b6b9323517089358811a6a6f", "extra_info": null, "node_info": {"start": 0, "end": 2791, "_node_type": "1"}, "relationships": {"1": "db575dfe-e490-465f-9c5e-ffd3a059c5f5", "3": "2cd9f06f-e422-4711-a598-6d7f50b386d8"}}, "__type__": "1"}, "2cd9f06f-e422-4711-a598-6d7f50b386d8": {"__data__": {"text": "  0.+0.j,   0.+0.j],[ 0.+0.j,   0.+0.j,   0.+0.j],[ 0.+0.j,   0.+0.j,   0.+0.j]],[[18.+0.j,   0.+0.j,   0.+0.j],[ 0.+0.j,   0.+0.j,   0.+0.j],[ 0.+0.j,   0.+0.j,   0.+0.j]]])>>>np.fft.fftn(a,(2,2),axes=(0,1))array([[[ 2.+0.j,  2.+0.j,  2.+0.j], # may vary[ 0.+0.j,  0.+0.j,  0.+0.j]],[[-2.+0.j, -2.+0.j, -2.+0.j],[ 0.+0.j,  0.+0.j,  0.+0.j]]])>>>importmatplotlib.pyplotasplt>>>[X,Y]=np.meshgrid(2*np.pi*np.arange(200)/12,...2*np.pi*np.arange(200)/34)>>>S=np.sin(X)+np.cos(Y)+np.random.uniform(0,1,X.shape)>>>FS=np.fft.fftn(S)>>>plt.imshow(np.log(np.abs(np.fft.fftshift(FS))**2))<matplotlib.image.AxesImage object at 0x...>>>>plt.show()", "doc_id": "2cd9f06f-e422-4711-a598-6d7f50b386d8", "embedding": null, "doc_hash": "350d0ea0fec8b59a73eec65b63656c1637756ee00e6b0cce79523c0c651bb89e", "extra_info": null, "node_info": {"start": 2541, "end": 3176, "_node_type": "1"}, "relationships": {"1": "db575dfe-e490-465f-9c5e-ffd3a059c5f5", "2": "e9c304c8-1eae-45f6-a3a5-0560e9dc034a"}}, "__type__": "1"}, "851a6e9d-ddfd-4968-9727-359ab9123d4b": {"__data__": {"text": "\u3010Name\u3011Numpy\u3010Chapter\u3011Array and fft\u3010Section\u3011numpy.fft.ifftn\u3010Content\u3011numpy.fft.ifftn#fft.ifftn(a,s=None,axes=None,norm=None)[source]#Compute the N-dimensional inverse discrete Fourier Transform.This function computes the inverse of the N-dimensional discrete\nFourier Transform over any number of axes in an M-dimensional array by\nmeans of the Fast Fourier Transform (FFT).  In other words,ifftn(fftn(a))==ato within numerical accuracy.\nFor a description of the definitions and conventions used, seenumpy.fft.The input, analogously toifft, should be ordered in the same way as is\nreturned byfftn, i.e. it should have the term for zero frequency\nin all axes in the low-order corner, the positive frequency terms in the\nfirst half of all axes, the term for the Nyquist frequency in the middle\nof all axes and the negative frequency terms in the second half of all\naxes, in order of decreasingly negative frequency.Parameters:aarray_likeInput array, can be complex.ssequence of ints, optionalShape (length of each transformed axis) of the output\n(s[0]refers to axis 0,s[1]to axis 1, etc.).\nThis corresponds tonforifft(x,n).\nAlong any axis, if the given shape is smaller than that of the input,\nthe input is cropped.  If it is larger, the input is padded with zeros.\nifsis not given, the shape of the input along the axes specified\nbyaxesis used.  See notes for issue onifftzero padding.axessequence of ints, optionalAxes over which to compute the IFFT.  If not given, the lastlen(s)axes are used, or all axes ifsis also not specified.\nRepeated indices inaxesmeans that the inverse transform over that\naxis is performed multiple times.norm{\u201cbackward\u201d, \u201cortho\u201d, \u201cforward\u201d}, optionalNew in version 1.10.0.Normalization mode (seenumpy.fft). Default is \u201cbackward\u201d.\nIndicates which direction of the forward/backward pair of transforms\nis scaled and with what normalization factor.New in version 1.20.0:The \u201cbackward\u201d, \u201cforward\u201d values were added.Returns:outcomplex ndarrayThe truncated or zero-padded input, transformed along the axes\nindicated byaxes, or by a combination ofsora,\nas explained in the parameters section above.Raises:ValueErrorIfsandaxeshave different length.IndexErrorIf an element ofaxesis larger than than the number of axes ofa.See alsonumpy.fftOverall view of discrete Fourier transforms, with definitions and conventions used.fftnThe forwardn-dimensional FFT, of whichifftnis the inverse.ifftThe one-dimensional inverse FFT.ifft2The two-dimensional inverse FFT.ifftshiftUndoesfftshift, shifts zero-frequency terms to beginning of array.NotesSeenumpy.fftfor definitions and conventions used.Zero-padding, analogously withifft, is performed by appending zeros to\nthe input along the specified dimension.  Although this is the common\napproach, it might lead to surprising results.  If another form of zero\npadding is desired, it must be performed beforeifftnis called.Examples>>>a=np.eye(4)>>>np.fft.ifftn(np.fft.fftn(a,axes=(0,)),axes=(1,))array([[1.+0.j,  0.+0.j,  0.+0.j,  0.+0.j], # may vary[0.+0.j,  1.+0.j,  0.+0.j,  0.+0.j],[0.+0.j,  0.+0.j,  1.+0.j,  0.+0.j],[0.+0.j,  0.+0.j,  0.+0.j,  1.+0.j]])Create and plot an image with band-limited", "doc_id": "851a6e9d-ddfd-4968-9727-359ab9123d4b", "embedding": null, "doc_hash": "b6dc8673c7e66c996c955793961469ebb1b5158ce7921a9459c8e986d823d75e", "extra_info": null, "node_info": {"start": 0, "end": 3152, "_node_type": "1"}, "relationships": {"1": "4b184c26-1b77-4c28-8e4e-b79d8a60cd20", "3": "86f66825-1024-4e23-8af1-1b9761e53d43"}}, "__type__": "1"}, "86f66825-1024-4e23-8af1-1b9761e53d43": {"__data__": {"text": "is desired, it must be performed beforeifftnis called.Examples>>>a=np.eye(4)>>>np.fft.ifftn(np.fft.fftn(a,axes=(0,)),axes=(1,))array([[1.+0.j,  0.+0.j,  0.+0.j,  0.+0.j], # may vary[0.+0.j,  1.+0.j,  0.+0.j,  0.+0.j],[0.+0.j,  0.+0.j,  1.+0.j,  0.+0.j],[0.+0.j,  0.+0.j,  0.+0.j,  1.+0.j]])Create and plot an image with band-limited frequency content:>>>importmatplotlib.pyplotasplt>>>n=np.zeros((200,200),dtype=complex)>>>n[60:80,20:40]=np.exp(1j*np.random.uniform(0,2*np.pi,(20,20)))>>>im=np.fft.ifftn(n).real>>>plt.imshow(im)<matplotlib.image.AxesImage object at 0x...>>>>plt.show()", "doc_id": "86f66825-1024-4e23-8af1-1b9761e53d43", "embedding": null, "doc_hash": "b176c543261e8196ce1041ebc5010572a063d4205b85fa6cb8da75c32156676e", "extra_info": null, "node_info": {"start": 2820, "end": 3405, "_node_type": "1"}, "relationships": {"1": "4b184c26-1b77-4c28-8e4e-b79d8a60cd20", "2": "851a6e9d-ddfd-4968-9727-359ab9123d4b"}}, "__type__": "1"}, "09a512f6-8c2a-443d-9828-495f4ed91477": {"__data__": {"text": "\u3010Name\u3011Numpy\u3010Chapter\u3011Array and fft\u3010Section\u3011numpy.fft.rfft\u3010Content\u3011numpy.fft.rfft#fft.rfft(a,n=None,axis=-1,norm=None)[source]#Compute the one-dimensional discrete Fourier Transform for real input.This function computes the one-dimensionaln-point discrete Fourier\nTransform (DFT) of a real-valued array by means of an efficient algorithm\ncalled the Fast Fourier Transform (FFT).Parameters:aarray_likeInput arraynint, optionalNumber of points along transformation axis in the input to use.\nIfnis smaller than the length of the input, the input is cropped.\nIf it is larger, the input is padded with zeros. Ifnis not given,\nthe length of the input along the axis specified byaxisis used.axisint, optionalAxis over which to compute the FFT. If not given, the last axis is\nused.norm{\u201cbackward\u201d, \u201cortho\u201d, \u201cforward\u201d}, optionalNew in version 1.10.0.Normalization mode (seenumpy.fft). Default is \u201cbackward\u201d.\nIndicates which direction of the forward/backward pair of transforms\nis scaled and with what normalization factor.New in version 1.20.0:The \u201cbackward\u201d, \u201cforward\u201d values were added.Returns:outcomplex ndarrayThe truncated or zero-padded input, transformed along the axis\nindicated byaxis, or the last one ifaxisis not specified.\nIfnis even, the length of the transformed axis is(n/2)+1.\nIfnis odd, the length is(n+1)/2.Raises:IndexErrorIfaxisis not a valid axis ofa.See alsonumpy.fftFor definition of the DFT and conventions used.irfftThe inverse ofrfft.fftThe one-dimensional FFT of general (complex) input.fftnThen-dimensional FFT.rfftnThen-dimensional FFT of real input.NotesWhen the DFT is computed for purely real input, the output is\nHermitian-symmetric, i.e. the negative frequency terms are just the complex\nconjugates of the corresponding positive-frequency terms, and the\nnegative-frequency terms are therefore redundant.  This function does not\ncompute the negative frequency terms, and the length of the transformed\naxis of the output is thereforen//2+1.WhenA=rfft(a)and fs is the sampling frequency,A[0]contains\nthe zero-frequency term 0*fs, which is real due to Hermitian symmetry.Ifnis even,A[-1]contains the term representing both positive\nand negative Nyquist frequency (+fs/2 and -fs/2), and must also be purely\nreal. Ifnis odd, there is no term at fs/2;A[-1]contains\nthe largest positive frequency (fs/2*(n-1)/n), and is complex in the\ngeneral case.If the inputacontains an imaginary part, it is silently discarded.Examples>>>np.fft.fft([0,1,0,0])array([ 1.+0.j,  0.-1.j, -1.+0.j,  0.+1.j]) # may vary>>>np.fft.rfft([0,1,0,0])array([ 1.+0.j,  0.-1.j, -1.+0.j]) # may varyNotice how the final element of thefftoutput is the complex conjugate\nof the second element, for real input. Forrfft, this symmetry is\nexploited to compute only the non-negative frequency terms.", "doc_id": "09a512f6-8c2a-443d-9828-495f4ed91477", "embedding": null, "doc_hash": "0a4bee9617b027b286120f5eaf90bab5b26f450e077e3cfeb84f0451b2c20dc0", "extra_info": null, "node_info": {"start": 0, "end": 2779, "_node_type": "1"}, "relationships": {"1": "6cd9ad88-0fb7-45ff-bd22-52fb85de2657"}}, "__type__": "1"}, "813bd369-de33-4cf1-ae2a-832c7e65bba7": {"__data__": {"text": "\u3010Name\u3011Numpy\u3010Chapter\u3011Array and fft\u3010Section\u3011numpy.fft.irfft\u3010Content\u3011numpy.fft.irfft#fft.irfft(a,n=None,axis=-1,norm=None)[source]#Computes the inverse ofrfft.This function computes the inverse of the one-dimensionaln-point\ndiscrete Fourier Transform of real input computed byrfft.\nIn other words,irfft(rfft(a),len(a))==ato within numerical\naccuracy. (See Notes below for whylen(a)is necessary here.)The input is expected to be in the form returned byrfft, i.e. the\nreal zero-frequency term followed by the complex positive frequency terms\nin order of increasing frequency.  Since the discrete Fourier Transform of\nreal input is Hermitian-symmetric, the negative frequency terms are taken\nto be the complex conjugates of the corresponding positive frequency terms.Parameters:aarray_likeThe input array.nint, optionalLength of the transformed axis of the output.\nFornoutput points,n//2+1input points are necessary.  If the\ninput is longer than this, it is cropped.  If it is shorter than this,\nit is padded with zeros.  Ifnis not given, it is taken to be2*(m-1)wheremis the length of the input along the axis\nspecified byaxis.axisint, optionalAxis over which to compute the inverse FFT. If not given, the last\naxis is used.norm{\u201cbackward\u201d, \u201cortho\u201d, \u201cforward\u201d}, optionalNew in version 1.10.0.Normalization mode (seenumpy.fft). Default is \u201cbackward\u201d.\nIndicates which direction of the forward/backward pair of transforms\nis scaled and with what normalization factor.New in version 1.20.0:The \u201cbackward\u201d, \u201cforward\u201d values were added.Returns:outndarrayThe truncated or zero-padded input, transformed along the axis\nindicated byaxis, or the last one ifaxisis not specified.\nThe length of the transformed axis isn, or, ifnis not given,2*(m-1)wheremis the length of the transformed axis of the\ninput. To get an odd number of output points,nmust be specified.Raises:IndexErrorIfaxisis not a valid axis ofa.See alsonumpy.fftFor definition of the DFT and conventions used.rfftThe one-dimensional FFT of real input, of whichirfftis inverse.fftThe one-dimensional FFT.irfft2The inverse of the two-dimensional FFT of real input.irfftnThe inverse of then-dimensional FFT of real input.NotesReturns the real valuedn-point inverse discrete Fourier transform\nofa, whereacontains the non-negative frequency terms of a\nHermitian-symmetric sequence.nis the length of the result, not the\ninput.If you specify annsuch thatamust be zero-padded or truncated, the\nextra/removed values will be added/removed at high frequencies. One can\nthus resample a series tompoints via Fourier interpolation by:a_resamp=irfft(rfft(a),m).The correct interpretation of the hermitian input depends on the length of\nthe original data, as given byn. This is because each input shape could\ncorrespond to either an odd or even length signal. By default,irfftassumes an even output length which puts the last entry at the Nyquist\nfrequency; aliasing with its symmetric counterpart. By Hermitian symmetry,\nthe value is thus treated as purely real. To avoid losing information, the\ncorrect length of the real inputmustbe given.Examples>>>np.fft.ifft([1,-1j,-1,1j])array([0.+0.j,  1.+0.j,  0.+0.j,  0.+0.j]) # may vary>>>np.fft.irfft([1,-1j,-1])array([0.,  1.,  0.,  0.])Notice how the last term in the input to the ordinaryifftis the\ncomplex conjugate of the second term, and the", "doc_id": "813bd369-de33-4cf1-ae2a-832c7e65bba7", "embedding": null, "doc_hash": "c3aa72c30282432229bd64d1b1ec83bfce6a399db62fe034255794ee4137953e", "extra_info": null, "node_info": {"start": 0, "end": 3326, "_node_type": "1"}, "relationships": {"1": "0055a139-82cc-46a6-ae41-540a21862431", "3": "daafb0f0-5387-4956-9b63-777d0605e7e5"}}, "__type__": "1"}, "daafb0f0-5387-4956-9b63-777d0605e7e5": {"__data__": {"text": "to either an odd or even length signal. By default,irfftassumes an even output length which puts the last entry at the Nyquist\nfrequency; aliasing with its symmetric counterpart. By Hermitian symmetry,\nthe value is thus treated as purely real. To avoid losing information, the\ncorrect length of the real inputmustbe given.Examples>>>np.fft.ifft([1,-1j,-1,1j])array([0.+0.j,  1.+0.j,  0.+0.j,  0.+0.j]) # may vary>>>np.fft.irfft([1,-1j,-1])array([0.,  1.,  0.,  0.])Notice how the last term in the input to the ordinaryifftis the\ncomplex conjugate of the second term, and the output has zero imaginary\npart everywhere.  When callingirfft, the negative frequencies are not\nspecified, and the output array is purely real.", "doc_id": "daafb0f0-5387-4956-9b63-777d0605e7e5", "embedding": null, "doc_hash": "4ad7746c0b353071de456c1b8cf2a61acc745650f0305de27892aaf833934c2a", "extra_info": null, "node_info": {"start": 2752, "end": 3470, "_node_type": "1"}, "relationships": {"1": "0055a139-82cc-46a6-ae41-540a21862431", "2": "813bd369-de33-4cf1-ae2a-832c7e65bba7"}}, "__type__": "1"}, "5d5782d6-0681-40ed-9571-4254cc039de6": {"__data__": {"text": "\u3010Name\u3011Numpy\u3010Chapter\u3011Array and fft\u3010Section\u3011numpy.fft.rfft2\u3010Content\u3011numpy.fft.rfft2#fft.rfft2(a,s=None,axes=(-2,-1),norm=None)[source]#Compute the 2-dimensional FFT of a real array.Parameters:aarrayInput array, taken to be real.ssequence of ints, optionalShape of the FFT.axessequence of ints, optionalAxes over which to compute the FFT.norm{\u201cbackward\u201d, \u201cortho\u201d, \u201cforward\u201d}, optionalNew in version 1.10.0.Normalization mode (seenumpy.fft). Default is \u201cbackward\u201d.\nIndicates which direction of the forward/backward pair of transforms\nis scaled and with what normalization factor.New in version 1.20.0:The \u201cbackward\u201d, \u201cforward\u201d values were added.Returns:outndarrayThe result of the real 2-D FFT.See alsorfftnCompute the N-dimensional discrete Fourier Transform for real input.NotesThis is really justrfftnwith different default behavior.\nFor more details seerfftn.Examples>>>a=np.mgrid[:5,:5][0]>>>np.fft.rfft2(a)array([[ 50.  +0.j        ,   0.  +0.j        ,   0.  +0.j        ],[-12.5+17.20477401j,   0.  +0.j        ,   0.  +0.j        ],[-12.5 +4.0614962j ,   0.  +0.j        ,   0.  +0.j        ],[-12.5 -4.0614962j ,   0.  +0.j        ,   0.  +0.j        ],[-12.5-17.20477401j,   0.  +0.j        ,   0.  +0.j        ]])", "doc_id": "5d5782d6-0681-40ed-9571-4254cc039de6", "embedding": null, "doc_hash": "d7485eb37ba9e1991dcf4b16f19117e4c944efab87d24c9ba89912963fb35cc4", "extra_info": null, "node_info": {"start": 0, "end": 1221, "_node_type": "1"}, "relationships": {"1": "def10e11-1b43-458d-96ca-f9c0989af2d8"}}, "__type__": "1"}, "d34f4964-f265-47cb-88d5-2b7a013795cd": {"__data__": {"text": "\u3010Name\u3011Numpy\u3010Chapter\u3011Array and fft\u3010Section\u3011numpy.fft.irfft2\u3010Content\u3011numpy.fft.irfft2#fft.irfft2(a,s=None,axes=(-2,-1),norm=None)[source]#Computes the inverse ofrfft2.Parameters:aarray_likeThe input arrayssequence of ints, optionalShape of the real output to the inverse FFT.axessequence of ints, optionalThe axes over which to compute the inverse fft.\nDefault is the last two axes.norm{\u201cbackward\u201d, \u201cortho\u201d, \u201cforward\u201d}, optionalNew in version 1.10.0.Normalization mode (seenumpy.fft). Default is \u201cbackward\u201d.\nIndicates which direction of the forward/backward pair of transforms\nis scaled and with what normalization factor.New in version 1.20.0:The \u201cbackward\u201d, \u201cforward\u201d values were added.Returns:outndarrayThe result of the inverse real 2-D FFT.See alsorfft2The forward two-dimensional FFT of real input, of whichirfft2is the inverse.rfftThe one-dimensional FFT for real input.irfftThe inverse of the one-dimensional FFT of real input.irfftnCompute the inverse of the N-dimensional FFT of real input.NotesThis is reallyirfftnwith different defaults.\nFor more details seeirfftn.Examples>>>a=np.mgrid[:5,:5][0]>>>A=np.fft.rfft2(a)>>>np.fft.irfft2(A,s=a.shape)array([[0., 0., 0., 0., 0.],[1., 1., 1., 1., 1.],[2., 2., 2., 2., 2.],[3., 3., 3., 3., 3.],[4., 4., 4., 4., 4.]])", "doc_id": "d34f4964-f265-47cb-88d5-2b7a013795cd", "embedding": null, "doc_hash": "6d137cb88ca94e4daee9e2cd654c4d1b08576925801cf8065d761acc3a940f37", "extra_info": null, "node_info": {"start": 0, "end": 1268, "_node_type": "1"}, "relationships": {"1": "2bd29eec-be71-4312-8543-b1d0fc88d34d"}}, "__type__": "1"}, "21162c97-b8c7-42a2-9d30-cea2f4539595": {"__data__": {"text": "\u3010Name\u3011Numpy\u3010Chapter\u3011Array and fft\u3010Section\u3011numpy.fft.rfftn\u3010Content\u3011numpy.fft.rfftn#fft.rfftn(a,s=None,axes=None,norm=None)[source]#Compute the N-dimensional discrete Fourier Transform for real input.This function computes the N-dimensional discrete Fourier Transform over\nany number of axes in an M-dimensional real array by means of the Fast\nFourier Transform (FFT).  By default, all axes are transformed, with the\nreal transform performed over the last axis, while the remaining\ntransforms are complex.Parameters:aarray_likeInput array, taken to be real.ssequence of ints, optionalShape (length along each transformed axis) to use from the input.\n(s[0]refers to axis 0,s[1]to axis 1, etc.).\nThe final element ofscorresponds tonforrfft(x,n), while\nfor the remaining axes, it corresponds tonforfft(x,n).\nAlong any axis, if the given shape is smaller than that of the input,\nthe input is cropped.  If it is larger, the input is padded with zeros.\nifsis not given, the shape of the input along the axes specified\nbyaxesis used.axessequence of ints, optionalAxes over which to compute the FFT.  If not given, the lastlen(s)axes are used, or all axes ifsis also not specified.norm{\u201cbackward\u201d, \u201cortho\u201d, \u201cforward\u201d}, optionalNew in version 1.10.0.Normalization mode (seenumpy.fft). Default is \u201cbackward\u201d.\nIndicates which direction of the forward/backward pair of transforms\nis scaled and with what normalization factor.New in version 1.20.0:The \u201cbackward\u201d, \u201cforward\u201d values were added.Returns:outcomplex ndarrayThe truncated or zero-padded input, transformed along the axes\nindicated byaxes, or by a combination ofsanda,\nas explained in the parameters section above.\nThe length of the last axis transformed will bes[-1]//2+1,\nwhile the remaining transformed axes will have lengths according tos, or unchanged from the input.Raises:ValueErrorIfsandaxeshave different length.IndexErrorIf an element ofaxesis larger than than the number of axes ofa.See alsoirfftnThe inverse ofrfftn, i.e. the inverse of the n-dimensional FFT of real input.fftThe one-dimensional FFT, with definitions and conventions used.rfftThe one-dimensional FFT of real input.fftnThe n-dimensional FFT.rfft2The two-dimensional FFT of real input.NotesThe transform for real input is performed over the last transformation\naxis, as byrfft, then the transform over the remaining axes is\nperformed as byfftn.  The order of the output is as forrfftfor the\nfinal transformation axis, and as forfftnfor the remaining\ntransformation axes.Seefftfor details, definitions and conventions used.Examples>>>a=np.ones((2,2,2))>>>np.fft.rfftn(a)array([[[8.+0.j,  0.+0.j], # may vary[0.+0.j,  0.+0.j]],[[0.+0.j,  0.+0.j],[0.+0.j,  0.+0.j]]])>>>np.fft.rfftn(a,axes=(2,0))array([[[4.+0.j,  0.+0.j], # may vary[4.+0.j,  0.+0.j]],[[0.+0.j,  0.+0.j],[0.+0.j,  0.+0.j]]])", "doc_id": "21162c97-b8c7-42a2-9d30-cea2f4539595", "embedding": null, "doc_hash": "95fe135b31db59a9b1d37def283058d6c94e3fcfe91b128cb3ebd11f4006d240", "extra_info": null, "node_info": {"start": 0, "end": 2809, "_node_type": "1"}, "relationships": {"1": "aa2182b4-a0fc-4dc5-8b08-d69035155266"}}, "__type__": "1"}, "e67b4c7c-0115-492a-b3ae-05cc62986eec": {"__data__": {"text": "\u3010Name\u3011Numpy\u3010Chapter\u3011Array and fft\u3010Section\u3011numpy.fft.irfftn\u3010Content\u3011numpy.fft.irfftn#fft.irfftn(a,s=None,axes=None,norm=None)[source]#Computes the inverse ofrfftn.This function computes the inverse of the N-dimensional discrete\nFourier Transform for real input over any number of axes in an\nM-dimensional array by means of the Fast Fourier Transform (FFT).  In\nother words,irfftn(rfftn(a),a.shape)==ato within numerical\naccuracy. (Thea.shapeis necessary likelen(a)is forirfft,\nand for the same reason.)The input should be ordered in the same way as is returned byrfftn,\ni.e. as forirfftfor the final transformation axis, and as forifftnalong all the other axes.Parameters:aarray_likeInput array.ssequence of ints, optionalShape (length of each transformed axis) of the output\n(s[0]refers to axis 0,s[1]to axis 1, etc.).sis also the\nnumber of input points used along this axis, except for the last axis,\nwheres[-1]//2+1points of the input are used.\nAlong any axis, if the shape indicated bysis smaller than that of\nthe input, the input is cropped.  If it is larger, the input is padded\nwith zeros. Ifsis not given, the shape of the input along the axes\nspecified by axes is used. Except for the last axis which is taken to\nbe2*(m-1)wheremis the length of the input along that axis.axessequence of ints, optionalAxes over which to compute the inverse FFT. If not given, the lastlen(s)axes are used, or all axes ifsis also not specified.\nRepeated indices inaxesmeans that the inverse transform over that\naxis is performed multiple times.norm{\u201cbackward\u201d, \u201cortho\u201d, \u201cforward\u201d}, optionalNew in version 1.10.0.Normalization mode (seenumpy.fft). Default is \u201cbackward\u201d.\nIndicates which direction of the forward/backward pair of transforms\nis scaled and with what normalization factor.New in version 1.20.0:The \u201cbackward\u201d, \u201cforward\u201d values were added.Returns:outndarrayThe truncated or zero-padded input, transformed along the axes\nindicated byaxes, or by a combination ofsora,\nas explained in the parameters section above.\nThe length of each transformed axis is as given by the corresponding\nelement ofs, or the length of the input in every axis except for the\nlast one ifsis not given.  In the final transformed axis the length\nof the output whensis not given is2*(m-1)wheremis the\nlength of the final transformed axis of the input.  To get an odd\nnumber of output points in the final axis,smust be specified.Raises:ValueErrorIfsandaxeshave different length.IndexErrorIf an element ofaxesis larger than than the number of axes ofa.See alsorfftnThe forward n-dimensional FFT of real input, of whichifftnis the inverse.fftThe one-dimensional FFT, with definitions and conventions used.irfftThe inverse of the one-dimensional FFT of real input.irfft2The inverse of the two-dimensional FFT of real input.NotesSeefftfor definitions and conventions used.Seerfftfor definitions and conventions used for real input.The correct interpretation of the hermitian input depends on the shape of\nthe original data, as given bys. This is because each input shape could\ncorrespond to either an odd or even length signal. By default,irfftnassumes an even output length which puts the last entry at the Nyquist\nfrequency; aliasing with its symmetric counterpart. When performing the\nfinal complex to real transform, the last value is thus treated as purely\nreal. To avoid losing information, the correct shape of the real inputmustbe", "doc_id": "e67b4c7c-0115-492a-b3ae-05cc62986eec", "embedding": null, "doc_hash": "f78aef3a4b69ed9a3edddc0b2d159e87f8f56e3eb47c9dda84f3b624bbf9f618", "extra_info": null, "node_info": {"start": 0, "end": 3404, "_node_type": "1"}, "relationships": {"1": "f6553eb6-cb4e-45b3-ba1b-276554fa821c", "3": "3a987ee0-d406-4e89-a6e5-9658d8c7704e"}}, "__type__": "1"}, "3a987ee0-d406-4e89-a6e5-9658d8c7704e": {"__data__": {"text": "inverse.fftThe one-dimensional FFT, with definitions and conventions used.irfftThe inverse of the one-dimensional FFT of real input.irfft2The inverse of the two-dimensional FFT of real input.NotesSeefftfor definitions and conventions used.Seerfftfor definitions and conventions used for real input.The correct interpretation of the hermitian input depends on the shape of\nthe original data, as given bys. This is because each input shape could\ncorrespond to either an odd or even length signal. By default,irfftnassumes an even output length which puts the last entry at the Nyquist\nfrequency; aliasing with its symmetric counterpart. When performing the\nfinal complex to real transform, the last value is thus treated as purely\nreal. To avoid losing information, the correct shape of the real inputmustbe given.Examples>>>a=np.zeros((3,2,2))>>>a[0,0,0]=3*2*2>>>np.fft.irfftn(a)array([[[1.,  1.],[1.,  1.]],[[1.,  1.],[1.,  1.]],[[1.,  1.],[1.,  1.]]])", "doc_id": "3a987ee0-d406-4e89-a6e5-9658d8c7704e", "embedding": null, "doc_hash": "6d1b2794843ca6a0c2313e31bc26913b3c61331f0a114974a959dbfb69b80e34", "extra_info": null, "node_info": {"start": 2599, "end": 3551, "_node_type": "1"}, "relationships": {"1": "f6553eb6-cb4e-45b3-ba1b-276554fa821c", "2": "e67b4c7c-0115-492a-b3ae-05cc62986eec"}}, "__type__": "1"}, "aec7ecd9-cc8d-45ab-a73b-47b90464610b": {"__data__": {"text": "\u3010Name\u3011Numpy\u3010Chapter\u3011Array and fft\u3010Section\u3011numpy.fft.hfft\u3010Content\u3011numpy.fft.hfft#fft.hfft(a,n=None,axis=-1,norm=None)[source]#Compute the FFT of a signal that has Hermitian symmetry, i.e., a real\nspectrum.Parameters:aarray_likeThe input array.nint, optionalLength of the transformed axis of the output. Fornoutput\npoints,n//2+1input points are necessary.  If the input is\nlonger than this, it is cropped.  If it is shorter than this, it is\npadded with zeros.  Ifnis not given, it is taken to be2*(m-1)wheremis the length of the input along the axis specified byaxis.axisint, optionalAxis over which to compute the FFT. If not given, the last\naxis is used.norm{\u201cbackward\u201d, \u201cortho\u201d, \u201cforward\u201d}, optionalNew in version 1.10.0.Normalization mode (seenumpy.fft). Default is \u201cbackward\u201d.\nIndicates which direction of the forward/backward pair of transforms\nis scaled and with what normalization factor.New in version 1.20.0:The \u201cbackward\u201d, \u201cforward\u201d values were added.Returns:outndarrayThe truncated or zero-padded input, transformed along the axis\nindicated byaxis, or the last one ifaxisis not specified.\nThe length of the transformed axis isn, or, ifnis not given,2*m-2wheremis the length of the transformed axis of\nthe input. To get an odd number of output points,nmust be\nspecified, for instance as2*m-1in the typical case,Raises:IndexErrorIfaxisis not a valid axis ofa.See alsorfftCompute the one-dimensional FFT for real input.ihfftThe inverse ofhfft.Noteshfft/ihfftare a pair analogous torfft/irfft, but for the\nopposite case: here the signal has Hermitian symmetry in the time\ndomain and is real in the frequency domain. So here it\u2019shfftfor\nwhich you must supply the length of the result if it is to be odd.even:ihfft(hfft(a,2*len(a)-2))==a, within roundoff error,odd:ihfft(hfft(a,2*len(a)-1))==a, within roundoff error.The correct interpretation of the hermitian input depends on the length of\nthe original data, as given byn. This is because each input shape could\ncorrespond to either an odd or even length signal. By default,hfftassumes an even output length which puts the last entry at the Nyquist\nfrequency; aliasing with its symmetric counterpart. By Hermitian symmetry,\nthe value is thus treated as purely real. To avoid losing information, the\nshape of the full signalmustbe given.Examples>>>signal=np.array([1,2,3,4,3,2])>>>np.fft.fft(signal)array([15.+0.j,  -4.+0.j,   0.+0.j,  -1.-0.j,   0.+0.j,  -4.+0.j]) # may vary>>>np.fft.hfft(signal[:4])# Input first half of signalarray([15.,  -4.,   0.,  -1.,   0.,  -4.])>>>np.fft.hfft(signal,6)# Input entire signal and truncatearray([15.,  -4.,   0.,  -1.,   0.,  -4.])>>>signal=np.array([[1,1.j],[-1.j,2]])>>>np.conj(signal.T)-signal# check Hermitian symmetryarray([[ 0.-0.j,  -0.+0.j], # may vary[ 0.+0.j,  0.-0.j]])>>>freq_spectrum=np.fft.hfft(signal)>>>freq_spectrumarray([[", "doc_id": "aec7ecd9-cc8d-45ab-a73b-47b90464610b", "embedding": null, "doc_hash": "13d12ef85d167503ec4709c67a3220abcb71e082b59f6c85f32f610340673b61", "extra_info": null, "node_info": {"start": 0, "end": 2836, "_node_type": "1"}, "relationships": {"1": "fb496c5f-8200-4dcc-b720-6ca7fd26659a", "3": "4f5c8391-a046-4de5-99be-ac4aed3cd64f"}}, "__type__": "1"}, "4f5c8391-a046-4de5-99be-ac4aed3cd64f": {"__data__": {"text": "Input first half of signalarray([15.,  -4.,   0.,  -1.,   0.,  -4.])>>>np.fft.hfft(signal,6)# Input entire signal and truncatearray([15.,  -4.,   0.,  -1.,   0.,  -4.])>>>signal=np.array([[1,1.j],[-1.j,2]])>>>np.conj(signal.T)-signal# check Hermitian symmetryarray([[ 0.-0.j,  -0.+0.j], # may vary[ 0.+0.j,  0.-0.j]])>>>freq_spectrum=np.fft.hfft(signal)>>>freq_spectrumarray([[ 1.,  1.],[ 2., -2.]])", "doc_id": "4f5c8391-a046-4de5-99be-ac4aed3cd64f", "embedding": null, "doc_hash": "5ec5aea8811876d84fdec825ace4f0a8b7f0ab11630223b721d2ccd522afc865", "extra_info": null, "node_info": {"start": 2459, "end": 2858, "_node_type": "1"}, "relationships": {"1": "fb496c5f-8200-4dcc-b720-6ca7fd26659a", "2": "aec7ecd9-cc8d-45ab-a73b-47b90464610b"}}, "__type__": "1"}, "cbcb36a5-70b7-4c4a-afb8-aa15b9a40e31": {"__data__": {"text": "\u3010Name\u3011Numpy\u3010Chapter\u3011Array and fft\u3010Section\u3011numpy.fft.ihfft\u3010Content\u3011numpy.fft.ihfft#fft.ihfft(a,n=None,axis=-1,norm=None)[source]#Compute the inverse FFT of a signal that has Hermitian symmetry.Parameters:aarray_likeInput array.nint, optionalLength of the inverse FFT, the number of points along\ntransformation axis in the input to use.  Ifnis smaller than\nthe length of the input, the input is cropped.  If it is larger,\nthe input is padded with zeros. Ifnis not given, the length of\nthe input along the axis specified byaxisis used.axisint, optionalAxis over which to compute the inverse FFT. If not given, the last\naxis is used.norm{\u201cbackward\u201d, \u201cortho\u201d, \u201cforward\u201d}, optionalNew in version 1.10.0.Normalization mode (seenumpy.fft). Default is \u201cbackward\u201d.\nIndicates which direction of the forward/backward pair of transforms\nis scaled and with what normalization factor.New in version 1.20.0:The \u201cbackward\u201d, \u201cforward\u201d values were added.Returns:outcomplex ndarrayThe truncated or zero-padded input, transformed along the axis\nindicated byaxis, or the last one ifaxisis not specified.\nThe length of the transformed axis isn//2+1.See alsohfft,irfftNoteshfft/ihfftare a pair analogous torfft/irfft, but for the\nopposite case: here the signal has Hermitian symmetry in the time\ndomain and is real in the frequency domain. So here it\u2019shfftfor\nwhich you must supply the length of the result if it is to be odd:even:ihfft(hfft(a,2*len(a)-2))==a, within roundoff error,odd:ihfft(hfft(a,2*len(a)-1))==a, within roundoff error.Examples>>>spectrum=np.array([15,-4,0,-1,0,-4])>>>np.fft.ifft(spectrum)array([1.+0.j,  2.+0.j,  3.+0.j,  4.+0.j,  3.+0.j,  2.+0.j]) # may vary>>>np.fft.ihfft(spectrum)array([ 1.-0.j,  2.-0.j,  3.-0.j,  4.-0.j]) # may vary", "doc_id": "cbcb36a5-70b7-4c4a-afb8-aa15b9a40e31", "embedding": null, "doc_hash": "efb0ee2049d0f34483db00ba82442321442324a1798dca927c5f7a9ae8a8c2b3", "extra_info": null, "node_info": {"start": 0, "end": 1736, "_node_type": "1"}, "relationships": {"1": "732e8efb-c7ab-493e-8d32-0b8819f4ad2c"}}, "__type__": "1"}, "63dd1113-04b1-4b0e-98a1-fb78d4f95dd8": {"__data__": {"text": "\u3010Name\u3011Numpy\u3010Chapter\u3011Array and fft\u3010Section\u3011numpy.fft.fftfreq\u3010Content\u3011numpy.fft.fftfreq#fft.fftfreq(n,d=1.0)[source]#Return the Discrete Fourier Transform sample frequencies.The returned float arrayfcontains the frequency bin centers in cycles\nper unit of the sample spacing (with zero at the start).  For instance, if\nthe sample spacing is in seconds, then the frequency unit is cycles/second.Given a window lengthnand a sample spacingd:f=[0,1,...,n/2-1,-n/2,...,-1]/(d*n)ifnisevenf=[0,1,...,(n-1)/2,-(n-1)/2,...,-1]/(d*n)ifnisoddParameters:nintWindow length.dscalar, optionalSample spacing (inverse of the sampling rate). Defaults to 1.Returns:fndarrayArray of lengthncontaining the sample frequencies.Examples>>>signal=np.array([-2,8,6,4,1,0,3,5],dtype=float)>>>fourier=np.fft.fft(signal)>>>n=signal.size>>>timestep=0.1>>>freq=np.fft.fftfreq(n,d=timestep)>>>freqarray([ 0.  ,  1.25,  2.5 , ..., -3.75, -2.5 , -1.25])", "doc_id": "63dd1113-04b1-4b0e-98a1-fb78d4f95dd8", "embedding": null, "doc_hash": "a2a81ce490862d0965acab80cac5f1f237b1c8afb185ccd581ae2efeb44a010f", "extra_info": null, "node_info": {"start": 0, "end": 917, "_node_type": "1"}, "relationships": {"1": "11d3e4bb-92fb-41a4-b8f6-77ddcaf3dfcd"}}, "__type__": "1"}, "fb307454-d4d9-4321-a520-e21e1080e7cf": {"__data__": {"text": "\u3010Name\u3011Numpy\u3010Chapter\u3011Array and fft\u3010Section\u3011numpy.fft.rfftfreq\u3010Content\u3011numpy.fft.rfftfreq#fft.rfftfreq(n,d=1.0)[source]#Return the Discrete Fourier Transform sample frequencies\n(for usage with rfft, irfft).The returned float arrayfcontains the frequency bin centers in cycles\nper unit of the sample spacing (with zero at the start).  For instance, if\nthe sample spacing is in seconds, then the frequency unit is cycles/second.Given a window lengthnand a sample spacingd:f=[0,1,...,n/2-1,n/2]/(d*n)ifnisevenf=[0,1,...,(n-1)/2-1,(n-1)/2]/(d*n)ifnisoddUnlikefftfreq(but likescipy.fftpack.rfftfreq)\nthe Nyquist frequency component is considered to be positive.Parameters:nintWindow length.dscalar, optionalSample spacing (inverse of the sampling rate). Defaults to 1.Returns:fndarrayArray of lengthn//2+1containing the sample frequencies.Examples>>>signal=np.array([-2,8,6,4,1,0,3,5,-3,4],dtype=float)>>>fourier=np.fft.rfft(signal)>>>n=signal.size>>>sample_rate=100>>>freq=np.fft.fftfreq(n,d=1./sample_rate)>>>freqarray([  0.,  10.,  20., ..., -30., -20., -10.])>>>freq=np.fft.rfftfreq(n,d=1./sample_rate)>>>freqarray([  0.,  10.,  20.,  30.,  40.,  50.])", "doc_id": "fb307454-d4d9-4321-a520-e21e1080e7cf", "embedding": null, "doc_hash": "72f33d3d0af4dc909fb706ea46ee481c7b9786ff14d0bb6526e133234cfda9f3", "extra_info": null, "node_info": {"start": 0, "end": 1149, "_node_type": "1"}, "relationships": {"1": "d0cdf394-b8ee-4a18-aefc-f5331047de1c"}}, "__type__": "1"}, "73472dcf-1ab7-4490-89a8-88b949f905dc": {"__data__": {"text": "\u3010Name\u3011Numpy\u3010Chapter\u3011Array and fft\u3010Section\u3011numpy.fft.fftshift\u3010Content\u3011numpy.fft.fftshift#fft.fftshift(x,axes=None)[source]#Shift the zero-frequency component to the center of the spectrum.This function swaps half-spaces for all axes listed (defaults to all).\nNote thaty[0]is the Nyquist component only iflen(x)is even.Parameters:xarray_likeInput array.axesint or shape tuple, optionalAxes over which to shift.  Default is None, which shifts all axes.Returns:yndarrayThe shifted array.See alsoifftshiftThe inverse offftshift.Examples>>>freqs=np.fft.fftfreq(10,0.1)>>>freqsarray([ 0.,  1.,  2., ..., -3., -2., -1.])>>>np.fft.fftshift(freqs)array([-5., -4., -3., -2., -1.,  0.,  1.,  2.,  3.,  4.])Shift the zero-frequency component only along the second axis:>>>freqs=np.fft.fftfreq(9,d=1./9).reshape(3,3)>>>freqsarray([[ 0.,  1.,  2.],[ 3.,  4., -4.],[-3., -2., -1.]])>>>np.fft.fftshift(freqs,axes=(1,))array([[ 2.,  0.,  1.],[-4.,  3.,  4.],[-1., -3., -2.]])", "doc_id": "73472dcf-1ab7-4490-89a8-88b949f905dc", "embedding": null, "doc_hash": "ef1ba5c4d72dd544af6c024a75fc0864b6bfd07cd9c7193bff2892e46676121a", "extra_info": null, "node_info": {"start": 0, "end": 957, "_node_type": "1"}, "relationships": {"1": "7b1e4963-447c-46be-9752-349be22555f4"}}, "__type__": "1"}, "7bfe714b-33df-4dac-973d-d57488adb652": {"__data__": {"text": "\u3010Name\u3011Numpy\u3010Chapter\u3011Array and fft\u3010Section\u3011numpy.fft.ifftshift\u3010Content\u3011numpy.fft.ifftshift#fft.ifftshift(x,axes=None)[source]#The inverse offftshift. Although identical for even-lengthx, the\nfunctions differ by one sample for odd-lengthx.Parameters:xarray_likeInput array.axesint or shape tuple, optionalAxes over which to calculate.  Defaults to None, which shifts all axes.Returns:yndarrayThe shifted array.See alsofftshiftShift zero-frequency component to the center of the spectrum.Examples>>>freqs=np.fft.fftfreq(9,d=1./9).reshape(3,3)>>>freqsarray([[ 0.,  1.,  2.],[ 3.,  4., -4.],[-3., -2., -1.]])>>>np.fft.ifftshift(np.fft.fftshift(freqs))array([[ 0.,  1.,  2.],[ 3.,  4., -4.],[-3., -2., -1.]])", "doc_id": "7bfe714b-33df-4dac-973d-d57488adb652", "embedding": null, "doc_hash": "b1c165c40778f9b569a57ab945d0071afae824c2a3ef5633a78bec81ad7de6d4", "extra_info": null, "node_info": {"start": 0, "end": 702, "_node_type": "1"}, "relationships": {"1": "d5d4ee8a-3003-4875-973e-7faa249750f8"}}, "__type__": "1"}, "518e8508-9425-478f-b22d-6551001cd474": {"__data__": {"text": "\u3010Name\u3011Numpy\u3010Chapter\u3011Array and fft\u3010Section\u3011numpy.empty\u3010Content\u3011numpy.empty#numpy.empty(shape,dtype=float,order='C',*,like=None)#Return a new array of given shape and type, without initializing entries.Parameters:shapeint or tuple of intShape of the empty array, e.g.,(2,3)or2.dtypedata-type, optionalDesired output data-type for the array, e.g,numpy.int8. Default isnumpy.float64.order{\u2018C\u2019, \u2018F\u2019}, optional, default: \u2018C\u2019Whether to store multi-dimensional data in row-major\n(C-style) or column-major (Fortran-style) order in\nmemory.likearray_like, optionalReference object to allow the creation of arrays which are not\nNumPy arrays. If an array-like passed in aslikesupports\nthe__array_function__protocol, the result will be defined\nby it. In this case, it ensures the creation of an array object\ncompatible with that passed in via this argument.New in version 1.20.0.Returns:outndarrayArray of uninitialized (arbitrary) data of the given shape, dtype, and\norder.  Object arrays will be initialized to None.See alsoempty_likeReturn an empty array with shape and type of input.onesReturn a new array setting values to one.zerosReturn a new array setting values to zero.fullReturn a new array of given shape filled with value.Notesempty, unlikezeros, does not set the array values to zero,\nand may therefore be marginally faster.  On the other hand, it requires\nthe user to manually set all the values in the array, and should be\nused with caution.Examples>>>np.empty([2,2])array([[ -9.74499359e+001,   6.69583040e-309],[  2.13182611e-314,   3.06959433e-309]])         #uninitialized>>>np.empty([2,2],dtype=int)array([[-1073741821, -1067949133],[  496041986,    19249760]])                     #uninitialized", "doc_id": "518e8508-9425-478f-b22d-6551001cd474", "embedding": null, "doc_hash": "7442585702b71934aa7628c3af3c9b6779899ea7fd0380f0796c66098bc3021c", "extra_info": null, "node_info": {"start": 0, "end": 1703, "_node_type": "1"}, "relationships": {"1": "437af0ee-b752-459a-8890-6e5158efcdd4"}}, "__type__": "1"}, "192ba8c5-0c66-47d0-8802-dfcad97a8a7b": {"__data__": {"text": "\u3010Name\u3011Numpy\u3010Chapter\u3011Array and fft\u3010Section\u3011numpy.empty_like\u3010Content\u3011numpy.empty_like#numpy.empty_like(prototype,dtype=None,order='K',subok=True,shape=None)#Return a new array with the same shape and type as a given array.Parameters:prototypearray_likeThe shape and data-type ofprototypedefine these same attributes\nof the returned array.dtypedata-type, optionalOverrides the data type of the result.New in version 1.6.0.order{\u2018C\u2019, \u2018F\u2019, \u2018A\u2019, or \u2018K\u2019}, optionalOverrides the memory layout of the result. \u2018C\u2019 means C-order,\n\u2018F\u2019 means F-order, \u2018A\u2019 means \u2018F\u2019 ifprototypeis Fortran\ncontiguous, \u2018C\u2019 otherwise. \u2018K\u2019 means match the layout ofprototypeas closely as possible.New in version 1.6.0.subokbool, optional.If True, then the newly created array will use the sub-class\ntype ofprototype, otherwise it will be a base-class array. Defaults\nto True.shapeint or sequence of ints, optional.Overrides the shape of the result. If order=\u2019K\u2019 and the number of\ndimensions is unchanged, will try to keep order, otherwise,\norder=\u2019C\u2019 is implied.New in version 1.17.0.Returns:outndarrayArray of uninitialized (arbitrary) data with the same\nshape and type asprototype.See alsoones_likeReturn an array of ones with shape and type of input.zeros_likeReturn an array of zeros with shape and type of input.full_likeReturn a new array with shape of input filled with value.emptyReturn a new uninitialized array.NotesThis function doesnotinitialize the returned array; to do that usezeros_likeorones_likeinstead.  It may be marginally faster than\nthe functions that do set the array values.Examples>>>a=([1,2,3],[4,5,6])# a is array-like>>>np.empty_like(a)array([[-1073741821, -1073741821,           3],    # uninitialized[          0,           0, -1073741821]])>>>a=np.array([[1.,2.,3.],[4.,5.,6.]])>>>np.empty_like(a)array([[ -2.00000715e+000,   1.48219694e-323,  -2.00000572e+000], # uninitialized[  4.38791518e-305,  -2.00000715e+000,   4.17269252e-309]])", "doc_id": "192ba8c5-0c66-47d0-8802-dfcad97a8a7b", "embedding": null, "doc_hash": "93bc070ad8a264e0982dcb9f62f897edbbec6e72a94d7056351520bd673df3b4", "extra_info": null, "node_info": {"start": 0, "end": 1933, "_node_type": "1"}, "relationships": {"1": "b0f690bb-79eb-4243-8f83-a51f8254490b"}}, "__type__": "1"}, "205d50a8-7b34-445b-9d05-444f51a72fc6": {"__data__": {"text": "\u3010Name\u3011Numpy\u3010Chapter\u3011Array and fft\u3010Section\u3011numpy.eye\u3010Content\u3011numpy.eye#numpy.eye(N,M=None,k=0,dtype=<class'float'>,order='C',*,like=None)[source]#Return a 2-D array with ones on the diagonal and zeros elsewhere.Parameters:NintNumber of rows in the output.Mint, optionalNumber of columns in the output. If None, defaults toN.kint, optionalIndex of the diagonal: 0 (the default) refers to the main diagonal,\na positive value refers to an upper diagonal, and a negative value\nto a lower diagonal.dtypedata-type, optionalData-type of the returned array.order{\u2018C\u2019, \u2018F\u2019}, optionalWhether the output should be stored in row-major (C-style) or\ncolumn-major (Fortran-style) order in memory.New in version 1.14.0.likearray_like, optionalReference object to allow the creation of arrays which are not\nNumPy arrays. If an array-like passed in aslikesupports\nthe__array_function__protocol, the result will be defined\nby it. In this case, it ensures the creation of an array object\ncompatible with that passed in via this argument.New in version 1.20.0.Returns:Indarray of shape (N,M)An array where all elements are equal to zero, except for thek-th\ndiagonal, whose values are equal to one.See alsoidentity(almost) equivalent functiondiagdiagonal 2-D array from a 1-D array specified by the user.Examples>>>np.eye(2,dtype=int)array([[1, 0],[0, 1]])>>>np.eye(3,k=1)array([[0.,  1.,  0.],[0.,  0.,  1.],[0.,  0.,  0.]])", "doc_id": "205d50a8-7b34-445b-9d05-444f51a72fc6", "embedding": null, "doc_hash": "aa309c9bb4f7d23286358e35c17fb99eb2025095ac49a3a339c7a2b02c70562a", "extra_info": null, "node_info": {"start": 0, "end": 1402, "_node_type": "1"}, "relationships": {"1": "23d237ef-99ee-4991-8d7c-44c054530c9c"}}, "__type__": "1"}, "cff4b4f5-d501-4996-ad67-9c2cfa92e4ec": {"__data__": {"text": "\u3010Name\u3011Numpy\u3010Chapter\u3011Array and fft\u3010Section\u3011numpy.identity\u3010Content\u3011numpy.identity#numpy.identity(n,dtype=None,*,like=None)[source]#Return the identity array.The identity array is a square array with ones on\nthe main diagonal.Parameters:nintNumber of rows (and columns) innxnoutput.dtypedata-type, optionalData-type of the output.  Defaults tofloat.likearray_like, optionalReference object to allow the creation of arrays which are not\nNumPy arrays. If an array-like passed in aslikesupports\nthe__array_function__protocol, the result will be defined\nby it. In this case, it ensures the creation of an array object\ncompatible with that passed in via this argument.New in version 1.20.0.Returns:outndarraynxnarray with its main diagonal set to one,\nand all other elements 0.Examples>>>np.identity(3)array([[1.,  0.,  0.],[0.,  1.,  0.],[0.,  0.,  1.]])", "doc_id": "cff4b4f5-d501-4996-ad67-9c2cfa92e4ec", "embedding": null, "doc_hash": "0c69cbebf95c465d7975176020b4a00eef624554ddfe15bb2b69b29384b23dfe", "extra_info": null, "node_info": {"start": 0, "end": 847, "_node_type": "1"}, "relationships": {"1": "06dbbc93-7b08-4bee-8643-0c3b645197aa"}}, "__type__": "1"}, "ed06c202-3951-417b-8cdb-0445f8de99ef": {"__data__": {"text": "\u3010Name\u3011Numpy\u3010Chapter\u3011Array and fft\u3010Section\u3011numpy.ones\u3010Content\u3011numpy.ones#numpy.ones(shape,dtype=None,order='C',*,like=None)[source]#Return a new array of given shape and type, filled with ones.Parameters:shapeint or sequence of intsShape of the new array, e.g.,(2,3)or2.dtypedata-type, optionalThe desired data-type for the array, e.g.,numpy.int8.  Default isnumpy.float64.order{\u2018C\u2019, \u2018F\u2019}, optional, default: CWhether to store multi-dimensional data in row-major\n(C-style) or column-major (Fortran-style) order in\nmemory.likearray_like, optionalReference object to allow the creation of arrays which are not\nNumPy arrays. If an array-like passed in aslikesupports\nthe__array_function__protocol, the result will be defined\nby it. In this case, it ensures the creation of an array object\ncompatible with that passed in via this argument.New in version 1.20.0.Returns:outndarrayArray of ones with the given shape, dtype, and order.See alsoones_likeReturn an array of ones with shape and type of input.emptyReturn a new uninitialized array.zerosReturn a new array setting values to zero.fullReturn a new array of given shape filled with value.Examples>>>np.ones(5)array([1., 1., 1., 1., 1.])>>>np.ones((5,),dtype=int)array([1, 1, 1, 1, 1])>>>np.ones((2,1))array([[1.],[1.]])>>>s=(2,2)>>>np.ones(s)array([[1.,  1.],[1.,  1.]])", "doc_id": "ed06c202-3951-417b-8cdb-0445f8de99ef", "embedding": null, "doc_hash": "3071db45fb9cdd456b35bb9bc896e063b089958731896a6a054f85da735c2bcb", "extra_info": null, "node_info": {"start": 0, "end": 1320, "_node_type": "1"}, "relationships": {"1": "855544ea-8bee-4fdf-8dbf-d2342be8dba8"}}, "__type__": "1"}, "66b59aac-4407-4e4b-8e4c-12aaa3bedacc": {"__data__": {"text": "\u3010Name\u3011Numpy\u3010Chapter\u3011Array and fft\u3010Section\u3011numpy.ones_like\u3010Content\u3011numpy.ones_like#numpy.ones_like(a,dtype=None,order='K',subok=True,shape=None)[source]#Return an array of ones with the same shape and type as a given array.Parameters:aarray_likeThe shape and data-type ofadefine these same attributes of\nthe returned array.dtypedata-type, optionalOverrides the data type of the result.New in version 1.6.0.order{\u2018C\u2019, \u2018F\u2019, \u2018A\u2019, or \u2018K\u2019}, optionalOverrides the memory layout of the result. \u2018C\u2019 means C-order,\n\u2018F\u2019 means F-order, \u2018A\u2019 means \u2018F\u2019 ifais Fortran contiguous,\n\u2018C\u2019 otherwise. \u2018K\u2019 means match the layout ofaas closely\nas possible.New in version 1.6.0.subokbool, optional.If True, then the newly created array will use the sub-class\ntype ofa, otherwise it will be a base-class array. Defaults\nto True.shapeint or sequence of ints, optional.Overrides the shape of the result. If order=\u2019K\u2019 and the number of\ndimensions is unchanged, will try to keep order, otherwise,\norder=\u2019C\u2019 is implied.New in version 1.17.0.Returns:outndarrayArray of ones with the same shape and type asa.See alsoempty_likeReturn an empty array with shape and type of input.zeros_likeReturn an array of zeros with shape and type of input.full_likeReturn a new array with shape of input filled with value.onesReturn a new array setting values to one.Examples>>>x=np.arange(6)>>>x=x.reshape((2,3))>>>xarray([[0, 1, 2],[3, 4, 5]])>>>np.ones_like(x)array([[1, 1, 1],[1, 1, 1]])>>>y=np.arange(3,dtype=float)>>>yarray([0., 1., 2.])>>>np.ones_like(y)array([1.,  1.,  1.])", "doc_id": "66b59aac-4407-4e4b-8e4c-12aaa3bedacc", "embedding": null, "doc_hash": "12a38b53b817f98adfa608a4ed4eb687b65521a6637c4562150ed5642c4f7dd1", "extra_info": null, "node_info": {"start": 0, "end": 1534, "_node_type": "1"}, "relationships": {"1": "4618d1df-51d4-4bd5-9ef1-3b4c0eb8e2e6"}}, "__type__": "1"}, "154d685e-efb7-4e96-acd3-9cb796723e2e": {"__data__": {"text": "\u3010Name\u3011Numpy\u3010Chapter\u3011Array and fft\u3010Section\u3011numpy.zeros\u3010Content\u3011numpy.zeros#numpy.zeros(shape,dtype=float,order='C',*,like=None)#Return a new array of given shape and type, filled with zeros.Parameters:shapeint or tuple of intsShape of the new array, e.g.,(2,3)or2.dtypedata-type, optionalThe desired data-type for the array, e.g.,numpy.int8.  Default isnumpy.float64.order{\u2018C\u2019, \u2018F\u2019}, optional, default: \u2018C\u2019Whether to store multi-dimensional data in row-major\n(C-style) or column-major (Fortran-style) order in\nmemory.likearray_like, optionalReference object to allow the creation of arrays which are not\nNumPy arrays. If an array-like passed in aslikesupports\nthe__array_function__protocol, the result will be defined\nby it. In this case, it ensures the creation of an array object\ncompatible with that passed in via this argument.New in version 1.20.0.Returns:outndarrayArray of zeros with the given shape, dtype, and order.See alsozeros_likeReturn an array of zeros with shape and type of input.emptyReturn a new uninitialized array.onesReturn a new array setting values to one.fullReturn a new array of given shape filled with value.Examples>>>np.zeros(5)array([ 0.,  0.,  0.,  0.,  0.])>>>np.zeros((5,),dtype=int)array([0, 0, 0, 0, 0])>>>np.zeros((2,1))array([[ 0.],[ 0.]])>>>s=(2,2)>>>np.zeros(s)array([[ 0.,  0.],[ 0.,  0.]])>>>np.zeros((2,),dtype=[('x','i4'),('y','i4')])# custom dtypearray([(0, 0), (0, 0)],dtype=[('x', '<i4'), ('y', '<i4')])", "doc_id": "154d685e-efb7-4e96-acd3-9cb796723e2e", "embedding": null, "doc_hash": "ad098a209c166a9e86abe7d65eafd10443f4c83569704d70a1f367b6935436b2", "extra_info": null, "node_info": {"start": 0, "end": 1449, "_node_type": "1"}, "relationships": {"1": "181d0856-ebe2-4587-a7a5-37d7797c1d85"}}, "__type__": "1"}, "c83f388b-74fe-4841-9465-e872cc074f5b": {"__data__": {"text": "\u3010Name\u3011Numpy\u3010Chapter\u3011Array and fft\u3010Section\u3011numpy.zeros_like\u3010Content\u3011numpy.zeros_like#numpy.zeros_like(a,dtype=None,order='K',subok=True,shape=None)[source]#Return an array of zeros with the same shape and type as a given array.Parameters:aarray_likeThe shape and data-type ofadefine these same attributes of\nthe returned array.dtypedata-type, optionalOverrides the data type of the result.New in version 1.6.0.order{\u2018C\u2019, \u2018F\u2019, \u2018A\u2019, or \u2018K\u2019}, optionalOverrides the memory layout of the result. \u2018C\u2019 means C-order,\n\u2018F\u2019 means F-order, \u2018A\u2019 means \u2018F\u2019 ifais Fortran contiguous,\n\u2018C\u2019 otherwise. \u2018K\u2019 means match the layout ofaas closely\nas possible.New in version 1.6.0.subokbool, optional.If True, then the newly created array will use the sub-class\ntype ofa, otherwise it will be a base-class array. Defaults\nto True.shapeint or sequence of ints, optional.Overrides the shape of the result. If order=\u2019K\u2019 and the number of\ndimensions is unchanged, will try to keep order, otherwise,\norder=\u2019C\u2019 is implied.New in version 1.17.0.Returns:outndarrayArray of zeros with the same shape and type asa.See alsoempty_likeReturn an empty array with shape and type of input.ones_likeReturn an array of ones with shape and type of input.full_likeReturn a new array with shape of input filled with value.zerosReturn a new array setting values to zero.Examples>>>x=np.arange(6)>>>x=x.reshape((2,3))>>>xarray([[0, 1, 2],[3, 4, 5]])>>>np.zeros_like(x)array([[0, 0, 0],[0, 0, 0]])>>>y=np.arange(3,dtype=float)>>>yarray([0., 1., 2.])>>>np.zeros_like(y)array([0.,  0.,  0.])", "doc_id": "c83f388b-74fe-4841-9465-e872cc074f5b", "embedding": null, "doc_hash": "b0d3e21361ec7a521031458cfca9c91fbdc2ddc765979716f99331c8b2a00284", "extra_info": null, "node_info": {"start": 0, "end": 1541, "_node_type": "1"}, "relationships": {"1": "bae14aab-8d18-45e0-89d9-e33eec15a872"}}, "__type__": "1"}, "f88f2f6e-f96d-48b6-838f-f2b6de46ac4b": {"__data__": {"text": "\u3010Name\u3011Numpy\u3010Chapter\u3011Array and fft\u3010Section\u3011numpy.full\u3010Content\u3011numpy.full#numpy.full(shape,fill_value,dtype=None,order='C',*,like=None)[source]#Return a new array of given shape and type, filled withfill_value.Parameters:shapeint or sequence of intsShape of the new array, e.g.,(2,3)or2.fill_valuescalar or array_likeFill value.dtypedata-type, optionalThe desired data-type for the array  The default, None, meansnp.array(fill_value).dtype.order{\u2018C\u2019, \u2018F\u2019}, optionalWhether to store multidimensional data in C- or Fortran-contiguous\n(row- or column-wise) order in memory.likearray_like, optionalReference object to allow the creation of arrays which are not\nNumPy arrays. If an array-like passed in aslikesupports\nthe__array_function__protocol, the result will be defined\nby it. In this case, it ensures the creation of an array object\ncompatible with that passed in via this argument.New in version 1.20.0.Returns:outndarrayArray offill_valuewith the given shape, dtype, and order.See alsofull_likeReturn a new array with shape of input filled with value.emptyReturn a new uninitialized array.onesReturn a new array setting values to one.zerosReturn a new array setting values to zero.Examples>>>np.full((2,2),np.inf)array([[inf, inf],[inf, inf]])>>>np.full((2,2),10)array([[10, 10],[10, 10]])>>>np.full((2,2),[1,2])array([[1, 2],[1, 2]])", "doc_id": "f88f2f6e-f96d-48b6-838f-f2b6de46ac4b", "embedding": null, "doc_hash": "16a541934622ba1b0793341d0c2fdc676547dfe10201b80db6fb35fdd0d1e86d", "extra_info": null, "node_info": {"start": 0, "end": 1336, "_node_type": "1"}, "relationships": {"1": "a25bef9a-21ce-4e8c-acd8-c4076e77c3b3"}}, "__type__": "1"}, "4c2c252d-8f80-45d4-8f5c-1e18498ca0ac": {"__data__": {"text": "\u3010Name\u3011Numpy\u3010Chapter\u3011Array and fft\u3010Section\u3011numpy.full_like\u3010Content\u3011numpy.full_like#numpy.full_like(a,fill_value,dtype=None,order='K',subok=True,shape=None)[source]#Return a full array with the same shape and type as a given array.Parameters:aarray_likeThe shape and data-type ofadefine these same attributes of\nthe returned array.fill_valuearray_likeFill value.dtypedata-type, optionalOverrides the data type of the result.order{\u2018C\u2019, \u2018F\u2019, \u2018A\u2019, or \u2018K\u2019}, optionalOverrides the memory layout of the result. \u2018C\u2019 means C-order,\n\u2018F\u2019 means F-order, \u2018A\u2019 means \u2018F\u2019 ifais Fortran contiguous,\n\u2018C\u2019 otherwise. \u2018K\u2019 means match the layout ofaas closely\nas possible.subokbool, optional.If True, then the newly created array will use the sub-class\ntype ofa, otherwise it will be a base-class array. Defaults\nto True.shapeint or sequence of ints, optional.Overrides the shape of the result. If order=\u2019K\u2019 and the number of\ndimensions is unchanged, will try to keep order, otherwise,\norder=\u2019C\u2019 is implied.New in version 1.17.0.Returns:outndarrayArray offill_valuewith the same shape and type asa.See alsoempty_likeReturn an empty array with shape and type of input.ones_likeReturn an array of ones with shape and type of input.zeros_likeReturn an array of zeros with shape and type of input.fullReturn a new array of given shape filled with value.Examples>>>x=np.arange(6,dtype=int)>>>np.full_like(x,1)array([1, 1, 1, 1, 1, 1])>>>np.full_like(x,0.1)array([0, 0, 0, 0, 0, 0])>>>np.full_like(x,0.1,dtype=np.double)array([0.1, 0.1, 0.1, 0.1, 0.1, 0.1])>>>np.full_like(x,np.nan,dtype=np.double)array([nan, nan, nan, nan, nan, nan])>>>y=np.arange(6,dtype=np.double)>>>np.full_like(y,0.1)array([0.1, 0.1, 0.1, 0.1, 0.1, 0.1])>>>y=np.zeros([2,2,3],dtype=int)>>>np.full_like(y,[0,0,255])array([[[  0,   0, 255],[  0,   0, 255]],[[  0,   0, 255],[  0,   0, 255]]])", "doc_id": "4c2c252d-8f80-45d4-8f5c-1e18498ca0ac", "embedding": null, "doc_hash": "a4786eec0ebddf40ba580dba3146dc868adf4956f5593213ca0bda162099f1f0", "extra_info": null, "node_info": {"start": 0, "end": 1834, "_node_type": "1"}, "relationships": {"1": "a4a689df-ea8e-4645-a979-292f19ffb784"}}, "__type__": "1"}, "20adf04d-ce78-4618-a4c4-0c2ef2aa2b80": {"__data__": {"text": "\u3010Name\u3011Numpy\u3010Chapter\u3011Array and fft\u3010Section\u3011numpy.array\u3010Content\u3011numpy.array#numpy.array(object,dtype=None,*,copy=True,order='K',subok=False,ndmin=0,like=None)#Create an array.Parameters:objectarray_likeAn array, any object exposing the array interface, an object whose__array__method returns an array, or any (nested) sequence.\nIf object is a scalar, a 0-dimensional array containing object is\nreturned.dtypedata-type, optionalThe desired data-type for the array. If not given, NumPy will try to use\na defaultdtypethat can represent the values (by applying promotion\nrules when necessary.)copybool, optionalIf true (default), then the object is copied.  Otherwise, a copy will\nonly be made if__array__returns a copy, if obj is a nested\nsequence, or if a copy is needed to satisfy any of the other\nrequirements (dtype,order, etc.).order{\u2018K\u2019, \u2018A\u2019, \u2018C\u2019, \u2018F\u2019}, optionalSpecify the memory layout of the array. If object is not an array, the\nnewly created array will be in C order (row major) unless \u2018F\u2019 is\nspecified, in which case it will be in Fortran order (column major).\nIf object is an array the following holds.orderno copycopy=True\u2018K\u2019unchangedF & C order preserved, otherwise most similar order\u2018A\u2019unchangedF order if input is F and not C, otherwise C order\u2018C\u2019C orderC order\u2018F\u2019F orderF orderWhencopy=Falseand a copy is made for other reasons, the result is\nthe same as ifcopy=True, with some exceptions for \u2018A\u2019, see the\nNotes section. The default order is \u2018K\u2019.subokbool, optionalIf True, then sub-classes will be passed-through, otherwise\nthe returned array will be forced to be a base-class array (default).ndminint, optionalSpecifies the minimum number of dimensions that the resulting\narray should have.  Ones will be prepended to the shape as\nneeded to meet this requirement.likearray_like, optionalReference object to allow the creation of arrays which are not\nNumPy arrays. If an array-like passed in aslikesupports\nthe__array_function__protocol, the result will be defined\nby it. In this case, it ensures the creation of an array object\ncompatible with that passed in via this argument.New in version 1.20.0.Returns:outndarrayAn array object satisfying the specified requirements.See alsoempty_likeReturn an empty array with shape and type of input.ones_likeReturn an array of ones with shape and type of input.zeros_likeReturn an array of zeros with shape and type of input.full_likeReturn a new array with shape of input filled with value.emptyReturn a new uninitialized array.onesReturn a new array setting values to one.zerosReturn a new array setting values to zero.fullReturn a new array of given shape filled with value.NotesWhen order is \u2018A\u2019 andobjectis an array in neither \u2018C\u2019 nor \u2018F\u2019 order,\nand a copy is forced by a change in dtype, then the order of the result is\nnot necessarily \u2018C\u2019 as expected. This is likely a bug.Examples>>>np.array([1,2,3])array([1, 2, 3])Upcasting:>>>np.array([1,2,3.0])array([ 1.,  2.,  3.])More than one dimension:>>>np.array([[1,2],[3,4]])array([[1, 2],[3, 4]])Minimum dimensions 2:>>>np.array([1,2,3],ndmin=2)array([[1, 2, 3]])Type provided:>>>np.array([1,2,3],dtype=complex)array([ 1.+0.j,  2.+0.j,  3.+0.j])Data-type consisting of more than one element:>>>x=np.array([(1,2),(3,4)],dtype=[('a','<i4'),('b','<i4')])>>>x['a']array([1,", "doc_id": "20adf04d-ce78-4618-a4c4-0c2ef2aa2b80", "embedding": null, "doc_hash": "fb616b74921697349267508ef6e11d0cc2a98c25d2130f319ce30d2a18572321", "extra_info": null, "node_info": {"start": 0, "end": 3279, "_node_type": "1"}, "relationships": {"1": "2e0580dc-5985-4e68-b7e1-a855bd7cf1a6", "3": "c1e25029-40dc-4e65-9822-b075c8e3e4da"}}, "__type__": "1"}, "c1e25029-40dc-4e65-9822-b075c8e3e4da": {"__data__": {"text": "2, 3])Upcasting:>>>np.array([1,2,3.0])array([ 1.,  2.,  3.])More than one dimension:>>>np.array([[1,2],[3,4]])array([[1, 2],[3, 4]])Minimum dimensions 2:>>>np.array([1,2,3],ndmin=2)array([[1, 2, 3]])Type provided:>>>np.array([1,2,3],dtype=complex)array([ 1.+0.j,  2.+0.j,  3.+0.j])Data-type consisting of more than one element:>>>x=np.array([(1,2),(3,4)],dtype=[('a','<i4'),('b','<i4')])>>>x['a']array([1, 3])Creating an array from sub-classes:>>>np.array(np.mat('1 2; 3 4'))array([[1, 2],[3, 4]])>>>np.array(np.mat('1 2; 3 4'),subok=True)matrix([[1, 2],[3, 4]])", "doc_id": "c1e25029-40dc-4e65-9822-b075c8e3e4da", "embedding": null, "doc_hash": "6f9253c3cdd4a03a65e7ba2591a2720bd17aab4959b2a69ea181479ea600ed9f", "extra_info": null, "node_info": {"start": 2874, "end": 3436, "_node_type": "1"}, "relationships": {"1": "2e0580dc-5985-4e68-b7e1-a855bd7cf1a6", "2": "20adf04d-ce78-4618-a4c4-0c2ef2aa2b80"}}, "__type__": "1"}, "6075c815-38c1-425e-a8f1-45c5b7dad322": {"__data__": {"text": "\u3010Name\u3011Numpy\u3010Chapter\u3011Array and fft\u3010Section\u3011numpy.asarray\u3010Content\u3011numpy.asarray#numpy.asarray(a,dtype=None,order=None,*,like=None)#Convert the input to an array.Parameters:aarray_likeInput data, in any form that can be converted to an array.  This\nincludes lists, lists of tuples, tuples, tuples of tuples, tuples\nof lists and ndarrays.dtypedata-type, optionalBy default, the data-type is inferred from the input data.order{\u2018C\u2019, \u2018F\u2019, \u2018A\u2019, \u2018K\u2019}, optionalMemory layout.  \u2018A\u2019 and \u2018K\u2019 depend on the order of input array a.\n\u2018C\u2019 row-major (C-style),\n\u2018F\u2019 column-major (Fortran-style) memory representation.\n\u2018A\u2019 (any) means \u2018F\u2019 ifais Fortran contiguous, \u2018C\u2019 otherwise\n\u2018K\u2019 (keep) preserve input order\nDefaults to \u2018K\u2019.likearray_like, optionalReference object to allow the creation of arrays which are not\nNumPy arrays. If an array-like passed in aslikesupports\nthe__array_function__protocol, the result will be defined\nby it. In this case, it ensures the creation of an array object\ncompatible with that passed in via this argument.New in version 1.20.0.Returns:outndarrayArray interpretation ofa.  No copy is performed if the input\nis already an ndarray with matching dtype and order.  Ifais a\nsubclass of ndarray, a base class ndarray is returned.See alsoasanyarraySimilar function which passes through subclasses.ascontiguousarrayConvert input to a contiguous array.asfarrayConvert input to a floating point ndarray.asfortranarrayConvert input to an ndarray with column-major memory order.asarray_chkfiniteSimilar function which checks input for NaNs and Infs.fromiterCreate an array from an iterator.fromfunctionConstruct an array by executing a function on grid positions.ExamplesConvert a list into an array:>>>a=[1,2]>>>np.asarray(a)array([1, 2])Existing arrays are not copied:>>>a=np.array([1,2])>>>np.asarray(a)isaTrueIfdtypeis set, array is copied only if dtype does not match:>>>a=np.array([1,2],dtype=np.float32)>>>np.asarray(a,dtype=np.float32)isaTrue>>>np.asarray(a,dtype=np.float64)isaFalseContrary toasanyarray, ndarray subclasses are not passed through:>>>issubclass(np.recarray,np.ndarray)True>>>a=np.array([(1.0,2),(3.0,4)],dtype='f4,i4').view(np.recarray)>>>np.asarray(a)isaFalse>>>np.asanyarray(a)isaTrue", "doc_id": "6075c815-38c1-425e-a8f1-45c5b7dad322", "embedding": null, "doc_hash": "20abed8e0297da8571c4b0f7d0aa4f1c1b22faaf0d112bcd44a86510ce0387d5", "extra_info": null, "node_info": {"start": 0, "end": 2213, "_node_type": "1"}, "relationships": {"1": "4e4ccd09-f71d-4ac6-b449-b8edd7991c17"}}, "__type__": "1"}, "df36ad9a-a1e0-4ace-b5ab-ad40b52d4d2c": {"__data__": {"text": "\u3010Name\u3011Numpy\u3010Chapter\u3011Array and fft\u3010Section\u3011numpy.asanyarray\u3010Content\u3011numpy.asanyarray#numpy.asanyarray(a,dtype=None,order=None,*,like=None)#Convert the input to an ndarray, but pass ndarray subclasses through.Parameters:aarray_likeInput data, in any form that can be converted to an array.  This\nincludes scalars, lists, lists of tuples, tuples, tuples of tuples,\ntuples of lists, and ndarrays.dtypedata-type, optionalBy default, the data-type is inferred from the input data.order{\u2018C\u2019, \u2018F\u2019, \u2018A\u2019, \u2018K\u2019}, optionalMemory layout.  \u2018A\u2019 and \u2018K\u2019 depend on the order of input array a.\n\u2018C\u2019 row-major (C-style),\n\u2018F\u2019 column-major (Fortran-style) memory representation.\n\u2018A\u2019 (any) means \u2018F\u2019 ifais Fortran contiguous, \u2018C\u2019 otherwise\n\u2018K\u2019 (keep) preserve input order\nDefaults to \u2018C\u2019.likearray_like, optionalReference object to allow the creation of arrays which are not\nNumPy arrays. If an array-like passed in aslikesupports\nthe__array_function__protocol, the result will be defined\nby it. In this case, it ensures the creation of an array object\ncompatible with that passed in via this argument.New in version 1.20.0.Returns:outndarray or an ndarray subclassArray interpretation ofa.  Ifais an ndarray or a subclass\nof ndarray, it is returned as-is and no copy is performed.See alsoasarraySimilar function which always returns ndarrays.ascontiguousarrayConvert input to a contiguous array.asfarrayConvert input to a floating point ndarray.asfortranarrayConvert input to an ndarray with column-major memory order.asarray_chkfiniteSimilar function which checks input for NaNs and Infs.fromiterCreate an array from an iterator.fromfunctionConstruct an array by executing a function on grid positions.ExamplesConvert a list into an array:>>>a=[1,2]>>>np.asanyarray(a)array([1, 2])Instances ofndarraysubclasses are passed through as-is:>>>a=np.array([(1.0,2),(3.0,4)],dtype='f4,i4').view(np.recarray)>>>np.asanyarray(a)isaTrue", "doc_id": "df36ad9a-a1e0-4ace-b5ab-ad40b52d4d2c", "embedding": null, "doc_hash": "babcc681b65aea03803b9f641db32f9afd721508f07f39b21cfd36cb94e5f781", "extra_info": null, "node_info": {"start": 0, "end": 1904, "_node_type": "1"}, "relationships": {"1": "9f3db1d2-b0ac-4736-b789-811cf2e87026"}}, "__type__": "1"}, "40a0e7b6-004b-4496-9a04-217861b8db91": {"__data__": {"text": "\u3010Name\u3011Numpy\u3010Chapter\u3011Array and fft\u3010Section\u3011numpy.ascontiguousarray\u3010Content\u3011numpy.ascontiguousarray#numpy.ascontiguousarray(a,dtype=None,*,like=None)#Return a contiguous array (ndim >= 1) in memory (C order).Parameters:aarray_likeInput array.dtypestr or dtype object, optionalData-type of returned array.likearray_like, optionalReference object to allow the creation of arrays which are not\nNumPy arrays. If an array-like passed in aslikesupports\nthe__array_function__protocol, the result will be defined\nby it. In this case, it ensures the creation of an array object\ncompatible with that passed in via this argument.New in version 1.20.0.Returns:outndarrayContiguous array of same shape and content asa, with typedtypeif specified.See alsoasfortranarrayConvert input to an ndarray with column-major memory order.requireReturn an ndarray that satisfies requirements.ndarray.flagsInformation about the memory layout of the array.ExamplesStarting with a Fortran-contiguous array:>>>x=np.ones((2,3),order='F')>>>x.flags['F_CONTIGUOUS']TrueCallingascontiguousarraymakes a C-contiguous copy:>>>y=np.ascontiguousarray(x)>>>y.flags['C_CONTIGUOUS']True>>>np.may_share_memory(x,y)FalseNow, starting with a C-contiguous array:>>>x=np.ones((2,3),order='C')>>>x.flags['C_CONTIGUOUS']TrueThen, callingascontiguousarrayreturns the same object:>>>y=np.ascontiguousarray(x)>>>xisyTrueNote: This function returns an array with at least one-dimension (1-d)\nso it will not preserve 0-d arrays.", "doc_id": "40a0e7b6-004b-4496-9a04-217861b8db91", "embedding": null, "doc_hash": "1cf4242114b9b27c450aa8c829cf1e30164df64272f24cb939cbb6cefb28777f", "extra_info": null, "node_info": {"start": 0, "end": 1473, "_node_type": "1"}, "relationships": {"1": "38deafa5-851d-4122-9483-a8f083fd823d"}}, "__type__": "1"}, "18fcd429-7a45-4138-bd60-1e70ee1625d6": {"__data__": {"text": "\u3010Name\u3011Numpy\u3010Chapter\u3011Array and fft\u3010Section\u3011numpy.asmatrix\u3010Content\u3011numpy.asmatrix#numpy.asmatrix(data,dtype=None)[source]#Interpret the input as a matrix.Unlikematrix,asmatrixdoes not make a copy if the input is already\na matrix or an ndarray.  Equivalent tomatrix(data,copy=False).Parameters:dataarray_likeInput data.dtypedata-typeData-type of the output matrix.Returns:matmatrixdatainterpreted as a matrix.Examples>>>x=np.array([[1,2],[3,4]])>>>m=np.asmatrix(x)>>>x[0,0]=5>>>mmatrix([[5, 2],[3, 4]])", "doc_id": "18fcd429-7a45-4138-bd60-1e70ee1625d6", "embedding": null, "doc_hash": "2f398e35aa4eff5766380bd4996556af85f9ad61e37643e30a5475758e89a221", "extra_info": null, "node_info": {"start": 0, "end": 499, "_node_type": "1"}, "relationships": {"1": "f87e5466-1af8-48ba-8de0-280016439107"}}, "__type__": "1"}, "f6f6bf2f-21be-4845-9827-31ad87624c56": {"__data__": {"text": "\u3010Name\u3011Numpy\u3010Chapter\u3011Array and fft\u3010Section\u3011numpy.copy\u3010Content\u3011numpy.copy#numpy.copy(a,order='K',subok=False)[source]#Return an array copy of the given object.Parameters:aarray_likeInput data.order{\u2018C\u2019, \u2018F\u2019, \u2018A\u2019, \u2018K\u2019}, optionalControls the memory layout of the copy. \u2018C\u2019 means C-order,\n\u2018F\u2019 means F-order, \u2018A\u2019 means \u2018F\u2019 ifais Fortran contiguous,\n\u2018C\u2019 otherwise. \u2018K\u2019 means match the layout ofaas closely\nas possible. (Note that this function andndarray.copyare very\nsimilar, but have different default values for their order=\narguments.)subokbool, optionalIf True, then sub-classes will be passed-through, otherwise the\nreturned array will be forced to be a base-class array (defaults to False).New in version 1.19.0.Returns:arrndarrayArray interpretation ofa.See alsondarray.copyPreferred method for creating an array copyNotesThis is equivalent to:>>>np.array(a,copy=True)ExamplesCreate an array x, with a reference y and a copy z:>>>x=np.array([1,2,3])>>>y=x>>>z=np.copy(x)Note that, when we modify x, y changes, but not z:>>>x[0]=10>>>x[0]==y[0]True>>>x[0]==z[0]FalseNote that, np.copy clears previously set WRITEABLE=False flag.>>>a=np.array([1,2,3])>>>a.flags[\"WRITEABLE\"]=False>>>b=np.copy(a)>>>b.flags[\"WRITEABLE\"]True>>>b[0]=3>>>barray([3, 2, 3])Note that np.copy is a shallow copy and will not copy object\nelements within arrays. This is mainly important for arrays\ncontaining Python objects. The new array will contain the\nsame object which may lead to surprises if that object can\nbe modified (is mutable):>>>a=np.array([1,'m',[2,3,4]],dtype=object)>>>b=np.copy(a)>>>b[2][0]=10>>>aarray([1, 'm', list([10, 3, 4])], dtype=object)To ensure all elements within anobjectarray are copied,\nusecopy.deepcopy:>>>importcopy>>>a=np.array([1,'m',[2,3,4]],dtype=object)>>>c=copy.deepcopy(a)>>>c[2][0]=10>>>carray([1, 'm', list([10, 3, 4])], dtype=object)>>>aarray([1, 'm', list([2, 3, 4])], dtype=object)", "doc_id": "f6f6bf2f-21be-4845-9827-31ad87624c56", "embedding": null, "doc_hash": "4b9932a4c81b0188a054e8400c4614518f2c02a2e0d974ead8effe51651f66cb", "extra_info": null, "node_info": {"start": 0, "end": 1899, "_node_type": "1"}, "relationships": {"1": "784e0b24-8250-4bbc-896a-ee14934c6e9e"}}, "__type__": "1"}, "a2e73441-a37d-4910-a26e-0eea4e728955": {"__data__": {"text": "\u3010Name\u3011Numpy\u3010Chapter\u3011Array and fft\u3010Section\u3011numpy.frombuffer\u3010Content\u3011numpy.frombuffer#numpy.frombuffer(buffer,dtype=float,count=-1,offset=0,*,like=None)#Interpret a buffer as a 1-dimensional array.Parameters:bufferbuffer_likeAn object that exposes the buffer interface.dtypedata-type, optionalData-type of the returned array; default: float.countint, optionalNumber of items to read.-1means all data in the buffer.offsetint, optionalStart reading the buffer from this offset (in bytes); default: 0.likearray_like, optionalReference object to allow the creation of arrays which are not\nNumPy arrays. If an array-like passed in aslikesupports\nthe__array_function__protocol, the result will be defined\nby it. In this case, it ensures the creation of an array object\ncompatible with that passed in via this argument.New in version 1.20.0.Returns:outndarraySee alsondarray.tobytesInverse of this operation, construct Python bytes from the raw data bytes in the array.NotesIf the buffer has data that is not in machine byte-order, this should\nbe specified as part of the data-type, e.g.:>>>dt=np.dtype(int)>>>dt=dt.newbyteorder('>')>>>np.frombuffer(buf,dtype=dt)The data of the resulting array will not be byteswapped, but will be\ninterpreted correctly.This function creates a view into the original object.  This should be safe\nin general, but it may make sense to copy the result when the original\nobject is mutable or untrusted.Examples>>>s=b'hello world'>>>np.frombuffer(s,dtype='S1',count=5,offset=6)array([b'w', b'o', b'r', b'l', b'd'], dtype='|S1')>>>np.frombuffer(b'\\x01\\x02',dtype=np.uint8)array([1, 2], dtype=uint8)>>>np.frombuffer(b'\\x01\\x02\\x03\\x04\\x05',dtype=np.uint8,count=3)array([1, 2, 3], dtype=uint8)", "doc_id": "a2e73441-a37d-4910-a26e-0eea4e728955", "embedding": null, "doc_hash": "5f961b394f079d3400571813cc5c8dbc21bc2e580b8686b855228f4499440adc", "extra_info": null, "node_info": {"start": 0, "end": 1710, "_node_type": "1"}, "relationships": {"1": "47be2403-e970-4b63-bdff-68e3b34217ee"}}, "__type__": "1"}, "c1766dcd-8e1c-4730-94d9-aeeec4761f60": {"__data__": {"text": "\u3010Name\u3011Numpy\u3010Chapter\u3011Array and fft\u3010Section\u3011numpy.from_dlpack\u3010Content\u3011numpy.from_dlpack#numpy.from_dlpack(x,/)#Create a NumPy array from an object implementing the__dlpack__protocol. Generally, the returned NumPy array is a read-only view\nof the input object. See[1]and[2]for more details.Parameters:xobjectA Python object that implements the__dlpack__and__dlpack_device__methods.Returns:outndarrayReferences[1]Array API documentation,https://data-apis.org/array-api/latest/design_topics/data_interchange.html#syntax-for-data-interchange-with-dlpack[2]Python specification for DLPack,https://dmlc.github.io/dlpack/latest/python_spec.htmlExamples>>>importtorch>>>x=torch.arange(10)>>># create a view of the torch tensor \"x\" in NumPy>>>y=np.from_dlpack(x)", "doc_id": "c1766dcd-8e1c-4730-94d9-aeeec4761f60", "embedding": null, "doc_hash": "b00b97aa76f50ca6b88d9b881837f490b9db748fc6a61aafed9d0feee4113f22", "extra_info": null, "node_info": {"start": 0, "end": 751, "_node_type": "1"}, "relationships": {"1": "c985c05d-d4a6-42e2-b0d6-d660d7021fe6"}}, "__type__": "1"}, "fbb8fbd2-4b04-4314-97bf-05d7e2259301": {"__data__": {"text": "\u3010Name\u3011Numpy\u3010Chapter\u3011Array and fft\u3010Section\u3011numpy.fromfile\u3010Content\u3011numpy.fromfile#numpy.fromfile(file,dtype=float,count=-1,sep='',offset=0,*,like=None)#Construct an array from data in a text or binary file.A highly efficient way of reading binary data with a known data-type,\nas well as parsing simply formatted text files.  Data written using thetofilemethod can be read using this function.Parameters:filefile or str or PathOpen file object or filename.Changed in version 1.17.0:pathlib.Pathobjects are now accepted.dtypedata-typeData type of the returned array.\nFor binary files, it is used to determine the size and byte-order\nof the items in the file.\nMost builtin numeric types are supported and extension types may be supported.New in version 1.18.0:Complex dtypes.countintNumber of items to read.-1means all items (i.e., the complete\nfile).sepstrSeparator between items if file is a text file.\nEmpty (\u201c\u201d) separator means the file should be treated as binary.\nSpaces (\u201d \u201c) in the separator match zero or more whitespace characters.\nA separator consisting only of spaces must match at least one\nwhitespace.offsetintThe offset (in bytes) from the file\u2019s current position. Defaults to 0.\nOnly permitted for binary files.New in version 1.17.0.likearray_like, optionalReference object to allow the creation of arrays which are not\nNumPy arrays. If an array-like passed in aslikesupports\nthe__array_function__protocol, the result will be defined\nby it. In this case, it ensures the creation of an array object\ncompatible with that passed in via this argument.New in version 1.20.0.See alsoload,savendarray.tofileloadtxtMore flexible way of loading data from a text file.NotesDo not rely on the combination oftofileandfromfilefor\ndata storage, as the binary files generated are not platform\nindependent.  In particular, no byte-order or data-type information is\nsaved.  Data can be stored in the platform independent.npyformat\nusingsaveandloadinstead.ExamplesConstruct an ndarray:>>>dt=np.dtype([('time',[('min',np.int64),('sec',np.int64)]),...('temp',float)])>>>x=np.zeros((1,),dtype=dt)>>>x['time']['min']=10;x['temp']=98.25>>>xarray([((10, 0), 98.25)],dtype=[('time', [('min', '<i8'), ('sec', '<i8')]), ('temp', '<f8')])Save the raw data to disk:>>>importtempfile>>>fname=tempfile.mkstemp()[1]>>>x.tofile(fname)Read the raw data from disk:>>>np.fromfile(fname,dtype=dt)array([((10, 0), 98.25)],dtype=[('time', [('min', '<i8'), ('sec', '<i8')]), ('temp', '<f8')])The recommended way to store and load data:>>>np.save(fname,x)>>>np.load(fname+'.npy')array([((10, 0), 98.25)],dtype=[('time', [('min', '<i8'), ('sec', '<i8')]), ('temp', '<f8')])", "doc_id": "fbb8fbd2-4b04-4314-97bf-05d7e2259301", "embedding": null, "doc_hash": "e4d467130ed704031619aa433bcaffc5aa35a9aa0d0c3578d0f4bbe25520d1a5", "extra_info": null, "node_info": {"start": 0, "end": 2642, "_node_type": "1"}, "relationships": {"1": "67a02caf-e95f-4867-8334-0e99f0c7fdea"}}, "__type__": "1"}, "73e180b7-3529-4398-addb-54bebbc0c3ef": {"__data__": {"text": "\u3010Name\u3011Numpy\u3010Chapter\u3011Array and fft\u3010Section\u3011numpy.fromfunction\u3010Content\u3011numpy.fromfunction#numpy.fromfunction(function,shape,*,dtype=<class'float'>,like=None,**kwargs)[source]#Construct an array by executing a function over each coordinate.The resulting array therefore has a valuefn(x,y,z)at\ncoordinate(x,y,z).Parameters:functioncallableThe function is called with N parameters, where N is the rank ofshape.  Each parameter represents the coordinates of the array\nvarying along a specific axis.  For example, ifshapewere(2,2), then the parameters would bearray([[0,0],[1,1]])andarray([[0,1],[0,1]])shape(N,) tuple of intsShape of the output array, which also determines the shape of\nthe coordinate arrays passed tofunction.dtypedata-type, optionalData-type of the coordinate arrays passed tofunction.\nBy default,dtypeis float.likearray_like, optionalReference object to allow the creation of arrays which are not\nNumPy arrays. If an array-like passed in aslikesupports\nthe__array_function__protocol, the result will be defined\nby it. In this case, it ensures the creation of an array object\ncompatible with that passed in via this argument.New in version 1.20.0.Returns:fromfunctionanyThe result of the call tofunctionis passed back directly.\nTherefore the shape offromfunctionis completely determined byfunction.  Iffunctionreturns a scalar value, the shape offromfunctionwould not match theshapeparameter.See alsoindices,meshgridNotesKeywords other thandtypeandlikeare passed tofunction.Examples>>>np.fromfunction(lambdai,j:i,(2,2),dtype=float)array([[0., 0.],[1., 1.]])>>>np.fromfunction(lambdai,j:j,(2,2),dtype=float)array([[0., 1.],[0., 1.]])>>>np.fromfunction(lambdai,j:i==j,(3,3),dtype=int)array([[ True, False, False],[False,  True, False],[False, False,  True]])>>>np.fromfunction(lambdai,j:i+j,(3,3),dtype=int)array([[0, 1, 2],[1, 2, 3],[2, 3, 4]])", "doc_id": "73e180b7-3529-4398-addb-54bebbc0c3ef", "embedding": null, "doc_hash": "ac4098a40604d0caedc6bf272d6a40f7f4bc0bec9034e796fdfc394c0dffc7a1", "extra_info": null, "node_info": {"start": 0, "end": 1856, "_node_type": "1"}, "relationships": {"1": "9e77e281-115e-4e81-bfda-6be05f1d4615"}}, "__type__": "1"}, "2f3f74ad-fa52-4255-b635-7453f6a48b2f": {"__data__": {"text": "\u3010Name\u3011Numpy\u3010Chapter\u3011Array and fft\u3010Section\u3011numpy.fromiter\u3010Content\u3011numpy.fromiter#numpy.fromiter(iter,dtype,count=-1,*,like=None)#Create a new 1-dimensional array from an iterable object.Parameters:iteriterable objectAn iterable object providing data for the array.dtypedata-typeThe data-type of the returned array.Changed in version 1.23:Object and subarray dtypes are now supported (note that the final\nresult is not 1-D for a subarray dtype).countint, optionalThe number of items to read fromiterable.  The default is -1,\nwhich means all data is read.likearray_like, optionalReference object to allow the creation of arrays which are not\nNumPy arrays. If an array-like passed in aslikesupports\nthe__array_function__protocol, the result will be defined\nby it. In this case, it ensures the creation of an array object\ncompatible with that passed in via this argument.New in version 1.20.0.Returns:outndarrayThe output array.NotesSpecifycountto improve performance.  It allowsfromiterto\npre-allocate the output array, instead of resizing it on demand.Examples>>>iterable=(x*xforxinrange(5))>>>np.fromiter(iterable,float)array([  0.,   1.,   4.,   9.,  16.])A carefully constructed subarray dtype will lead to higher dimensional\nresults:>>>iterable=((x+1,x+2)forxinrange(5))>>>np.fromiter(iterable,dtype=np.dtype((int,2)))array([[1, 2],[2, 3],[3, 4],[4, 5],[5, 6]])", "doc_id": "2f3f74ad-fa52-4255-b635-7453f6a48b2f", "embedding": null, "doc_hash": "84586c7ed5823c3b7be2ef76645b5f42cc12f07d80b7863ed351a420854672b2", "extra_info": null, "node_info": {"start": 0, "end": 1362, "_node_type": "1"}, "relationships": {"1": "8479f2b6-1938-4ba8-a93d-eb91b3cdf0fc"}}, "__type__": "1"}, "52cddf3c-4090-430a-95ef-8898965cb61e": {"__data__": {"text": "\u3010Name\u3011Numpy\u3010Chapter\u3011Array and fft\u3010Section\u3011numpy.fromstring\u3010Content\u3011numpy.fromstring#numpy.fromstring(string,dtype=float,count=-1,*,sep,like=None)#A new 1-D array initialized from text data in a string.Parameters:stringstrA string containing the data.dtypedata-type, optionalThe data type of the array; default: float.  For binary input data,\nthe data must be in exactly this format. Most builtin numeric types are\nsupported and extension types may be supported.New in version 1.18.0:Complex dtypes.countint, optionalRead this number ofdtypeelements from the data.  If this is\nnegative (the default), the count will be determined from the\nlength of the data.sepstr, optionalThe string separating numbers in the data; extra whitespace between\nelements is also ignored.Deprecated since version 1.14:Passingsep='', the default, is deprecated since it will\ntrigger the deprecated binary mode of this function. This mode\ninterpretsstringas binary bytes, rather than ASCII text with\ndecimal numbers, an operation which is better speltfrombuffer(string,dtype,count). Ifstringcontains unicode\ntext, the binary mode offromstringwill first encode it into\nbytes using utf-8, which will not produce sane results.likearray_like, optionalReference object to allow the creation of arrays which are not\nNumPy arrays. If an array-like passed in aslikesupports\nthe__array_function__protocol, the result will be defined\nby it. In this case, it ensures the creation of an array object\ncompatible with that passed in via this argument.New in version 1.20.0.Returns:arrndarrayThe constructed array.Raises:ValueErrorIf the string is not the correct size to satisfy the requesteddtypeandcount.See alsofrombuffer,fromfile,fromiterExamples>>>np.fromstring('1 2',dtype=int,sep=' ')array([1, 2])>>>np.fromstring('1, 2',dtype=int,sep=',')array([1, 2])", "doc_id": "52cddf3c-4090-430a-95ef-8898965cb61e", "embedding": null, "doc_hash": "e157a1a10d09f8969a7d91597b5a953305b28b069bc1ddb513391bfc6c07c475", "extra_info": null, "node_info": {"start": 0, "end": 1821, "_node_type": "1"}, "relationships": {"1": "53dfa191-ee3e-4606-937f-7946a1874c58"}}, "__type__": "1"}, "4a9c838f-60dd-43d6-a7c0-e80735c3d212": {"__data__": {"text": "\u3010Name\u3011Numpy\u3010Chapter\u3011Array and fft\u3010Section\u3011numpy.loadtxt\u3010Content\u3011The numpy.loadtxt function allows you to load data from a text file into an ndarray. Here is a summary of the parameters:- fname: File or filename or list of files to read. The file can be a path or a generator. If the file is compressed, it will be decompressed first.- dtype: Data type of the resulting array. The default is float.- comments: Characters used to indicate the start of a comment. The default is '#' character.- delimiter: Character used to separate values. The default is whitespace.- converters: Functions to customize value parsing. Can be a dictionary or a callable.- skiprows: Number of lines to skip at the beginning, including comments. The default is 0.- usecols: Columns to read, with 0 being the first. Can be an integer, a sequence, or None to read all columns.- unpack: If True, the returned array is transposed. The default is False.- ndmin: Minimum number of dimensions for the resulting array. The default is 0.- encoding: Encoding used to decode the input file. The default value is 'bytes', which returns byte arrays. Set to None to receive unicode arrays.- max_rows: Maximum number of rows to read after skiprows. The default is to read all rows.- quotechar: Character used to denote the start and end of a quoted item. The default is None, which disables quoting support.- like: Reference object to allow creation of non-NumPy arrays.The function returns an ndarray containing the data read from the text file.Some additional information:- The function is designed to be a fast reader for simply formatted files.- The input text file must have the same number of values in each row.- You can specify the columns to read using the usecols parameter, which can be a single integer or a sequence of integers.- The converters parameter allows you to specify functions to preprocess the text prior to parsing.- Quoted fields can be handled using the quotechar parameter.- You can load a subset of columns when the rows do not contain an equal number of values.- The genfromtxt function provides more sophisticated handling of files with missing values.- The read_mat function can be used to read MATLAB data files.", "doc_id": "4a9c838f-60dd-43d6-a7c0-e80735c3d212", "embedding": null, "doc_hash": "394408ffd53c68e20eba9c2872f99ebf80feb9822a8de18b6a5e8c87a770e8d0", "extra_info": null, "node_info": {"start": 0, "end": 2208, "_node_type": "1"}, "relationships": {"1": "e8f5ea98-4287-4afe-bdc8-ca4bcf2324d5"}}, "__type__": "1"}, "9dd6a957-924c-409c-bfa9-5f31d8a6ef83": {"__data__": {"text": "\u3010Name\u3011Numpy\u3010Chapter\u3011Array and fft\u3010Section\u3011numpy.core.records.array\u3010Content\u3011numpy.core.records.array#core.records.array(obj,dtype=None,shape=None,offset=0,strides=None,formats=None,names=None,titles=None,aligned=False,byteorder=None,copy=True)[source]#Construct a record array from a wide-variety of objects.A general-purpose record array constructor that dispatches to the\nappropriaterecarraycreation function based on the inputs (see Notes).Parameters:objanyInput object. See Notes for details on how various input types are\ntreated.dtypedata-type, optionalValid dtype for array.shapeint or tuple of ints, optionalShape of each array.offsetint, optionalPosition in the file or buffer to start reading from.stridestuple of ints, optionalBuffer (buf) is interpreted according to these strides (strides\ndefine how many bytes each array element, row, column, etc.\noccupy in memory).formats, names, titles, aligned, byteorderIfdtypeisNone, these arguments are passed tonumpy.format_parserto construct a dtype. See that function for\ndetailed documentation.copybool, optionalWhether to copy the input object (True), or to use a reference instead.\nThis option only applies when the input is an ndarray or recarray.\nDefaults to True.Returns:np.recarrayRecord array created from the specified object.NotesIfobjisNone, then call therecarrayconstructor. Ifobjis a string, then call thefromstringconstructor. Ifobjis a\nlist or a tuple, then if the first object is anndarray, callfromarrays, otherwise callfromrecords. Ifobjis arecarray, then make a copy of the data in the recarray\n(ifcopy=True) and use the new formats, names, and titles. Ifobjis a file, then callfromfile. Finally, if obj is anndarray, then\nreturnobj.view(recarray), making a copy of the data ifcopy=True.Examples>>>a=np.array([[1,2,3],[4,5,6],[7,8,9]])array([[1, 2, 3],[4, 5, 6],[7, 8, 9]])>>>np.core.records.array(a)rec.array([[1, 2, 3],[4, 5, 6],[7, 8, 9]],dtype=int32)>>>b=[(1,1),(2,4),(3,9)]>>>c=np.core.records.array(b,formats=['i2','f2'],names=('x','y'))>>>crec.array([(1, 1.0), (2, 4.0), (3, 9.0)],dtype=[('x', '<i2'), ('y', '<f2')])>>>c.xrec.array([1, 2, 3], dtype=int16)>>>c.yrec.array([ 1.0,  4.0,  9.0], dtype=float16)>>>r=np.rec.array(['abc','def'],names=['col1','col2'])>>>print(r.col1)abc>>>r.col1array('abc', dtype='<U3')>>>r.col2array('def', dtype='<U3')", "doc_id": "9dd6a957-924c-409c-bfa9-5f31d8a6ef83", "embedding": null, "doc_hash": "2435b4a5c0112bc375d0ba084c88dfd64ed388243d3def22c4b6b21bf0acb3b1", "extra_info": null, "node_info": {"start": 0, "end": 2328, "_node_type": "1"}, "relationships": {"1": "2402daad-b0f9-468c-80b8-7dcd7b9adc50"}}, "__type__": "1"}, "ddb171a0-56b6-4b57-9e45-0b0d9c79f602": {"__data__": {"text": "\u3010Name\u3011Numpy\u3010Chapter\u3011Array and fft\u3010Section\u3011numpy.core.records.fromarrays\u3010Content\u3011numpy.core.records.fromarrays#core.records.fromarrays(arrayList,dtype=None,shape=None,formats=None,names=None,titles=None,aligned=False,byteorder=None)[source]#Create a record array from a (flat) list of arraysParameters:arrayListlist or tupleList of array-like objects (such as lists, tuples,\nand ndarrays).dtypedata-type, optionalvalid dtype for all arraysshapeint or tuple of ints, optionalShape of the resulting array. If not provided, inferred fromarrayList[0].formats, names, titles, aligned, byteorderIfdtypeisNone, these arguments are passed tonumpy.format_parserto construct a dtype. See that function for\ndetailed documentation.Returns:np.recarrayRecord array consisting of given arrayList columns.Examples>>>x1=np.array([1,2,3,4])>>>x2=np.array(['a','dd','xyz','12'])>>>x3=np.array([1.1,2,3,4])>>>r=np.core.records.fromarrays([x1,x2,x3],names='a,b,c')>>>print(r[1])(2, 'dd', 2.0) # may vary>>>x1[1]=34>>>r.aarray([1, 2, 3, 4])>>>x1=np.array([1,2,3,4])>>>x2=np.array(['a','dd','xyz','12'])>>>x3=np.array([1.1,2,3,4])>>>r=np.core.records.fromarrays(...[x1,x2,x3],...dtype=np.dtype([('a',np.int32),('b','S3'),('c',np.float32)]))>>>rrec.array([(1, b'a', 1.1), (2, b'dd', 2. ), (3, b'xyz', 3. ),(4, b'12', 4. )],dtype=[('a', '<i4'), ('b', 'S3'), ('c', '<f4')])", "doc_id": "ddb171a0-56b6-4b57-9e45-0b0d9c79f602", "embedding": null, "doc_hash": "5065725082da0f0ea3d8dd1782a69a7a476b8d3f6f8ca4d03259d4d4ac05b9ff", "extra_info": null, "node_info": {"start": 0, "end": 1346, "_node_type": "1"}, "relationships": {"1": "ba59edfe-9cc7-4b3d-86b6-7ef73f4a8d1c"}}, "__type__": "1"}, "dfe66497-97d0-4f6d-89d8-d80961108f11": {"__data__": {"text": "\u3010Name\u3011Numpy\u3010Chapter\u3011Array and fft\u3010Section\u3011numpy.core.records.fromrecords\u3010Content\u3011numpy.core.records.fromrecords#core.records.fromrecords(recList,dtype=None,shape=None,formats=None,names=None,titles=None,aligned=False,byteorder=None)[source]#Create a recarray from a list of records in text form.Parameters:recListsequencedata in the same field may be heterogeneous - they will be promoted\nto the highest data type.dtypedata-type, optionalvalid dtype for all arraysshapeint or tuple of ints, optionalshape of each array.formats, names, titles, aligned, byteorderIfdtypeisNone, these arguments are passed tonumpy.format_parserto construct a dtype. See that function for\ndetailed documentation.If bothformatsanddtypeare None, then this will auto-detect\nformats. Use list of tuples rather than list of lists for faster\nprocessing.Returns:np.recarrayrecord array consisting of given recList rows.Examples>>>r=np.core.records.fromrecords([(456,'dbe',1.2),(2,'de',1.3)],...names='col1,col2,col3')>>>print(r[0])(456, 'dbe', 1.2)>>>r.col1array([456,   2])>>>r.col2array(['dbe', 'de'], dtype='<U3')>>>importpickle>>>pickle.loads(pickle.dumps(r))rec.array([(456, 'dbe', 1.2), (  2, 'de', 1.3)],dtype=[('col1', '<i8'), ('col2', '<U3'), ('col3', '<f8')])", "doc_id": "dfe66497-97d0-4f6d-89d8-d80961108f11", "embedding": null, "doc_hash": "5c690cd6fad29e4bf73d09d4133300ae4b6b00e203b596e7f2cc82e666f725c0", "extra_info": null, "node_info": {"start": 0, "end": 1241, "_node_type": "1"}, "relationships": {"1": "9cfc03fe-bf8d-4359-abf6-7c39ac3f8ac2"}}, "__type__": "1"}, "6638938e-1e60-4871-80b6-e61dba125c0f": {"__data__": {"text": "\u3010Name\u3011Numpy\u3010Chapter\u3011Array and fft\u3010Section\u3011numpy.core.records.fromstring\u3010Content\u3011numpy.core.records.fromstring#core.records.fromstring(datastring,dtype=None,shape=None,offset=0,formats=None,names=None,titles=None,aligned=False,byteorder=None)[source]#Create a record array from binary dataNote that despite the name of this function it does not acceptstrinstances.Parameters:datastringbytes-likeBuffer of binary datadtypedata-type, optionalValid dtype for all arraysshapeint or tuple of ints, optionalShape of each array.offsetint, optionalPosition in the buffer to start reading from.formats, names, titles, aligned, byteorderIfdtypeisNone, these arguments are passed tonumpy.format_parserto construct a dtype. See that function for\ndetailed documentation.Returns:np.recarrayRecord array view into the data in datastring. This will be readonly\nifdatastringis readonly.See alsonumpy.frombufferExamples>>>a=b'\\x01\\x02\\x03abc'>>>np.core.records.fromstring(a,dtype='u1,u1,u1,S3')rec.array([(1, 2, 3, b'abc')],dtype=[('f0', 'u1'), ('f1', 'u1'), ('f2', 'u1'), ('f3', 'S3')])>>>grades_dtype=[('Name',(np.str_,10)),('Marks',np.float64),...('GradeLevel',np.int32)]>>>grades_array=np.array([('Sam',33.3,3),('Mike',44.4,5),...('Aadi',66.6,6)],dtype=grades_dtype)>>>np.core.records.fromstring(grades_array.tobytes(),dtype=grades_dtype)rec.array([('Sam', 33.3, 3), ('Mike', 44.4, 5), ('Aadi', 66.6, 6)],dtype=[('Name', '<U10'), ('Marks', '<f8'), ('GradeLevel', '<i4')])>>>s='\\x01\\x02\\x03abc'>>>np.core.records.fromstring(s,dtype='u1,u1,u1,S3')Traceback (most recent call last)...TypeError: a bytes-like object is required, not 'str'", "doc_id": "6638938e-1e60-4871-80b6-e61dba125c0f", "embedding": null, "doc_hash": "b2845ea9afcfd8a656ac0c3963701518fd31eb14bbc794ca1cd810b5a60a57a0", "extra_info": null, "node_info": {"start": 0, "end": 1619, "_node_type": "1"}, "relationships": {"1": "f0fdc397-0961-48f7-b332-e5cdeddc144e"}}, "__type__": "1"}, "9d9ead42-7979-4c50-a792-80ad3a986a4d": {"__data__": {"text": "\u3010Name\u3011Numpy\u3010Chapter\u3011Array and fft\u3010Section\u3011numpy.core.records.fromfile\u3010Content\u3011numpy.core.records.fromfile#core.records.fromfile(fd,dtype=None,shape=None,offset=0,formats=None,names=None,titles=None,aligned=False,byteorder=None)[source]#Create an array from binary file dataParameters:fdstr or file typeIf file is a string or a path-like object then that file is opened,\nelse it is assumed to be a file object. The file object must\nsupport random access (i.e. it must have tell and seek methods).dtypedata-type, optionalvalid dtype for all arraysshapeint or tuple of ints, optionalshape of each array.offsetint, optionalPosition in the file to start reading from.formats, names, titles, aligned, byteorderIfdtypeisNone, these arguments are passed tonumpy.format_parserto construct a dtype. See that function for\ndetailed documentationReturns:np.recarrayrecord array consisting of data enclosed in file.Examples>>>fromtempfileimportTemporaryFile>>>a=np.empty(10,dtype='f8,i4,a5')>>>a[5]=(0.5,10,'abcde')>>>>>>fd=TemporaryFile()>>>a=a.newbyteorder('<')>>>a.tofile(fd)>>>>>>_=fd.seek(0)>>>r=np.core.records.fromfile(fd,formats='f8,i4,a5',shape=10,...byteorder='<')>>>print(r[5])(0.5, 10, 'abcde')>>>r.shape(10,)", "doc_id": "9d9ead42-7979-4c50-a792-80ad3a986a4d", "embedding": null, "doc_hash": "88126e1d6baa3c7c9a43f20b6256134039f8b09fc9ac8b37f67a78b32696f33e", "extra_info": null, "node_info": {"start": 0, "end": 1207, "_node_type": "1"}, "relationships": {"1": "87633160-8f3e-4eca-8870-f1b7ef3cf7c6"}}, "__type__": "1"}, "62dffc74-91d0-4b5d-9416-ffbbb27b6122": {"__data__": {"text": "\u3010Name\u3011Numpy\u3010Chapter\u3011Array and fft\u3010Section\u3011numpy.core.defchararray.array\u3010Content\u3011numpy.core.defchararray.array#core.defchararray.array(obj,itemsize=None,copy=True,unicode=None,order=None)[source]#Create achararray.NoteThis class is provided for numarray backward-compatibility.\nNew code (not concerned with numarray compatibility) should use\narrays of typebytes_orstr_and use the free functions\ninnumpy.charfor fast\nvectorized string operations instead.Versus a regular NumPy array of typestrorunicode, this\nclass adds the following functionality:values automatically have whitespace removed from the end\nwhen indexedcomparison operators automatically remove whitespace from the\nend when comparing valuesvectorized string operations are provided as methods\n(e.g.str.endswith) and infix operators (e.g.+,*,%)Parameters:objarray of str or unicode-likeitemsizeint, optionalitemsizeis the number of characters per scalar in the\nresulting array.  Ifitemsizeis None, andobjis an\nobject array or a Python list, theitemsizewill be\nautomatically determined.  Ifitemsizeis provided andobjis of type str or unicode, then theobjstring will be\nchunked intoitemsizepieces.copybool, optionalIf true (default), then the object is copied.  Otherwise, a copy\nwill only be made if __array__ returns a copy, if obj is a\nnested sequence, or if a copy is needed to satisfy any of the other\nrequirements (itemsize, unicode,order, etc.).unicodebool, optionalWhen true, the resultingchararraycan contain Unicode\ncharacters, when false only 8-bit characters.  If unicode is\nNone andobjis one of the following:achararray,an ndarray of typestrorunicodea Python str or unicode object,then the unicode setting of the output array will be\nautomatically determined.order{\u2018C\u2019, \u2018F\u2019, \u2018A\u2019}, optionalSpecify the order of the array.  If order is \u2018C\u2019 (default), then the\narray will be in C-contiguous order (last-index varies the\nfastest).  If order is \u2018F\u2019, then the returned array\nwill be in Fortran-contiguous order (first-index varies the\nfastest).  If order is \u2018A\u2019, then the returned array may\nbe in any order (either C-, Fortran-contiguous, or even\ndiscontiguous).", "doc_id": "62dffc74-91d0-4b5d-9416-ffbbb27b6122", "embedding": null, "doc_hash": "d01bcd9678ff788001b32462cb0172a879f5d2e3247b2e4309051e5be1238491", "extra_info": null, "node_info": {"start": 0, "end": 2129, "_node_type": "1"}, "relationships": {"1": "9c6f75fa-e005-42b8-9100-2a1caac682b6"}}, "__type__": "1"}, "478e2f36-e530-4a7d-be5a-152aee5ae43e": {"__data__": {"text": "\u3010Name\u3011Numpy\u3010Chapter\u3011Array and fft\u3010Section\u3011numpy.core.defchararray.asarray\u3010Content\u3011numpy.core.defchararray.asarray#core.defchararray.asarray(obj,itemsize=None,unicode=None,order=None)[source]#Convert the input to achararray, copying the data only if\nnecessary.Versus a regular NumPy array of typestrorunicode, this\nclass adds the following functionality:values automatically have whitespace removed from the end\nwhen indexedcomparison operators automatically remove whitespace from the\nend when comparing valuesvectorized string operations are provided as methods\n(e.g.str.endswith) and infix operators (e.g.+,*,``%``)Parameters:objarray of str or unicode-likeitemsizeint, optionalitemsizeis the number of characters per scalar in the\nresulting array.  Ifitemsizeis None, andobjis an\nobject array or a Python list, theitemsizewill be\nautomatically determined.  Ifitemsizeis provided andobjis of type str or unicode, then theobjstring will be\nchunked intoitemsizepieces.unicodebool, optionalWhen true, the resultingchararraycan contain Unicode\ncharacters, when false only 8-bit characters.  If unicode is\nNone andobjis one of the following:achararray,an ndarray of typestror \u2018unicode`a Python str or unicode object,then the unicode setting of the output array will be\nautomatically determined.order{\u2018C\u2019, \u2018F\u2019}, optionalSpecify the order of the array.  If order is \u2018C\u2019 (default), then the\narray will be in C-contiguous order (last-index varies the\nfastest).  If order is \u2018F\u2019, then the returned array\nwill be in Fortran-contiguous order (first-index varies the\nfastest).", "doc_id": "478e2f36-e530-4a7d-be5a-152aee5ae43e", "embedding": null, "doc_hash": "0289d442c9be54f08beb5a31a8b04bd91d6180b3dcf1eb51db630d27a8ebc075", "extra_info": null, "node_info": {"start": 0, "end": 1565, "_node_type": "1"}, "relationships": {"1": "4b4b7a1a-506c-47c2-aff7-6f14fdd6aa1e"}}, "__type__": "1"}, "c317f5f3-3faf-4443-8c35-5c3fa8d3edf3": {"__data__": {"text": "\u3010Name\u3011Numpy\u3010Chapter\u3011Array and fft\u3010Section\u3011numpy.arange\u3010Content\u3011numpy.arange#numpy.arange([start,]stop,[step,]dtype=None,*,like=None)#Return evenly spaced values within a given interval.arangecan be called with a varying number of positional arguments:arange(stop): Values are generated within the half-open interval[0,stop)(in other words, the interval includingstartbut\nexcludingstop).arange(start,stop): Values are generated within the half-open\ninterval[start,stop).arange(start,stop,step)Values are generated within the half-open\ninterval[start,stop), with spacing between values given bystep.For integer arguments the function is roughly equivalent to the Python\nbuilt-inrange, but returns an ndarray rather than arangeinstance.When using a non-integer step, such as 0.1, it is often better to usenumpy.linspace.See the Warning sections below for more information.Parameters:startinteger or real, optionalStart of interval.  The interval includes this value.  The default\nstart value is 0.stopinteger or realEnd of interval.  The interval does not include this value, except\nin some cases wherestepis not an integer and floating point\nround-off affects the length ofout.stepinteger or real, optionalSpacing between values.  For any outputout, this is the distance\nbetween two adjacent values,out[i+1]-out[i].  The default\nstep size is 1.  Ifstepis specified as a position argument,startmust also be given.dtypedtype, optionalThe type of the output array.  Ifdtypeis not given, infer the data\ntype from the other input arguments.likearray_like, optionalReference object to allow the creation of arrays which are not\nNumPy arrays. If an array-like passed in aslikesupports\nthe__array_function__protocol, the result will be defined\nby it. In this case, it ensures the creation of an array object\ncompatible with that passed in via this argument.New in version 1.20.0.Returns:arangendarrayArray of evenly spaced values.For floating point arguments, the length of the result isceil((stop-start)/step).  Because of floating point overflow,\nthis rule may result in the last element ofoutbeing greater\nthanstop.WarningThe length of the output might not be numerically stable.Another stability issue is due to the internal implementation ofnumpy.arange.\nThe actual step value used to populate the array isdtype(start+step)-dtype(start)and notstep. Precision loss\ncan occur here, due to casting or due to using floating points whenstartis much larger thanstep. This can lead to unexpected\nbehaviour. For example:>>>np.arange(0,5,0.5,dtype=int)array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0])>>>np.arange(-3,3,0.5,dtype=int)array([-3, -2, -1,  0,  1,  2,  3,  4,  5,  6,  7,  8])In such cases, the use ofnumpy.linspaceshould be preferred.The built-inrangegeneratesPython built-in integers\nthat have arbitrary size, whilenumpy.arangeproducesnumpy.int32ornumpy.int64numbers. This may result in\nincorrect results for large integer values:>>>power=40>>>modulo=10000>>>x1=[(n**power)%moduloforninrange(8)]>>>x2=[(n**power)%moduloforninnp.arange(8)]>>>print(x1)[0, 1, 7776, 8801, 6176, 625, 6576, 4001]  # correct>>>print(x2)[0, 1, 7776, 7185, 0, 5969, 4816, 3361]  # incorrectSee alsonumpy.linspaceEvenly spaced numbers with careful handling of endpoints.numpy.ogridArrays of evenly spaced numbers in N-dimensions.numpy.mgridGrid-shaped arrays of evenly spaced numbers in N-dimensions.How to create arrays with", "doc_id": "c317f5f3-3faf-4443-8c35-5c3fa8d3edf3", "embedding": null, "doc_hash": "65eeeff59c5b9b6d481255e13668bb1a0d4227d4f04694570b1ab2add2ff052d", "extra_info": null, "node_info": {"start": 0, "end": 3388, "_node_type": "1"}, "relationships": {"1": "dd436182-60b1-446c-b51d-62ea5332c79f", "3": "933436a3-326f-4e82-b804-46313921e071"}}, "__type__": "1"}, "933436a3-326f-4e82-b804-46313921e071": {"__data__": {"text": "This may result in\nincorrect results for large integer values:>>>power=40>>>modulo=10000>>>x1=[(n**power)%moduloforninrange(8)]>>>x2=[(n**power)%moduloforninnp.arange(8)]>>>print(x1)[0, 1, 7776, 8801, 6176, 625, 6576, 4001]  # correct>>>print(x2)[0, 1, 7776, 7185, 0, 5969, 4816, 3361]  # incorrectSee alsonumpy.linspaceEvenly spaced numbers with careful handling of endpoints.numpy.ogridArrays of evenly spaced numbers in N-dimensions.numpy.mgridGrid-shaped arrays of evenly spaced numbers in N-dimensions.How to create arrays with regularly-spaced valuesExamples>>>np.arange(3)array([0, 1, 2])>>>np.arange(3.0)array([ 0.,  1.,  2.])>>>np.arange(3,7)array([3, 4, 5, 6])>>>np.arange(3,7,2)array([3, 5])", "doc_id": "933436a3-326f-4e82-b804-46313921e071", "embedding": null, "doc_hash": "da3b383ae70122d4ac77ee405bf558f7e6b920125e468111c2b284f0b938cc56", "extra_info": null, "node_info": {"start": 2856, "end": 3558, "_node_type": "1"}, "relationships": {"1": "dd436182-60b1-446c-b51d-62ea5332c79f", "2": "c317f5f3-3faf-4443-8c35-5c3fa8d3edf3"}}, "__type__": "1"}, "ef08a8e4-de3e-471c-8a67-a3577ce3d168": {"__data__": {"text": "\u3010Name\u3011Numpy\u3010Chapter\u3011Array and fft\u3010Section\u3011numpy.linspace\u3010Content\u3011numpy.linspace#numpy.linspace(start,stop,num=50,endpoint=True,retstep=False,dtype=None,axis=0)[source]#Return evenly spaced numbers over a specified interval.Returnsnumevenly spaced samples, calculated over the\ninterval [start,stop].The endpoint of the interval can optionally be excluded.Changed in version 1.16.0:Non-scalarstartandstopare now supported.Changed in version 1.20.0:Values are rounded towards-infinstead of0when an\nintegerdtypeis specified. The old behavior can\nstill be obtained withnp.linspace(start,stop,num).astype(int)Parameters:startarray_likeThe starting value of the sequence.stoparray_likeThe end value of the sequence, unlessendpointis set to False.\nIn that case, the sequence consists of all but the last ofnum+1evenly spaced samples, so thatstopis excluded.  Note that the step\nsize changes whenendpointis False.numint, optionalNumber of samples to generate. Default is 50. Must be non-negative.endpointbool, optionalIf True,stopis the last sample. Otherwise, it is not included.\nDefault is True.retstepbool, optionalIf True, return (samples,step), wherestepis the spacing\nbetween samples.dtypedtype, optionalThe type of the output array.  Ifdtypeis not given, the data type\nis inferred fromstartandstop. The inferred dtype will never be\nan integer;floatis chosen even if the arguments would produce an\narray of integers.New in version 1.9.0.axisint, optionalThe axis in the result to store the samples.  Relevant only if start\nor stop are array-like.  By default (0), the samples will be along a\nnew axis inserted at the beginning. Use -1 to get an axis at the end.New in version 1.16.0.Returns:samplesndarrayThere arenumequally spaced samples in the closed interval[start,stop]or the half-open interval[start,stop)(depending on whetherendpointis True or False).stepfloat, optionalOnly returned ifretstepis TrueSize of spacing between samples.See alsoarangeSimilar tolinspace, but uses a step size (instead of the number of samples).geomspaceSimilar tolinspace, but with numbers spaced evenly on a log scale (a geometric progression).logspaceSimilar togeomspace, but with the end points specified as logarithms.How to create arrays with regularly-spaced valuesExamples>>>np.linspace(2.0,3.0,num=5)array([2.  , 2.25, 2.5 , 2.75, 3.  ])>>>np.linspace(2.0,3.0,num=5,endpoint=False)array([2. ,  2.2,  2.4,  2.6,  2.8])>>>np.linspace(2.0,3.0,num=5,retstep=True)(array([2.  ,  2.25,  2.5 ,  2.75,  3.  ]), 0.25)Graphical illustration:>>>importmatplotlib.pyplotasplt>>>N=8>>>y=np.zeros(N)>>>x1=np.linspace(0,10,N,endpoint=True)>>>x2=np.linspace(0,10,N,endpoint=False)>>>plt.plot(x1,y,'o')[<matplotlib.lines.Line2D object at 0x...>]>>>plt.plot(x2,y+0.5,'o')[<matplotlib.lines.Line2D object at 0x...>]>>>plt.ylim([-0.5,1])(-0.5, 1)>>>plt.show()", "doc_id": "ef08a8e4-de3e-471c-8a67-a3577ce3d168", "embedding": null, "doc_hash": "fcf36592440be56aa36eee9e98a0dd792ce1abeb7306bd9a7e393ce91e297fd9", "extra_info": null, "node_info": {"start": 0, "end": 2828, "_node_type": "1"}, "relationships": {"1": "c935ed94-2f02-4e4f-8d9d-110839860e09"}}, "__type__": "1"}, "3571f1b4-13ed-45de-affe-5224c8973737": {"__data__": {"text": "\u3010Name\u3011Numpy\u3010Chapter\u3011Array and fft\u3010Section\u3011numpy.logspace\u3010Content\u3011numpy.logspace#numpy.logspace(start,stop,num=50,endpoint=True,base=10.0,dtype=None,axis=0)[source]#Return numbers spaced evenly on a log scale.In linear space, the sequence starts atbase**start(baseto the power ofstart) and ends withbase**stop(seeendpointbelow).Changed in version 1.16.0:Non-scalarstartandstopare now supported.Changed in version 1.25.0:Non-scalar \u2018base` is now supportedParameters:startarray_likebase**startis the starting value of the sequence.stoparray_likebase**stopis the final value of the sequence, unlessendpointis False.  In that case,num+1values are spaced over the\ninterval in log-space, of which all but the last (a sequence of\nlengthnum) are returned.numinteger, optionalNumber of samples to generate.  Default is 50.endpointboolean, optionalIf true,stopis the last sample. Otherwise, it is not included.\nDefault is True.basearray_like, optionalThe base of the log space. The step size between the elements inln(samples)/ln(base)(orlog_base(samples)) is uniform.\nDefault is 10.0.dtypedtypeThe type of the output array.  Ifdtypeis not given, the data type\nis inferred fromstartandstop. The inferred type will never be\nan integer;floatis chosen even if the arguments would produce an\narray of integers.axisint, optionalThe axis in the result to store the samples.  Relevant only if start,\nstop, or base are array-like.  By default (0), the samples will be\nalong a new axis inserted at the beginning. Use -1 to get an axis at\nthe end.New in version 1.16.0.Returns:samplesndarraynumsamples, equally spaced on a log scale.See alsoarangeSimilar to linspace, with the step size specified instead of the number of samples. Note that, when used with a float endpoint, the endpoint may or may not be included.linspaceSimilar to logspace, but with the samples uniformly distributed in linear space, instead of log space.geomspaceSimilar to logspace, but with endpoints specified directly.How to create arrays with regularly-spaced valuesNotesIf base is a scalar, logspace is equivalent to the code>>>y=np.linspace(start,stop,num=num,endpoint=endpoint)...>>>power(base,y).astype(dtype)...Examples>>>np.logspace(2.0,3.0,num=4)array([ 100.        ,  215.443469  ,  464.15888336, 1000.        ])>>>np.logspace(2.0,3.0,num=4,endpoint=False)array([100.        ,  177.827941  ,  316.22776602,  562.34132519])>>>np.logspace(2.0,3.0,num=4,base=2.0)array([4.        ,  5.0396842 ,  6.34960421,  8.        ])>>>np.logspace(2.0,3.0,num=4,base=[2.0,3.0],axis=-1)array([[ 4.        ,  5.0396842 ,  6.34960421,  8.        ],[ 9.        , 12.98024613, 18.72075441, 27.        ]])Graphical illustration:>>>importmatplotlib.pyplotasplt>>>N=10>>>x1=np.logspace(0.1,1,N,endpoint=True)>>>x2=np.logspace(0.1,1,N,endpoint=False)>>>y=np.zeros(N)>>>plt.plot(x1,y,'o')[<matplotlib.lines.Line2D object at", "doc_id": "3571f1b4-13ed-45de-affe-5224c8973737", "embedding": null, "doc_hash": "ea75ac40911107038a56b4e84f11d19b41ccbd58afe36b570171b56095898c46", "extra_info": null, "node_info": {"start": 0, "end": 2861, "_node_type": "1"}, "relationships": {"1": "9b444deb-22ac-4bf8-aa98-9cc4d434f301", "3": "0dc937d0-34e8-450e-bbce-3d4f1b4d65a8"}}, "__type__": "1"}, "0dc937d0-34e8-450e-bbce-3d4f1b4d65a8": {"__data__": {"text": "4.        ,  5.0396842 ,  6.34960421,  8.        ],[ 9.        , 12.98024613, 18.72075441, 27.        ]])Graphical illustration:>>>importmatplotlib.pyplotasplt>>>N=10>>>x1=np.logspace(0.1,1,N,endpoint=True)>>>x2=np.logspace(0.1,1,N,endpoint=False)>>>y=np.zeros(N)>>>plt.plot(x1,y,'o')[<matplotlib.lines.Line2D object at 0x...>]>>>plt.plot(x2,y+0.5,'o')[<matplotlib.lines.Line2D object at 0x...>]>>>plt.ylim([-0.5,1])(-0.5, 1)>>>plt.show()", "doc_id": "0dc937d0-34e8-450e-bbce-3d4f1b4d65a8", "embedding": null, "doc_hash": "6d85d791d1020cc7817917768b3a42797d11fff4cdfad2c69c59dea23b2960d9", "extra_info": null, "node_info": {"start": 2542, "end": 2980, "_node_type": "1"}, "relationships": {"1": "9b444deb-22ac-4bf8-aa98-9cc4d434f301", "2": "3571f1b4-13ed-45de-affe-5224c8973737"}}, "__type__": "1"}, "3d9bc4e8-ab59-46a0-bca4-f11c6029b195": {"__data__": {"text": "\u3010Name\u3011Numpy\u3010Chapter\u3011Array and fft\u3010Section\u3011numpy.geomspace\u3010Content\u3011numpy.geomspace#numpy.geomspace(start,stop,num=50,endpoint=True,dtype=None,axis=0)[source]#Return numbers spaced evenly on a log scale (a geometric progression).This is similar tologspace, but with endpoints specified directly.\nEach output sample is a constant multiple of the previous.Changed in version 1.16.0:Non-scalarstartandstopare now supported.Parameters:startarray_likeThe starting value of the sequence.stoparray_likeThe final value of the sequence, unlessendpointis False.\nIn that case,num+1values are spaced over the\ninterval in log-space, of which all but the last (a sequence of\nlengthnum) are returned.numinteger, optionalNumber of samples to generate.  Default is 50.endpointboolean, optionalIf true,stopis the last sample. Otherwise, it is not included.\nDefault is True.dtypedtypeThe type of the output array.  Ifdtypeis not given, the data type\nis inferred fromstartandstop. The inferred dtype will never be\nan integer;floatis chosen even if the arguments would produce an\narray of integers.axisint, optionalThe axis in the result to store the samples.  Relevant only if start\nor stop are array-like.  By default (0), the samples will be along a\nnew axis inserted at the beginning. Use -1 to get an axis at the end.New in version 1.16.0.Returns:samplesndarraynumsamples, equally spaced on a log scale.See alsologspaceSimilar to geomspace, but with endpoints specified using log and base.linspaceSimilar to geomspace, but with arithmetic instead of geometric progression.arangeSimilar to linspace, with the step size specified instead of the number of samples.How to create arrays with regularly-spaced valuesNotesIf the inputs or dtype are complex, the output will follow a logarithmic\nspiral in the complex plane.  (There are an infinite number of spirals\npassing through two points; the output will follow the shortest such path.)Examples>>>np.geomspace(1,1000,num=4)array([    1.,    10.,   100.,  1000.])>>>np.geomspace(1,1000,num=3,endpoint=False)array([   1.,   10.,  100.])>>>np.geomspace(1,1000,num=4,endpoint=False)array([   1.        ,    5.62341325,   31.6227766 ,  177.827941  ])>>>np.geomspace(1,256,num=9)array([   1.,    2.,    4.,    8.,   16.,   32.,   64.,  128.,  256.])Note that the above may not produce exact integers:>>>np.geomspace(1,256,num=9,dtype=int)array([  1,   2,   4,   7,  16,  32,  63, 127, 256])>>>np.around(np.geomspace(1,256,num=9)).astype(int)array([  1,   2,   4,   8,  16,  32,  64, 128, 256])Negative, decreasing, and complex inputs are allowed:>>>np.geomspace(1000,1,num=4)array([1000.,  100.,   10.,    1.])>>>np.geomspace(-1000,-1,num=4)array([-1000.,  -100.,   -10.,    -1.])>>>np.geomspace(1j,1000j,num=4)# Straight linearray([0.   +1.j, 0.  +10.j, 0. +100.j, 0.+1000.j])>>>np.geomspace(-1+0j,1+0j,num=5)# Circlearray([-1.00000000e+00+1.22464680e-16j,", "doc_id": "3d9bc4e8-ab59-46a0-bca4-f11c6029b195", "embedding": null, "doc_hash": "9b0fceae956eb383f7b03dc2d24808e7c0357a142a2d10418833b2ce9588a095", "extra_info": null, "node_info": {"start": 0, "end": 2881, "_node_type": "1"}, "relationships": {"1": "07a0ad22-1305-42a0-834e-311d9e2b3fc3", "3": "ddd0b075-b4dd-4971-917a-ced6a45bf35b"}}, "__type__": "1"}, "ddd0b075-b4dd-4971-917a-ced6a45bf35b": {"__data__": {"text": " 4,   8,  16,  32,  64, 128, 256])Negative, decreasing, and complex inputs are allowed:>>>np.geomspace(1000,1,num=4)array([1000.,  100.,   10.,    1.])>>>np.geomspace(-1000,-1,num=4)array([-1000.,  -100.,   -10.,    -1.])>>>np.geomspace(1j,1000j,num=4)# Straight linearray([0.   +1.j, 0.  +10.j, 0. +100.j, 0.+1000.j])>>>np.geomspace(-1+0j,1+0j,num=5)# Circlearray([-1.00000000e+00+1.22464680e-16j, -7.07106781e-01+7.07106781e-01j,6.12323400e-17+1.00000000e+00j,  7.07106781e-01+7.07106781e-01j,1.00000000e+00+0.00000000e+00j])Graphical illustration ofendpointparameter:>>>importmatplotlib.pyplotasplt>>>N=10>>>y=np.zeros(N)>>>plt.semilogx(np.geomspace(1,1000,N,endpoint=True),y+1,'o')[<matplotlib.lines.Line2D object at 0x...>]>>>plt.semilogx(np.geomspace(1,1000,N,endpoint=False),y+2,'o')[<matplotlib.lines.Line2D object at 0x...>]>>>plt.axis([0.5,2000,0,3])[0.5, 2000, 0, 3]>>>plt.grid(True,color='0.7',linestyle='-',which='both',axis='both')>>>plt.show()", "doc_id": "ddd0b075-b4dd-4971-917a-ced6a45bf35b", "embedding": null, "doc_hash": "4bed4ddc2c56cb607ebefe3042ac74089f495eff24e523f4f9971ffc0287d20c", "extra_info": null, "node_info": {"start": 2483, "end": 3441, "_node_type": "1"}, "relationships": {"1": "07a0ad22-1305-42a0-834e-311d9e2b3fc3", "2": "3d9bc4e8-ab59-46a0-bca4-f11c6029b195"}}, "__type__": "1"}, "5953ddc4-861e-4dac-9226-c4df7197e17a": {"__data__": {"text": "\u3010Name\u3011Numpy\u3010Chapter\u3011Array and fft\u3010Section\u3011numpy.meshgrid\u3010Content\u3011numpy.meshgrid#numpy.meshgrid(*xi,copy=True,sparse=False,indexing='xy')[source]#Return a list of coordinate matrices from coordinate vectors.Make N-D coordinate arrays for vectorized evaluations of\nN-D scalar/vector fields over N-D grids, given\none-dimensional coordinate arrays x1, x2,\u2026, xn.Changed in version 1.9:1-D and 0-D cases are allowed.Parameters:x1, x2,\u2026, xnarray_like1-D arrays representing the coordinates of a grid.indexing{\u2018xy\u2019, \u2018ij\u2019}, optionalCartesian (\u2018xy\u2019, default) or matrix (\u2018ij\u2019) indexing of output.\nSee Notes for more details.New in version 1.7.0.sparsebool, optionalIf True the shape of the returned coordinate array for dimensioniis reduced from(N1,...,Ni,...Nn)to(1,...,1,Ni,1,...,1).  These sparse coordinate grids are\nintended to be use withBroadcasting.  When all\ncoordinates are used in an expression, broadcasting still leads to a\nfully-dimensonal result array.Default is False.New in version 1.7.0.copybool, optionalIf False, a view into the original arrays are returned in order to\nconserve memory.  Default is True.  Please note thatsparse=False,copy=Falsewill likely return non-contiguous\narrays.  Furthermore, more than one element of a broadcast array\nmay refer to a single memory location.  If you need to write to the\narrays, make copies first.New in version 1.7.0.Returns:X1, X2,\u2026, XNlist of ndarraysFor vectorsx1,x2,\u2026,xnwith lengthsNi=len(xi),\nreturns(N1,N2,N3,...,Nn)shaped arrays if indexing=\u2019ij\u2019\nor(N2,N1,N3,...,Nn)shaped arrays if indexing=\u2019xy\u2019\nwith the elements ofxirepeated to fill the matrix along\nthe first dimension forx1, the second forx2and so on.See alsomgridConstruct a multi-dimensional \u201cmeshgrid\u201d using indexing notation.ogridConstruct an open multi-dimensional \u201cmeshgrid\u201d using indexing notation.how-to-indexNotesThis function supports both indexing conventions through the indexing\nkeyword argument.  Giving the string \u2018ij\u2019 returns a meshgrid with\nmatrix indexing, while \u2018xy\u2019 returns a meshgrid with Cartesian indexing.\nIn the 2-D case with inputs of length M and N, the outputs are of shape\n(N, M) for \u2018xy\u2019 indexing and (M, N) for \u2018ij\u2019 indexing.  In the 3-D case\nwith inputs of length M, N and P, outputs are of shape (N, M, P) for\n\u2018xy\u2019 indexing and (M, N, P) for \u2018ij\u2019 indexing.  The difference is\nillustrated by the following code snippet:xv,yv=np.meshgrid(x,y,indexing='ij')foriinrange(nx):forjinrange(ny):# treat xv[i,j], yv[i,j]xv,yv=np.meshgrid(x,y,indexing='xy')foriinrange(nx):forjinrange(ny):# treat xv[j,i], yv[j,i]In the 1-D and 0-D case, the indexing and sparse keywords have no effect.Examples>>>nx,ny=(3,2)>>>x=np.linspace(0,1,nx)>>>y=np.linspace(0,1,ny)>>>xv,yv=np.meshgrid(x,y)>>>xvarray([[0. , 0.5, 1. ],[0. , 0.5, 1. ]])>>>yvarray([[0.,  0.,  0.],[1.,", "doc_id": "5953ddc4-861e-4dac-9226-c4df7197e17a", "embedding": null, "doc_hash": "65d35b2ac6364be1220f6352b732ab58ec77c2bde132a3dfa107ee1f73ddb29f", "extra_info": null, "node_info": {"start": 0, "end": 2791, "_node_type": "1"}, "relationships": {"1": "2621dbf6-4124-4846-92d9-e0c3b71ba439", "3": "4358345d-1ed1-4f09-9ad4-1467847fbadf"}}, "__type__": "1"}, "4358345d-1ed1-4f09-9ad4-1467847fbadf": {"__data__": {"text": "treat xv[i,j], yv[i,j]xv,yv=np.meshgrid(x,y,indexing='xy')foriinrange(nx):forjinrange(ny):# treat xv[j,i], yv[j,i]In the 1-D and 0-D case, the indexing and sparse keywords have no effect.Examples>>>nx,ny=(3,2)>>>x=np.linspace(0,1,nx)>>>y=np.linspace(0,1,ny)>>>xv,yv=np.meshgrid(x,y)>>>xvarray([[0. , 0.5, 1. ],[0. , 0.5, 1. ]])>>>yvarray([[0.,  0.,  0.],[1.,  1.,  1.]])The result ofmeshgridis a coordinate grid:>>>importmatplotlib.pyplotasplt>>>plt.plot(xv,yv,marker='o',color='k',linestyle='none')>>>plt.show()You can create sparse output arrays to save memory and computation time.>>>xv,yv=np.meshgrid(x,y,sparse=True)>>>xvarray([[0. ,  0.5,  1. ]])>>>yvarray([[0.],[1.]])meshgridis very useful to evaluate functions on a grid. If the\nfunction depends on all coordinates, both dense and sparse outputs can be\nused.>>>x=np.linspace(-5,5,101)>>>y=np.linspace(-5,5,101)>>># full coordinate arrays>>>xx,yy=np.meshgrid(x,y)>>>zz=np.sqrt(xx**2+yy**2)>>>xx.shape,yy.shape,zz.shape((101, 101), (101, 101), (101, 101))>>># sparse coordinate arrays>>>xs,ys=np.meshgrid(x,y,sparse=True)>>>zs=np.sqrt(xs**2+ys**2)>>>xs.shape,ys.shape,zs.shape((1, 101), (101, 1), (101, 101))>>>np.array_equal(zz,zs)True>>>h=plt.contourf(x,y,zs)>>>plt.axis('scaled')>>>plt.colorbar()>>>plt.show()", "doc_id": "4358345d-1ed1-4f09-9ad4-1467847fbadf", "embedding": null, "doc_hash": "caa28bb356fddcbbc000c8af75e5b37389584d2b22a22bf010d29a77df2570af", "extra_info": null, "node_info": {"start": 2433, "end": 3702, "_node_type": "1"}, "relationships": {"1": "2621dbf6-4124-4846-92d9-e0c3b71ba439", "2": "5953ddc4-861e-4dac-9226-c4df7197e17a"}}, "__type__": "1"}, "f29f667b-fcfe-4d7a-9a34-cf7831348da9": {"__data__": {"text": "\u3010Name\u3011Numpy\u3010Chapter\u3011Array and fft\u3010Section\u3011numpy.mgrid\u3010Content\u3011numpy.mgrid#numpy.mgrid=<numpy.lib.index_tricks.MGridClassobject>#An instance which returns a dense multi-dimensional \u201cmeshgrid\u201d.An instance which returns a dense (or fleshed out) mesh-grid\nwhen indexed, so that each returned argument has the same shape.\nThe dimensions and number of the output arrays are equal to the\nnumber of indexing dimensions.  If the step length is not a complex\nnumber, then the stop is not inclusive.However, if the step length is acomplex number(e.g. 5j), then\nthe integer part of its magnitude is interpreted as specifying the\nnumber of points to create between the start and stop values, where\nthe stop valueis inclusive.Returns:mesh-gridndarraysall of the same dimensionsSee alsoogridlikemgridbut returns open (not fleshed out) mesh gridsmeshgridreturn coordinate matrices from coordinate vectorsr_array concatenatorHow to create arrays with regularly-spaced valuesExamples>>>np.mgrid[0:5,0:5]array([[[0, 0, 0, 0, 0],[1, 1, 1, 1, 1],[2, 2, 2, 2, 2],[3, 3, 3, 3, 3],[4, 4, 4, 4, 4]],[[0, 1, 2, 3, 4],[0, 1, 2, 3, 4],[0, 1, 2, 3, 4],[0, 1, 2, 3, 4],[0, 1, 2, 3, 4]]])>>>np.mgrid[-1:1:5j]array([-1. , -0.5,  0. ,  0.5,  1. ])", "doc_id": "f29f667b-fcfe-4d7a-9a34-cf7831348da9", "embedding": null, "doc_hash": "4364e0899ae664e17643477665c0d1a6c8ae3a910491095977cde809f319fdc3", "extra_info": null, "node_info": {"start": 0, "end": 1214, "_node_type": "1"}, "relationships": {"1": "05f3ba7b-cf98-4d53-883a-542db8bac06d"}}, "__type__": "1"}, "0413540e-8d7c-47fe-b3e3-273122e9a4cb": {"__data__": {"text": "\u3010Name\u3011Numpy\u3010Chapter\u3011Array and fft\u3010Section\u3011numpy.ogrid\u3010Content\u3011numpy.ogrid#numpy.ogrid=<numpy.lib.index_tricks.OGridClassobject>#An instance which returns an open multi-dimensional \u201cmeshgrid\u201d.An instance which returns an open (i.e. not fleshed out) mesh-grid\nwhen indexed, so that only one dimension of each returned array is\ngreater than 1.  The dimension and number of the output arrays are\nequal to the number of indexing dimensions.  If the step length is\nnot a complex number, then the stop is not inclusive.However, if the step length is acomplex number(e.g. 5j), then\nthe integer part of its magnitude is interpreted as specifying the\nnumber of points to create between the start and stop values, where\nthe stop valueis inclusive.Returns:mesh-gridndarrayswith only one dimension not equal to 1See alsomgridlikeogridbut returns dense (or fleshed out) mesh gridsmeshgridreturn coordinate matrices from coordinate vectorsr_array concatenatorHow to create arrays with regularly-spaced valuesExamples>>>fromnumpyimportogrid>>>ogrid[-1:1:5j]array([-1. , -0.5,  0. ,  0.5,  1. ])>>>ogrid[0:5,0:5][array([[0],[1],[2],[3],[4]]), array([[0, 1, 2, 3, 4]])]", "doc_id": "0413540e-8d7c-47fe-b3e3-273122e9a4cb", "embedding": null, "doc_hash": "de2fbff11997ff10d16ed84ef8bdb4e0f78c77aeb9499bceff650e952f93fd86", "extra_info": null, "node_info": {"start": 0, "end": 1151, "_node_type": "1"}, "relationships": {"1": "2df45e91-a352-4e85-a10d-b2d666d9684e"}}, "__type__": "1"}, "153ebbd2-32a2-41a6-b82c-55381b1783e6": {"__data__": {"text": "\u3010Name\u3011Numpy\u3010Chapter\u3011Array and fft\u3010Section\u3011numpy.diag\u3010Content\u3011numpy.diag#numpy.diag(v,k=0)[source]#Extract a diagonal or construct a diagonal array.See the more detailed documentation fornumpy.diagonalif you use this\nfunction to extract a diagonal and wish to write to the resulting array;\nwhether it returns a copy or a view depends on what version of numpy you\nare using.Parameters:varray_likeIfvis a 2-D array, return a copy of itsk-th diagonal.\nIfvis a 1-D array, return a 2-D array withvon thek-th\ndiagonal.kint, optionalDiagonal in question. The default is 0. Usek>0for diagonals\nabove the main diagonal, andk<0for diagonals below the main\ndiagonal.Returns:outndarrayThe extracted diagonal or constructed diagonal array.See alsodiagonalReturn specified diagonals.diagflatCreate a 2-D array with the flattened input as a diagonal.traceSum along diagonals.triuUpper triangle of an array.trilLower triangle of an array.Examples>>>x=np.arange(9).reshape((3,3))>>>xarray([[0, 1, 2],[3, 4, 5],[6, 7, 8]])>>>np.diag(x)array([0, 4, 8])>>>np.diag(x,k=1)array([1, 5])>>>np.diag(x,k=-1)array([3, 7])>>>np.diag(np.diag(x))array([[0, 0, 0],[0, 4, 0],[0, 0, 8]])", "doc_id": "153ebbd2-32a2-41a6-b82c-55381b1783e6", "embedding": null, "doc_hash": "e853b29449020f8a2a37fe554a831af5499ea5c472e464e6820ff89791ef40b5", "extra_info": null, "node_info": {"start": 0, "end": 1153, "_node_type": "1"}, "relationships": {"1": "2d36bc3d-9d41-4b13-843b-d44df28db0dd"}}, "__type__": "1"}, "4a23706e-3d19-4212-bd83-61943299cf22": {"__data__": {"text": "\u3010Name\u3011Numpy\u3010Chapter\u3011Array and fft\u3010Section\u3011numpy.diagflat\u3010Content\u3011numpy.diagflat#numpy.diagflat(v,k=0)[source]#Create a two-dimensional array with the flattened input as a diagonal.Parameters:varray_likeInput data, which is flattened and set as thek-th\ndiagonal of the output.kint, optionalDiagonal to set; 0, the default, corresponds to the \u201cmain\u201d diagonal,\na positive (negative)kgiving the number of the diagonal above\n(below) the main.Returns:outndarrayThe 2-D output array.See alsodiagMATLAB work-alike for 1-D and 2-D arrays.diagonalReturn specified diagonals.traceSum along diagonals.Examples>>>np.diagflat([[1,2],[3,4]])array([[1, 0, 0, 0],[0, 2, 0, 0],[0, 0, 3, 0],[0, 0, 0, 4]])>>>np.diagflat([1,2],1)array([[0, 1, 0],[0, 0, 2],[0, 0, 0]])", "doc_id": "4a23706e-3d19-4212-bd83-61943299cf22", "embedding": null, "doc_hash": "39027abb343c5eeabf4cb26642e533e52bbdbe6cfa641c7780a478ad86937e1f", "extra_info": null, "node_info": {"start": 0, "end": 747, "_node_type": "1"}, "relationships": {"1": "bb3627c9-48d9-47e6-985e-ff0bf6c4623d"}}, "__type__": "1"}, "dbbc0d48-4906-4699-985c-fbaadd1e44d2": {"__data__": {"text": "\u3010Name\u3011Numpy\u3010Chapter\u3011Array and fft\u3010Section\u3011numpy.tri\u3010Content\u3011numpy.tri#numpy.tri(N,M=None,k=0,dtype=<class'float'>,*,like=None)[source]#An array with ones at and below the given diagonal and zeros elsewhere.Parameters:NintNumber of rows in the array.Mint, optionalNumber of columns in the array.\nBy default,Mis taken equal toN.kint, optionalThe sub-diagonal at and below which the array is filled.k= 0 is the main diagonal, whilek< 0 is below it,\nandk> 0 is above.  The default is 0.dtypedtype, optionalData type of the returned array.  The default is float.likearray_like, optionalReference object to allow the creation of arrays which are not\nNumPy arrays. If an array-like passed in aslikesupports\nthe__array_function__protocol, the result will be defined\nby it. In this case, it ensures the creation of an array object\ncompatible with that passed in via this argument.New in version 1.20.0.Returns:trindarray of shape (N, M)Array with its lower triangle filled with ones and zero elsewhere;\nin other wordsT[i,j]==1forj<=i+k, 0 otherwise.Examples>>>np.tri(3,5,2,dtype=int)array([[1, 1, 1, 0, 0],[1, 1, 1, 1, 0],[1, 1, 1, 1, 1]])>>>np.tri(3,5,-1)array([[0.,  0.,  0.,  0.,  0.],[1.,  0.,  0.,  0.,  0.],[1.,  1.,  0.,  0.,  0.]])", "doc_id": "dbbc0d48-4906-4699-985c-fbaadd1e44d2", "embedding": null, "doc_hash": "211ced362a074bc8717978ebe32728b00ab3fc9abd7621461afb29f368e362e2", "extra_info": null, "node_info": {"start": 0, "end": 1230, "_node_type": "1"}, "relationships": {"1": "ca98f346-60e1-4dfa-b4ba-dd52e1a43405"}}, "__type__": "1"}, "07da99d4-28f5-4cf2-b1eb-e690d1dd40cb": {"__data__": {"text": "\u3010Name\u3011Numpy\u3010Chapter\u3011Array and fft\u3010Section\u3011numpy.tril\u3010Content\u3011numpy.tril#numpy.tril(m,k=0)[source]#Lower triangle of an array.Return a copy of an array with elements above thek-th diagonal zeroed.\nFor arrays withndimexceeding 2,trilwill apply to the final two\naxes.Parameters:marray_like, shape (\u2026, M, N)Input array.kint, optionalDiagonal above which to zero elements.k = 0(the default) is the\nmain diagonal,k < 0is below it andk > 0is above.Returns:trilndarray, shape (\u2026, M, N)Lower triangle ofm, of same shape and data-type asm.See alsotriusame thing, only for the upper triangleExamples>>>np.tril([[1,2,3],[4,5,6],[7,8,9],[10,11,12]],-1)array([[ 0,  0,  0],[ 4,  0,  0],[ 7,  8,  0],[10, 11, 12]])>>>np.tril(np.arange(3*4*5).reshape(3,4,5))array([[[ 0,  0,  0,  0,  0],[ 5,  6,  0,  0,  0],[10, 11, 12,  0,  0],[15, 16, 17, 18,  0]],[[20,  0,  0,  0,  0],[25, 26,  0,  0,  0],[30, 31, 32,  0,  0],[35, 36, 37, 38,  0]],[[40,  0,  0,  0,  0],[45, 46,  0,  0,  0],[50, 51, 52,  0,  0],[55, 56, 57, 58,  0]]])", "doc_id": "07da99d4-28f5-4cf2-b1eb-e690d1dd40cb", "embedding": null, "doc_hash": "a20f5c532342341bd257bdd2dff6c1b3d706175632abad09421ea75cdd33cdf6", "extra_info": null, "node_info": {"start": 0, "end": 1008, "_node_type": "1"}, "relationships": {"1": "97837abf-db5d-473a-b0c6-9a0bb79d7619"}}, "__type__": "1"}, "d7c4d289-b62a-4f4c-8976-173b0a4a1ab0": {"__data__": {"text": "\u3010Name\u3011Numpy\u3010Chapter\u3011Array and fft\u3010Section\u3011numpy.triu\u3010Content\u3011numpy.triu#numpy.triu(m,k=0)[source]#Upper triangle of an array.Return a copy of an array with the elements below thek-th diagonal\nzeroed. For arrays withndimexceeding 2,triuwill apply to the\nfinal two axes.Please refer to the documentation fortrilfor further details.See alsotrillower triangle of an arrayExamples>>>np.triu([[1,2,3],[4,5,6],[7,8,9],[10,11,12]],-1)array([[ 1,  2,  3],[ 4,  5,  6],[ 0,  8,  9],[ 0,  0, 12]])>>>np.triu(np.arange(3*4*5).reshape(3,4,5))array([[[ 0,  1,  2,  3,  4],[ 0,  6,  7,  8,  9],[ 0,  0, 12, 13, 14],[ 0,  0,  0, 18, 19]],[[20, 21, 22, 23, 24],[ 0, 26, 27, 28, 29],[ 0,  0, 32, 33, 34],[ 0,  0,  0, 38, 39]],[[40, 41, 42, 43, 44],[ 0, 46, 47, 48, 49],[ 0,  0, 52, 53, 54],[ 0,  0,  0, 58, 59]]])", "doc_id": "d7c4d289-b62a-4f4c-8976-173b0a4a1ab0", "embedding": null, "doc_hash": "bfab40f2fa356652f094a26cd2a588ab493ecdba7eb7f585f8b4cb7d1556e78b", "extra_info": null, "node_info": {"start": 0, "end": 795, "_node_type": "1"}, "relationships": {"1": "a5496327-fc3d-48d5-94e7-d5aee9d3af2a"}}, "__type__": "1"}, "b4dc472e-74cd-4889-bcd8-a6874bc46fa6": {"__data__": {"text": "\u3010Name\u3011Numpy\u3010Chapter\u3011Array and fft\u3010Section\u3011numpy.vander\u3010Content\u3011numpy.vander#numpy.vander(x,N=None,increasing=False)[source]#Generate a Vandermonde matrix.The columns of the output matrix are powers of the input vector. The\norder of the powers is determined by theincreasingboolean argument.\nSpecifically, whenincreasingis False, thei-th output column is\nthe input vector raised element-wise to the power ofN-i-1. Such\na matrix with a geometric progression in each row is named for Alexandre-\nTheophile Vandermonde.Parameters:xarray_like1-D input array.Nint, optionalNumber of columns in the output.  IfNis not specified, a square\narray is returned (N=len(x)).increasingbool, optionalOrder of the powers of the columns.  If True, the powers increase\nfrom left to right, if False (the default) they are reversed.New in version 1.9.0.Returns:outndarrayVandermonde matrix.  Ifincreasingis False, the first column isx^(N-1), the secondx^(N-2)and so forth. Ifincreasingis\nTrue, the columns arex^0,x^1,...,x^(N-1).See alsopolynomial.polynomial.polyvanderExamples>>>x=np.array([1,2,3,5])>>>N=3>>>np.vander(x,N)array([[ 1,  1,  1],[ 4,  2,  1],[ 9,  3,  1],[25,  5,  1]])>>>np.column_stack([x**(N-1-i)foriinrange(N)])array([[ 1,  1,  1],[ 4,  2,  1],[ 9,  3,  1],[25,  5,  1]])>>>x=np.array([1,2,3,5])>>>np.vander(x)array([[  1,   1,   1,   1],[  8,   4,   2,   1],[ 27,   9,   3,   1],[125,  25,   5,   1]])>>>np.vander(x,increasing=True)array([[  1,   1,   1,   1],[  1,   2,   4,   8],[  1,   3,   9,  27],[  1,   5,  25, 125]])The determinant of a square Vandermonde matrix is the product\nof the differences between the values of the input vector:>>>np.linalg.det(np.vander(x))48.000000000000043 # may vary>>>(5-3)*(5-2)*(5-1)*(3-2)*(3-1)*(2-1)48", "doc_id": "b4dc472e-74cd-4889-bcd8-a6874bc46fa6", "embedding": null, "doc_hash": "a5d6d0470f5dd084013eee4f91cf2715349bcaee9f0ace47dde0dde427b7bcde", "extra_info": null, "node_info": {"start": 0, "end": 1741, "_node_type": "1"}, "relationships": {"1": "f893a8f5-70a0-435c-b615-61f5c4242837"}}, "__type__": "1"}, "5b04372e-4d06-4e1d-b8f2-3b47442c6763": {"__data__": {"text": "\u3010Name\u3011Numpy\u3010Chapter\u3011Array and fft\u3010Section\u3011numpy.mat\u3010Content\u3011numpy.mat#numpy.mat(data,dtype=None)[source]#Interpret the input as a matrix.Unlikematrix,asmatrixdoes not make a copy if the input is already\na matrix or an ndarray.  Equivalent tomatrix(data,copy=False).Parameters:dataarray_likeInput data.dtypedata-typeData-type of the output matrix.Returns:matmatrixdatainterpreted as a matrix.Examples>>>x=np.array([[1,2],[3,4]])>>>m=np.asmatrix(x)>>>x[0,0]=5>>>mmatrix([[5, 2],[3, 4]])", "doc_id": "5b04372e-4d06-4e1d-b8f2-3b47442c6763", "embedding": null, "doc_hash": "f0fe8e8117d6af9896b7687da143ddecb79e37bc2627dd77d730e831248ce5d8", "extra_info": null, "node_info": {"start": 0, "end": 484, "_node_type": "1"}, "relationships": {"1": "390a0dd7-39b3-40a4-82e6-c078ae811d1a"}}, "__type__": "1"}, "746494d9-65ae-41c5-8447-f935c62384e7": {"__data__": {"text": "\u3010Name\u3011Numpy\u3010Chapter\u3011Array and fft\u3010Section\u3011numpy.bmat\u3010Content\u3011numpy.bmat#numpy.bmat(obj,ldict=None,gdict=None)[source]#Build a matrix object from a string, nested sequence, or array.Parameters:objstr or array_likeInput data. If a string, variables in the current scope may be\nreferenced by name.ldictdict, optionalA dictionary that replaces local operands in current frame.\nIgnored ifobjis not a string orgdictis None.gdictdict, optionalA dictionary that replaces global operands in current frame.\nIgnored ifobjis not a string.Returns:outmatrixReturns a matrix object, which is a specialized 2-D array.See alsoblockA generalization of this function for N-d arrays, that returns normal ndarrays.Examples>>>A=np.mat('1 1; 1 1')>>>B=np.mat('2 2; 2 2')>>>C=np.mat('3 4; 5 6')>>>D=np.mat('7 8; 9 0')All the following expressions construct the same block matrix:>>>np.bmat([[A,B],[C,D]])matrix([[1, 1, 2, 2],[1, 1, 2, 2],[3, 4, 7, 8],[5, 6, 9, 0]])>>>np.bmat(np.r_[np.c_[A,B],np.c_[C,D]])matrix([[1, 1, 2, 2],[1, 1, 2, 2],[3, 4, 7, 8],[5, 6, 9, 0]])>>>np.bmat('A,B; C,D')matrix([[1, 1, 2, 2],[1, 1, 2, 2],[3, 4, 7, 8],[5, 6, 9, 0]])", "doc_id": "746494d9-65ae-41c5-8447-f935c62384e7", "embedding": null, "doc_hash": "88316cb72ea09c51df0543932cc345b89b9a492f87e686e18fdd34ed655b50fa", "extra_info": null, "node_info": {"start": 0, "end": 1125, "_node_type": "1"}, "relationships": {"1": "32c8faff-b5d4-44d8-b6c7-a5851ce648c1"}}, "__type__": "1"}}}