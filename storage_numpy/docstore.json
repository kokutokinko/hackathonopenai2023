{"docstore/metadata": {"58130440-2d02-46ad-acd6-4a20452565fe": {"doc_hash": "0be28082b5416927364b9be338d54b3fd3a1b50aa593fd4101242295961e1e60"}, "410430e6-b562-41f1-a0d6-7e212b45cd7a": {"doc_hash": "fb24735c64f77a4420c468e7d90212c7e12b02490279e82ec54dac8c80b93a27"}, "ae10476e-2eb1-4cfd-bf75-00cf5d6f119f": {"doc_hash": "4501e59714b6ca4c6981e11526410cc809ff810916eef1458901bd06324483ae"}, "e20d9672-763a-4293-97a2-0281ac8dd8d4": {"doc_hash": "986405f3f4e567428ba926cc99a678776741a1cc75de8e167935829d3324e689"}, "d1018d4c-8bc3-4d6c-805a-55b39a9f449b": {"doc_hash": "6f10aab44766a0d2cdab9236fb013091cfc5a5472cd58751bb9c2a7b907ed963"}, "46059212-a159-428d-b1d7-ffb1e61a4010": {"doc_hash": "3f95e8e4a4a3332150a4b6078709c0ddfd301a0c10837202fc0671664ab11735"}, "02fae34c-1202-4172-a755-b0b5ca870f16": {"doc_hash": "01170b69a1209d9e19af81e6dccf6acc4343ced119400060f1cfca8df50af710"}, "6ec59c1c-3df8-4fd9-aff1-34d988520d71": {"doc_hash": "1e34af7a11f2bb3d2141e3ebdca60f91352f3868d18163d3113803891f8c262f"}, "fe6d4829-0749-4b07-b69f-cdbd5bb917e4": {"doc_hash": "102241b369abdf753cab06d59948dd182d651fdf24d58d4767a38fc7c4f5808a"}, "c10d83cb-b83a-4e8c-bd06-58eb36548b14": {"doc_hash": "44587a1e7dfc73128e3772c61808ddfda6012152b354d614a8a43cba23a61875"}, "3d620dd2-0af8-4848-bf91-75ce5b88ddcd": {"doc_hash": "9a176cb020f12e146ec30c598dad1067cac02570fba4f9fab8f9731e63ab4401"}, "e3a5ffce-08e6-4635-a76d-1d10d3412565": {"doc_hash": "41735b0dcdd6bb0b5cfb713b23509dbfb56592a93a25d5a42f2725b3ea5f1897"}, "d90558fc-742e-442a-867e-8f4a7dc1e0cc": {"doc_hash": "f19079a98a416792e5077e0b8b55d8ce4cd63ae275a64b05b6dfde8e50a75c5d"}, "bdec2c92-1555-4675-a059-de9cb8e83625": {"doc_hash": "0a82f93fd1256ffab05d7a52ea78a7936db6df55c66f4590243552f57b9b5c22"}, "35092868-f154-4cba-a8a6-a3e976321dcb": {"doc_hash": "2947e4d2b5d580b1c1a5284c24435733de86521895396ddfeffde32038051e70"}, "63dc15fb-3734-4d14-a16e-f8dd810c01ca": {"doc_hash": "696f34b646ca59a9c8b87659c949f05d5ecbdb9b91c90ed11ae3103d201a4027"}, "a601ade3-10a8-4753-8dc8-b6503bedceb6": {"doc_hash": "e6029e3c4be9ea35aace383bd625c50f9de47a48eae90100dfbe48d95ce2f3d2"}, "7af121a9-db65-4792-bd53-cc8d4ba2a498": {"doc_hash": "5f09b857ee35f91b5cf0a2a04d3362e734dc368eb0e4a51011fe2b11384de568"}, "97081a5b-b68d-494b-9025-4d79cece4299": {"doc_hash": "c71d0fa9d209812ac09c8f8190c181f3953653a765cb1ed5b3c291bc9ea0b5a4"}, "b155e346-db66-45a2-974a-7e1d695a9686": {"doc_hash": "acfc03dc175246463e02fcf60de2c103474a7c48d5aa53a2cc481e6e43b15be0"}, "fa0c95aa-c091-4712-a6b9-3564adbbf3a9": {"doc_hash": "a78000eaa9a3a7b72fd0406ddd22bd29da5a324df0a89d080e1f57b66463685f"}, "32fa4716-a768-4b62-a558-7efe65246371": {"doc_hash": "346e124cc13690d48a672a59a121dc3944206c5c8bb5c288acc427fe6353b1f1"}, "f5db7140-0e96-41df-b9a1-e720f78a40a7": {"doc_hash": "936e33a34c4c805c6e4dab26e50d7b17ad43d1010ad8b9fb69a2ca6b59ca736d"}, "2d9b72c2-0702-480f-9753-fdea12a89a69": {"doc_hash": "79a00f02a4230465db781803dd8fe5eedaa06e8cbfe3b63b59677d793df47535"}, "46d69053-b4ef-4ef9-8f9e-0dd7f46300af": {"doc_hash": "28bf3d8d419b39f48e21b9e3671ae2f1d3d763e222ff934973d4d72593748701"}, "8a43d83f-a1e4-4480-8069-ff88977fa8d1": {"doc_hash": "8e0d36e46543b1524d43b118806dddb312b0f9480d54fa71b423abd40e0f47b1"}, "80300de4-041a-45d5-8e73-fcb98a962e63": {"doc_hash": "f7b844a464029c7b917f59278972bad7beca33b6574e5b68ea5044246429bd12"}, "3ab9740e-d425-4b5d-b448-8a8250e97899": {"doc_hash": "1656ba48f21543dd0515895ddf421e1c48e63509a85a8d79e0d47b7822ae8758"}, "5fbaf00d-9739-4abd-8a35-be4ce4d89b1b": {"doc_hash": "7c27d332abcd97816f3a97e29d0201afd38035cffb9ec38de2a13b938cbc7540"}, "e6d57768-fdbe-4636-8d17-597f5c5a1fa1": {"doc_hash": "95f755622881fcafa0f491a880facd0de7b9a999c3e1d9a3162d27697917ec44"}, "503b309c-25dc-421f-83cf-a16b872b0f27": {"doc_hash": "eb03ff25957cc04294f58ad8522947c78d2bdd227b0f03b534f4e6da052db504"}, "227e0104-05ef-444a-a487-c94e2fad5bc1": {"doc_hash": "a0a806a429162891045ab82d07c5b39f226d1a51e7508cc3d0872d16aa4de7dd"}, "e7895e8d-4ee1-4976-9ef9-b70019e35da4": {"doc_hash": "44792bf72ca32ef661a0459a7bcf89de17dba01bebc4b1d169d04e71c77992eb"}, "48ddf893-4049-4295-b20c-fd19d0fee613": {"doc_hash": "936259d64102479d8c77551f06c070450fb113c24a81c3b7998c64b7ea6133fc"}, "916cf07d-6ac2-4d7b-b09e-e19a94cd9000": {"doc_hash": "de4afdf0d734d99f8f36e0f8e34884f7f4f3dc7399e89e740d506f38867ea269"}, "b1d98bfc-bebc-4ffa-8e87-501a771a2eb5": {"doc_hash": "e9c08a51792ec22a9352e034796690249adab9109b64ba8c7718cbea8f2a4c36"}, "149fffea-987c-479d-849c-7fe95b1e60e0": {"doc_hash": "e2d47f3c921d3e0f015ad1e2ddb2244b2d37282b750d53662cd4cf2ec0b68740"}, "7ba36a0c-7d9b-4723-bf4d-c73367940df9": {"doc_hash": "579253a7ac905f5e7eaade0a5b62eb741107a089ddeb430bf4cbdef526c374b2"}, "f74b98ca-137b-4804-bb5e-e46e634cd092": {"doc_hash": "c639f482e39176c8d853eed3c2ccc02b78d72ff39e0d49df01441b0078d27d17"}, "6b6a7f17-862b-4598-9403-f6dfb69bbe8b": {"doc_hash": "d1c297e04308d30523640231f882c5fdb445b25e66eab0c453851fcc064ae7d3"}, "73326acf-0c3d-4dd0-9858-1f0172816385": {"doc_hash": "7a6b45dfa4881d9a7e1ab2c75687fa267e36abffa0e135524901d8ebf0e09a32"}, "d354ad06-ca4e-422c-a095-f0948c2b89be": {"doc_hash": "9df2ea4059f94b29cfe2d2a6959c81961da1a9db9986d0d28f82549882dbc5a4"}, "534492ad-f75a-4ebf-b747-88f20137d105": {"doc_hash": "0f9aed9facb52f40bd43b69081fa4380647c2e95b3d1f9ee4d53b6a6f7856723"}, "0518ba39-6f47-4567-94ac-84defa1850c0": {"doc_hash": "04b4dfbdc879417acfd198ed712918b57d932af58ec9645093e64d52c61c6962"}, "7d86da09-d0cb-4fec-8e04-cdbfaa31b42d": {"doc_hash": "ca3093290ce692f3cbb41b37b9fbafde04c9a0ad32093af1795590f1041f7642"}, "5aeec8d8-28f7-4747-9d68-b7efaa1fbc67": {"doc_hash": "9cb17cf93f092521ced7a23f5638d397af3c12e560dd0ddded43b5d8d1188a24"}, "b1768e30-a7ae-45bb-b295-ef25be778a43": {"doc_hash": "5af5fe83bef6aaa33261f3748aa480daa226eec2946c80537aeaab76485a388a"}, "7231f917-8d9b-4276-87d7-72ab2a614adb": {"doc_hash": "d7ab869dbc348d55563a7b13c60973e5cc3a672d00ec3d1479e6357058b30121"}, "a0b9f89d-52f5-42d2-9188-bcddc63b7a04": {"doc_hash": "7870cebc913545d03d546011334bcf23caf2d8bbf21de3de3abfe31ed32faa68"}, "4327c654-30d5-4298-b1ed-7c57ad4129c3": {"doc_hash": "55d50a1f1a74b9d85ff3ffd19e367c033752b829855d0d56d6d51c3f19093050"}, "f36cb0f9-da12-4fc2-a83a-b75695312ccc": {"doc_hash": "c498c9f98002558dc3162b93db4dfb099c7996ed8ca66ffef100b0a76bf05035"}, "f00a7ae7-1f82-4191-a6f0-39ba11c971b8": {"doc_hash": "cb15b4474bc1b121ff1947f1ee229e28e355d10071e3ab0647672976a37150f4"}, "b8300a4c-cc32-4d02-aae6-90705a8d367d": {"doc_hash": "40bbe7dc7a3603c4c43b38de920e6306beb203a7fb8fa478dc37d55e227d6fcb"}, "b6ed7851-8224-431c-9d64-f0bd438593f2": {"doc_hash": "6afbc04ed3f58dacad287bc2c2addda66d799be3d5df6e363c1586209ba85a8b"}, "4c887932-b80f-4165-bd21-87b209a9aa3c": {"doc_hash": "b01fb20352088e06c0c20dd1a1cb2ffffea47fa7754aafa4787a63b6cd5c186f"}, "3caa5255-d820-4b86-b3dc-4e09c05882e3": {"doc_hash": "bc50302c30ce788652bf06a4dc1d6d46409ea1023a6c50963f36480f991586a8"}, "0f63cbae-5156-496e-8936-bb4a62b2835a": {"doc_hash": "1bbb827b80ea7524345820f1be0d8bd5d8ac6fe5847cfba8672955ce4cf6bb2d"}, "d126a10e-351a-4460-83dd-8af93bf23bf1": {"doc_hash": "d7ab869dbc348d55563a7b13c60973e5cc3a672d00ec3d1479e6357058b30121"}, "03a87517-e59e-43fe-ae59-d3e4dc45bdaf": {"doc_hash": "ca3093290ce692f3cbb41b37b9fbafde04c9a0ad32093af1795590f1041f7642"}, "efe0d9c6-a13a-4144-9775-a20fbbfb2f67": {"doc_hash": "7870cebc913545d03d546011334bcf23caf2d8bbf21de3de3abfe31ed32faa68"}, "5b928f57-5786-4a98-a33c-e62834e476d2": {"doc_hash": "5af5fe83bef6aaa33261f3748aa480daa226eec2946c80537aeaab76485a388a"}, "87db3ab5-578b-40db-b110-694f85c8f6b8": {"doc_hash": "9cb17cf93f092521ced7a23f5638d397af3c12e560dd0ddded43b5d8d1188a24"}, "24cb4808-5fd5-4269-9204-82dd047acc9e": {"doc_hash": "ab947de5d444dfcb2e99c6fc36a283f403a886e463c009c387483aed4afc3031"}, "5446a15d-b5e6-4380-b9a6-44e6ed0e582a": {"doc_hash": "c5a41847f032ea79032c880e6e51122229c4390ee1c3b6ce8d118d2c6a4ee19b"}, "a996cb9a-42db-4061-bdf0-1d98f4038994": {"doc_hash": "b9950b5d62593132dd650ce1e7f3b36817965ad6c9a6443b95cf7f967a1b5a4d"}, "57402c2c-2d14-41de-a3f4-c134c29a906f": {"doc_hash": "fb24735c64f77a4420c468e7d90212c7e12b02490279e82ec54dac8c80b93a27"}, "4a46940d-75da-43b5-a864-8d6971e14c66": {"doc_hash": "4501e59714b6ca4c6981e11526410cc809ff810916eef1458901bd06324483ae"}, "dfb90cc0-3ff6-49ac-9b75-32b1172cc7f6": {"doc_hash": "986405f3f4e567428ba926cc99a678776741a1cc75de8e167935829d3324e689"}, "aee6ff7f-6fe0-4443-9d82-fe8374f243b1": {"doc_hash": "6f10aab44766a0d2cdab9236fb013091cfc5a5472cd58751bb9c2a7b907ed963"}, "bbb9cc0a-0788-4c76-9c39-b80c9b03113a": {"doc_hash": "3f95e8e4a4a3332150a4b6078709c0ddfd301a0c10837202fc0671664ab11735"}, "27b56800-5bf8-4f77-a094-403110e28d94": {"doc_hash": "01170b69a1209d9e19af81e6dccf6acc4343ced119400060f1cfca8df50af710"}, "13faac07-9d01-4c61-9478-cc53c145c200": {"doc_hash": "1e34af7a11f2bb3d2141e3ebdca60f91352f3868d18163d3113803891f8c262f"}, "c04e6ec8-0967-4841-b9c0-cce88162bcf8": {"doc_hash": "102241b369abdf753cab06d59948dd182d651fdf24d58d4767a38fc7c4f5808a"}, "15adc6ae-1249-4372-9fa1-609ac6f7f716": {"doc_hash": "44587a1e7dfc73128e3772c61808ddfda6012152b354d614a8a43cba23a61875"}, "5e548669-74be-49fd-bc9a-63ad0d38da7f": {"doc_hash": "9a176cb020f12e146ec30c598dad1067cac02570fba4f9fab8f9731e63ab4401"}, "08fbe560-d4c6-4e7f-b8ae-00c8e8b9b7eb": {"doc_hash": "41735b0dcdd6bb0b5cfb713b23509dbfb56592a93a25d5a42f2725b3ea5f1897"}, "b6011c1c-258f-43b8-8278-e9bdd21eb7e1": {"doc_hash": "f19079a98a416792e5077e0b8b55d8ce4cd63ae275a64b05b6dfde8e50a75c5d"}, "373d9b5f-db86-4d88-bafe-8cd37109bbec": {"doc_hash": "0a82f93fd1256ffab05d7a52ea78a7936db6df55c66f4590243552f57b9b5c22"}, "c4d2ac62-c2a8-42e6-bae1-ffc360fedcee": {"doc_hash": "2947e4d2b5d580b1c1a5284c24435733de86521895396ddfeffde32038051e70"}, "aa8548b3-2282-47b1-8c3d-b15be6726216": {"doc_hash": "883c8c82e49438a0a0383f9d45420730cf65a3a8304fb192319c0b78c2ce40d6"}, "9511f079-c38b-4ce9-a6d2-5adc8dbc686b": {"doc_hash": "ea4bbef54174ceb80585dc1e9471678d3b3e94545cdb15fec4699d13312a47ab"}, "6cd8e3d7-f2e8-4701-bc46-c7495f2597eb": {"doc_hash": "e6029e3c4be9ea35aace383bd625c50f9de47a48eae90100dfbe48d95ce2f3d2"}, "72dd9bc1-d23d-41f9-aedd-4cc0f9b482b2": {"doc_hash": "5f09b857ee35f91b5cf0a2a04d3362e734dc368eb0e4a51011fe2b11384de568"}, "75f848a3-996f-48b4-b5a3-9d2ac6c53122": {"doc_hash": "c71d0fa9d209812ac09c8f8190c181f3953653a765cb1ed5b3c291bc9ea0b5a4"}, "e16b5424-e9bf-444f-b3ca-5895199913e4": {"doc_hash": "acfc03dc175246463e02fcf60de2c103474a7c48d5aa53a2cc481e6e43b15be0"}, "afae6699-f49d-40b2-89bb-aecb26ec1b95": {"doc_hash": "a78000eaa9a3a7b72fd0406ddd22bd29da5a324df0a89d080e1f57b66463685f"}, "6192a5bd-e2e1-41df-9693-3d31fc0d8d7f": {"doc_hash": "346e124cc13690d48a672a59a121dc3944206c5c8bb5c288acc427fe6353b1f1"}, "dc873cc1-be79-4bde-adbb-d2480d61c162": {"doc_hash": "936e33a34c4c805c6e4dab26e50d7b17ad43d1010ad8b9fb69a2ca6b59ca736d"}, "494137b3-015d-48fe-ba93-c87ddfb392d9": {"doc_hash": "8e64ec406729b3b600ef18f9d22b986dad5c7e85212dd1247b95bb67e424c278"}, "6075597c-61c0-4b87-828d-56a615d5e265": {"doc_hash": "3654bd1f42705f6807e2bba717166e1ed7bc7dc7a1739d3707a625de4bb230ad"}, "9e784b8e-df49-4b6c-87ab-c4414b076207": {"doc_hash": "28bf3d8d419b39f48e21b9e3671ae2f1d3d763e222ff934973d4d72593748701"}, "982d0c34-496e-47fd-ac15-2745b9d4a128": {"doc_hash": "8e0d36e46543b1524d43b118806dddb312b0f9480d54fa71b423abd40e0f47b1"}, "51671c6e-c20f-4514-b6f4-cc051fa53098": {"doc_hash": "f7b844a464029c7b917f59278972bad7beca33b6574e5b68ea5044246429bd12"}, "76c2a4f1-dee6-4945-8a18-4b1105ff967f": {"doc_hash": "1656ba48f21543dd0515895ddf421e1c48e63509a85a8d79e0d47b7822ae8758"}, "c4a65099-7210-4556-96e5-1a7a5c8df5c6": {"doc_hash": "7c27d332abcd97816f3a97e29d0201afd38035cffb9ec38de2a13b938cbc7540"}, "f5778b6c-1ce4-4409-9675-61ae1cf7d229": {"doc_hash": "95f755622881fcafa0f491a880facd0de7b9a999c3e1d9a3162d27697917ec44"}, "45d62107-b4c0-4e08-bdf8-93a4771a7bea": {"doc_hash": "eb03ff25957cc04294f58ad8522947c78d2bdd227b0f03b534f4e6da052db504"}, "cbf6be02-d855-4ed0-a704-f63066394083": {"doc_hash": "a0a806a429162891045ab82d07c5b39f226d1a51e7508cc3d0872d16aa4de7dd"}, "a33048b8-6849-4a88-becb-b894ba6427c8": {"doc_hash": "44792bf72ca32ef661a0459a7bcf89de17dba01bebc4b1d169d04e71c77992eb"}, "214c6da0-8131-43a3-9847-11180fbee728": {"doc_hash": "936259d64102479d8c77551f06c070450fb113c24a81c3b7998c64b7ea6133fc"}, "0da139dc-3384-4f90-bddd-509bd0be31e0": {"doc_hash": "de4afdf0d734d99f8f36e0f8e34884f7f4f3dc7399e89e740d506f38867ea269"}, "e5eeb34e-6a96-42c7-92c4-dfbe8bc9e2bc": {"doc_hash": "e9c08a51792ec22a9352e034796690249adab9109b64ba8c7718cbea8f2a4c36"}, "8f4aee17-6659-45d0-86c1-299163849adb": {"doc_hash": "e2d47f3c921d3e0f015ad1e2ddb2244b2d37282b750d53662cd4cf2ec0b68740"}, "3fa6e99f-53d6-4dec-97ed-e5dbcc6a89be": {"doc_hash": "579253a7ac905f5e7eaade0a5b62eb741107a089ddeb430bf4cbdef526c374b2"}, "77045b52-8e1e-43a0-8854-913f3df3383d": {"doc_hash": "c639f482e39176c8d853eed3c2ccc02b78d72ff39e0d49df01441b0078d27d17"}, "b9e0905e-58f3-47a6-9313-9328f9912c39": {"doc_hash": "d1c297e04308d30523640231f882c5fdb445b25e66eab0c453851fcc064ae7d3"}, "a2ac0205-0ae9-489c-9e64-83881dd3f683": {"doc_hash": "7a6b45dfa4881d9a7e1ab2c75687fa267e36abffa0e135524901d8ebf0e09a32"}, "e591a98f-9ff1-4283-96d7-418a881c1d46": {"doc_hash": "9df2ea4059f94b29cfe2d2a6959c81961da1a9db9986d0d28f82549882dbc5a4"}, "19f4a5bf-691f-42d3-938b-4dfbb1890430": {"doc_hash": "0f9aed9facb52f40bd43b69081fa4380647c2e95b3d1f9ee4d53b6a6f7856723"}, "84d2e2c2-5745-4a26-9690-b73398aede45": {"doc_hash": "04b4dfbdc879417acfd198ed712918b57d932af58ec9645093e64d52c61c6962"}, "f619f073-2ca4-43d9-9f66-d61ab980c132": {"doc_hash": "ca3093290ce692f3cbb41b37b9fbafde04c9a0ad32093af1795590f1041f7642"}, "e59b29ca-9ba4-4028-8b01-bdf872f69f71": {"doc_hash": "9cb17cf93f092521ced7a23f5638d397af3c12e560dd0ddded43b5d8d1188a24"}, "569c2a72-7e1c-4922-a9ca-200d25cd14ee": {"doc_hash": "5af5fe83bef6aaa33261f3748aa480daa226eec2946c80537aeaab76485a388a"}, "ffa6cef8-5428-4f5f-a0a1-4b66d88b407c": {"doc_hash": "c0f6fed8561135f1c4ba922373c5c308e357ee1c9b4d75492985eebac9279605"}, "6ba98e21-4ed9-40b9-a0dc-04eea4bd23d9": {"doc_hash": "9dad189b782314c509bec6395898773367c44577802ed3621a353d2835ba6807"}, "2e8cbbca-2749-4dd8-95ee-afe1de75005f": {"doc_hash": "9dda00153d82fb15ecfe5e629f7d94d818ec8fa8278a0da425fbdaa38c3c976b"}, "38c364c5-f9fd-4395-9e77-595dcdd73b08": {"doc_hash": "dd88b1f06f17df2ee9d103b67bfa35e1ecda8baf61978f6e32500a1a400122bd"}, "63326a19-283f-4768-87c0-04ba5905a486": {"doc_hash": "55d50a1f1a74b9d85ff3ffd19e367c033752b829855d0d56d6d51c3f19093050"}, "fb77ab93-39db-47ad-be98-ac2d221583b9": {"doc_hash": "c498c9f98002558dc3162b93db4dfb099c7996ed8ca66ffef100b0a76bf05035"}, "e81932be-a58f-4b8b-a698-163da647d28c": {"doc_hash": "cb15b4474bc1b121ff1947f1ee229e28e355d10071e3ab0647672976a37150f4"}, "ea29f0d0-0df5-410f-8305-95d18990bc53": {"doc_hash": "40bbe7dc7a3603c4c43b38de920e6306beb203a7fb8fa478dc37d55e227d6fcb"}, "354f3f9b-ff1d-4ec9-a942-5ebace4bca39": {"doc_hash": "6afbc04ed3f58dacad287bc2c2addda66d799be3d5df6e363c1586209ba85a8b"}, "1919089b-3566-436b-8809-93259fecd58b": {"doc_hash": "b01fb20352088e06c0c20dd1a1cb2ffffea47fa7754aafa4787a63b6cd5c186f"}, "3dc43a3a-7cc3-4d24-ac22-a4a625a9745d": {"doc_hash": "bc50302c30ce788652bf06a4dc1d6d46409ea1023a6c50963f36480f991586a8"}, "93294637-ca55-4624-9dbc-44c7f1e19aa6": {"doc_hash": "1bbb827b80ea7524345820f1be0d8bd5d8ac6fe5847cfba8672955ce4cf6bb2d"}, "3154af2b-b805-4dd8-8550-a1784155c9a7": {"doc_hash": "c0f6fed8561135f1c4ba922373c5c308e357ee1c9b4d75492985eebac9279605"}, "37b69833-5489-4367-9a1a-7603aea5276e": {"doc_hash": "9dad189b782314c509bec6395898773367c44577802ed3621a353d2835ba6807"}, "22d016b4-6c9e-49c5-88da-2539153fe8f7": {"doc_hash": "ca3093290ce692f3cbb41b37b9fbafde04c9a0ad32093af1795590f1041f7642"}, "fb2212ad-1d97-4250-8b7e-607d0598cdf0": {"doc_hash": "9dda00153d82fb15ecfe5e629f7d94d818ec8fa8278a0da425fbdaa38c3c976b"}, "8156e427-176c-431b-832c-b2d69308539b": {"doc_hash": "dd88b1f06f17df2ee9d103b67bfa35e1ecda8baf61978f6e32500a1a400122bd"}, "230e4f4d-8cc3-47a6-99dc-b22121ff98e9": {"doc_hash": "5af5fe83bef6aaa33261f3748aa480daa226eec2946c80537aeaab76485a388a"}, "32394e2b-ec7b-4d43-bf3b-2bf7e003ae10": {"doc_hash": "9cb17cf93f092521ced7a23f5638d397af3c12e560dd0ddded43b5d8d1188a24"}}, "docstore/data": {"24cb4808-5fd5-4269-9204-82dd047acc9e": {"__data__": {"text": "\u3010Name\u3011Numpy\u3010Chapter\u3011ArrayObjects\u3010Section\u3011numpy.ndarray\u3010Content\u3011numpy.ndarray#classnumpy.ndarray(shape,dtype=float,buffer=None,offset=0,strides=None,order=None)[source]#An array object represents a multidimensional, homogeneous array\r\nof fixed-size items.  An associated data-type object describes the\r\nformat of each element in the array (its byte-order, how many bytes it\r\noccupies in memory, whether it is an integer, a floating point number,\r\nor something else, etc.)Arrays should be constructed usingarray,zerosorempty(refer\r\nto the See Also section below).  The parameters given here refer to\r\na low-level method (ndarray(\uff82\u2026)) for instantiating an array.For more information, refer to thenumpymodule and examine the\r\nmethods and attributes of an array.Parameters:(for the __new__ method; see Notes below)shapetuple of intsShape of created array.dtypedata-type, optionalAny object that can be interpreted as a numpy data type.bufferobject exposing buffer interface, optionalUsed to fill the array with data.offsetint, optionalOffset of array data in buffer.stridestuple of ints, optionalStrides of data in memory.order{\uff82\u2018C\uff82\u2019, \uff82\u2018F\uff82\u2019}, optionalRow-major (C-style) or column-major (Fortran-style) order.See alsoarrayConstruct an array.zerosCreate an array, each element of which is zero.emptyCreate an array, but leave its allocated memory unchanged (i.e., it contains \uff82\u201cgarbage\uff82\u201d).dtypeCreate a data-type.numpy.typing.NDArrayAn ndarray aliasgenericw.r.t. itsdtype.type.NotesThere are two modes of creating an array using__new__:Ifbufferis None, then onlyshape,dtype, andorderare used.Ifbufferis an object exposing the buffer interface, then\r\nall keywords are interpreted.No__init__method is needed because the array is fully initialized\r\nafter the__new__method.ExamplesThese examples illustrate the low-levelndarrayconstructor.  Refer\r\nto theSee Alsosection above for easier ways of constructing an\r\nndarray.First mode,bufferis None:>>>np.ndarray(shape=(2,2),dtype=float,order='F')array([[0.0e+000, 0.0e+000], # random[     nan, 2.5e-323]])Second mode:>>>np.ndarray((2,),buffer=np.array([1,2,3]),...offset=np.int_().itemsize,...dtype=int)# offset = 1*itemsize, i.e. skip first elementarray([2, 3])Attributes:TndarrayView of the transposed array.databufferPython buffer object pointing to the start of the array\uff82\u2019s data.dtypedtype objectData-type of the array\uff82\u2019s elements.flagsdictInformation about the memory layout of the array.flatnumpy.flatiter objectA 1-D iterator over the array.imagndarrayThe imaginary part of the array.realndarrayThe real part of the array.sizeintNumber of elements in the array.itemsizeintLength of one array element in bytes.nbytesintTotal bytes consumed by the elements of the array.ndimintNumber of array dimensions.shapetuple of intsTuple of array dimensions.stridestuple of intsTuple of bytes to step in each dimension when traversing an array.ctypesctypes objectAn object to simplify the interaction of the array with the ctypes module.basendarrayBase object if memory is from some other object.Methodsall([axis,out,keepdims,where])Returns True if all elements evaluate to True.any([axis,out,keepdims,where])Returns True if any of the elements ofaevaluate to True.argmax([axis,out,keepdims])Return indices of the maximum values along the given axis.argmin([axis,out,keepdims])Return indices of the minimum values along the given axis.argpartition(kth[,axis,kind,order])Returns the indices that would partition this", "doc_id": "24cb4808-5fd5-4269-9204-82dd047acc9e", "embedding": null, "doc_hash": "ab947de5d444dfcb2e99c6fc36a283f403a886e463c009c387483aed4afc3031", "extra_info": null, "node_info": {"start": 0, "end": 3448, "_node_type": "1"}, "relationships": {"1": "58130440-2d02-46ad-acd6-4a20452565fe", "3": "5446a15d-b5e6-4380-b9a6-44e6ed0e582a"}}, "__type__": "1"}, "5446a15d-b5e6-4380-b9a6-44e6ed0e582a": {"__data__": {"text": "array.ndimintNumber of array dimensions.shapetuple of intsTuple of array dimensions.stridestuple of intsTuple of bytes to step in each dimension when traversing an array.ctypesctypes objectAn object to simplify the interaction of the array with the ctypes module.basendarrayBase object if memory is from some other object.Methodsall([axis,out,keepdims,where])Returns True if all elements evaluate to True.any([axis,out,keepdims,where])Returns True if any of the elements ofaevaluate to True.argmax([axis,out,keepdims])Return indices of the maximum values along the given axis.argmin([axis,out,keepdims])Return indices of the minimum values along the given axis.argpartition(kth[,axis,kind,order])Returns the indices that would partition this array.argsort([axis,kind,order])Returns the indices that would sort this array.astype(dtype[,order,casting,subok,copy])Copy of the array, cast to a specified type.byteswap([inplace])Swap the bytes of the array elementschoose(choices[,out,mode])Use an index array to construct a new array from a set of choices.clip([min,max,out])Return an array whose values are limited to[min,max].compress(condition[,axis,out])Return selected slices of this array along given axis.conj()Complex-conjugate all elements.conjugate()Return the complex conjugate, element-wise.copy([order])Return a copy of the array.cumprod([axis,dtype,out])Return the cumulative product of the elements along the given axis.cumsum([axis,dtype,out])Return the cumulative sum of the elements along the given axis.diagonal([offset,axis1,axis2])Return specified diagonals.dump(file)Dump a pickle of the array to the specified file.dumps()Returns the pickle of the array as a string.fill(value)Fill the array with a scalar value.flatten([order])Return a copy of the array collapsed into one dimension.getfield(dtype[,offset])Returns a field of the given array as a certain type.item(*args)Copy an element of an array to a standard Python scalar and return it.itemset(*args)Insert scalar into an array (scalar is cast to array's dtype, if possible)max([axis,out,keepdims,initial,where])Return the maximum along a given axis.mean([axis,dtype,out,keepdims,where])Returns the average of the array elements along given axis.min([axis,out,keepdims,initial,where])Return the minimum along a given axis.newbyteorder([new_order])Return the array with the same data viewed with a different byte order.nonzero()Return the indices of the elements that are non-zero.partition(kth[,axis,kind,order])Rearranges the elements in the array in such a way that the value of the element in kth position is in the position it would be in a sorted array.prod([axis,dtype,out,keepdims,initial,...])Return the product of the array elements over the given axisptp([axis,out,keepdims])Peak to peak (maximum - minimum) value along a given axis.put(indices,values[,mode])Seta.flat[n]=values[n]for allnin indices.ravel([order])Return a flattened array.repeat(repeats[,axis])Repeat elements of an array.reshape(shape[,order])Returns an array containing the same data with a new shape.resize(new_shape[,refcheck])Change shape and size of array in-place.round([decimals,out])Returnawith each element rounded to the given number of decimals.searchsorted(v[,side,sorter])Find indices where elements of v should be inserted in a to maintain order.setfield(val,dtype[,offset])Put a value into a specified place in a field defined by a data-type.setflags([write,align,uic])Set array flags WRITEABLE, ALIGNED, WRITEBACKIFCOPY, respectively.sort([axis,kind,order])Sort an array in-place.squeeze([axis])Remove axes of length one", "doc_id": "5446a15d-b5e6-4380-b9a6-44e6ed0e582a", "embedding": null, "doc_hash": "c5a41847f032ea79032c880e6e51122229c4390ee1c3b6ce8d118d2c6a4ee19b", "extra_info": null, "node_info": {"start": 2790, "end": 6379, "_node_type": "1"}, "relationships": {"1": "58130440-2d02-46ad-acd6-4a20452565fe", "2": "24cb4808-5fd5-4269-9204-82dd047acc9e", "3": "a996cb9a-42db-4061-bdf0-1d98f4038994"}}, "__type__": "1"}, "a996cb9a-42db-4061-bdf0-1d98f4038994": {"__data__": {"text": "array.repeat(repeats[,axis])Repeat elements of an array.reshape(shape[,order])Returns an array containing the same data with a new shape.resize(new_shape[,refcheck])Change shape and size of array in-place.round([decimals,out])Returnawith each element rounded to the given number of decimals.searchsorted(v[,side,sorter])Find indices where elements of v should be inserted in a to maintain order.setfield(val,dtype[,offset])Put a value into a specified place in a field defined by a data-type.setflags([write,align,uic])Set array flags WRITEABLE, ALIGNED, WRITEBACKIFCOPY, respectively.sort([axis,kind,order])Sort an array in-place.squeeze([axis])Remove axes of length one froma.std([axis,dtype,out,ddof,keepdims,where])Returns the standard deviation of the array elements along given axis.sum([axis,dtype,out,keepdims,initial,where])Return the sum of the array elements over the given axis.swapaxes(axis1,axis2)Return a view of the array withaxis1andaxis2interchanged.take(indices[,axis,out,mode])Return an array formed from the elements ofaat the given indices.tobytes([order])Construct Python bytes containing the raw data bytes in the array.tofile(fid[,sep,format])Write array to a file as text or binary (default).tolist()Return the array as ana.ndim-levels deep nested list of Python scalars.tostring([order])A compatibility alias fortobytes, with exactly the same behavior.trace([offset,axis1,axis2,dtype,out])Return the sum along diagonals of the array.transpose(*axes)Returns a view of the array with axes transposed.var([axis,dtype,out,ddof,keepdims,where])Returns the variance of the array elements, along given axis.view([dtype][,type])New view of array with the same data.dot", "doc_id": "a996cb9a-42db-4061-bdf0-1d98f4038994", "embedding": null, "doc_hash": "b9950b5d62593132dd650ce1e7f3b36817965ad6c9a6443b95cf7f967a1b5a4d", "extra_info": null, "node_info": {"start": 6367, "end": 8054, "_node_type": "1"}, "relationships": {"1": "58130440-2d02-46ad-acd6-4a20452565fe", "2": "5446a15d-b5e6-4380-b9a6-44e6ed0e582a"}}, "__type__": "1"}, "57402c2c-2d14-41de-a3f4-c134c29a906f": {"__data__": {"text": "\u3010Name\u3011Numpy\u3010Chapter\u3011ArrayObjects\u3010Section\u3011numpy.ndarray.flags\u3010Content\u3011numpy.ndarray.flags#attributendarray.flags#Information about the memory layout of the array.NotesTheflagsobject can be accessed dictionary-like (as ina.flags['WRITEABLE']),\r\nor by using lowercased attribute names (as ina.flags.writeable). Short flag\r\nnames are only supported in dictionary access.Only the WRITEBACKIFCOPY, WRITEABLE, and ALIGNED flags can be\r\nchanged by the user, via direct assignment to the attribute or dictionary\r\nentry, or by callingndarray.setflags.The array flags cannot be set arbitrarily:WRITEBACKIFCOPY can only be setFalse.ALIGNED can only be setTrueif the data is truly aligned.WRITEABLE can only be setTrueif the array owns its own memory\r\nor the ultimate owner of the memory exposes a writeable buffer\r\ninterface or is a string.Arrays can be both C-style and Fortran-style contiguous simultaneously.\r\nThis is clear for 1-dimensional arrays, but can also be true for higher\r\ndimensional arrays.Even for contiguous arrays a stride for a given dimensionarr.strides[dim]may bearbitraryifarr.shape[dim]==1or the array has no elements.\r\nIt doesnotgenerally hold thatself.strides[-1]==self.itemsizefor C-style contiguous arrays orself.strides[0]==self.itemsizefor\r\nFortran-style contiguous arrays is true.Attributes:C_CONTIGUOUS (C)The data is in a single, C-style contiguous segment.F_CONTIGUOUS (F)The data is in a single, Fortran-style contiguous segment.OWNDATA (O)The array owns the memory it uses or borrows it from another object.WRITEABLE (W)The data area can be written to.  Setting this to False locks\r\nthe data, making it read-only.  A view (slice, etc.) inherits WRITEABLE\r\nfrom its base array at creation time, but a view of a writeable\r\narray may be subsequently locked while the base array remains writeable.\r\n(The opposite is not true, in that a view of a locked array may not\r\nbe made writeable.  However, currently, locking a base object does not\r\nlock any views that already reference it, so under that circumstance it\r\nis possible to alter the contents of a locked array via a previously\r\ncreated writeable view onto it.)  Attempting to change a non-writeable\r\narray raises a RuntimeError exception.ALIGNED (A)The data and all elements are aligned appropriately for the hardware.WRITEBACKIFCOPY (X)This array is a copy of some other array. The C-API function\r\nPyArray_ResolveWritebackIfCopy must be called before deallocating\r\nto the base array will be updated with the contents of this array.FNCF_CONTIGUOUS and not C_CONTIGUOUS.FORCF_CONTIGUOUS or C_CONTIGUOUS (one-segment test).BEHAVED (B)ALIGNED and WRITEABLE.CARRAY (CA)BEHAVED and C_CONTIGUOUS.FARRAY (FA)BEHAVED and F_CONTIGUOUS and not C_CONTIGUOUS.", "doc_id": "57402c2c-2d14-41de-a3f4-c134c29a906f", "embedding": null, "doc_hash": "fb24735c64f77a4420c468e7d90212c7e12b02490279e82ec54dac8c80b93a27", "extra_info": null, "node_info": {"start": 0, "end": 2721, "_node_type": "1"}, "relationships": {"1": "410430e6-b562-41f1-a0d6-7e212b45cd7a"}}, "__type__": "1"}, "4a46940d-75da-43b5-a864-8d6971e14c66": {"__data__": {"text": "\u3010Name\u3011Numpy\u3010Chapter\u3011ArrayObjects\u3010Section\u3011numpy.ndarray.shape\u3010Content\u3011numpy.ndarray.shape#attributendarray.shape#Tuple of array dimensions.The shape property is usually used to get the current shape of an array,\r\nbut may also be used to reshape the array in-place by assigning a tuple of\r\narray dimensions to it.  As withnumpy.reshape, one of the new shape\r\ndimensions can be -1, in which case its value is inferred from the size of\r\nthe array and the remaining dimensions. Reshaping an array in-place will\r\nfail if a copy is required.WarningSettingarr.shapeis discouraged and may be deprecated in the\r\nfuture.  Usingndarray.reshapeis the preferred approach.See alsonumpy.shapeEquivalent getter function.numpy.reshapeFunction similar to settingshape.ndarray.reshapeMethod similar to settingshape.Examples>>>x=np.array([1,2,3,4])>>>x.shape(4,)>>>y=np.zeros((2,3,4))>>>y.shape(2, 3, 4)>>>y.shape=(3,8)>>>yarray([[ 0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.],[ 0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.],[ 0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.]])>>>y.shape=(3,6)Traceback (most recent call last):File\"<stdin>\", line1, in<module>ValueError:total size of new array must be unchanged>>>np.zeros((4,2))[::2].shape=(-1,)Traceback (most recent call last):File\"<stdin>\", line1, in<module>AttributeError:Incompatible shape for in-place modification. Use`.reshape()` to make a copy with the desired shape.", "doc_id": "4a46940d-75da-43b5-a864-8d6971e14c66", "embedding": null, "doc_hash": "4501e59714b6ca4c6981e11526410cc809ff810916eef1458901bd06324483ae", "extra_info": null, "node_info": {"start": 0, "end": 1383, "_node_type": "1"}, "relationships": {"1": "ae10476e-2eb1-4cfd-bf75-00cf5d6f119f"}}, "__type__": "1"}, "dfb90cc0-3ff6-49ac-9b75-32b1172cc7f6": {"__data__": {"text": "\u3010Name\u3011Numpy\u3010Chapter\u3011ArrayObjects\u3010Section\u3011numpy.ndarray.strides\u3010Content\u3011numpy.ndarray.strides#attributendarray.strides#Tuple of bytes to step in each dimension when traversing an array.The byte offset of element(i[0],i[1],...,i[n])in an arrayais:offset=sum(np.array(i)*a.strides)A more detailed explanation of strides can be found in the\r\n\uff82\u201cndarray.rst\uff82\u201d file in the NumPy reference guide.WarningSettingarr.stridesis discouraged and may be deprecated in the\r\nfuture.numpy.lib.stride_tricks.as_stridedshould be preferred\r\nto create a new view of the same data in a safer way.See alsonumpy.lib.stride_tricks.as_stridedNotesImagine an array of 32-bit integers (each 4 bytes):x=np.array([[0,1,2,3,4],[5,6,7,8,9]],dtype=np.int32)This array is stored in memory as 40 bytes, one after the other\r\n(known as a contiguous block of memory).  The strides of an array tell\r\nus how many bytes we have to skip in memory to move to the next position\r\nalong a certain axis.  For example, we have to skip 4 bytes (1 value) to\r\nmove to the next column, but 20 bytes (5 values) to get to the same\r\nposition in the next row.  As such, the strides for the arrayxwill be(20,4).Examples>>>y=np.reshape(np.arange(2*3*4),(2,3,4))>>>yarray([[[ 0,  1,  2,  3],[ 4,  5,  6,  7],[ 8,  9, 10, 11]],[[12, 13, 14, 15],[16, 17, 18, 19],[20, 21, 22, 23]]])>>>y.strides(48, 16, 4)>>>y[1,1,1]17>>>offset=sum(y.strides*np.array((1,1,1)))>>>offset/y.itemsize17>>>x=np.reshape(np.arange(5*6*7*8),(5,6,7,8)).transpose(2,3,1,0)>>>x.strides(32, 4, 224, 1344)>>>i=np.array([3,5,2,2])>>>offset=sum(i*x.strides)>>>x[3,5,2,2]813>>>offset/x.itemsize813", "doc_id": "dfb90cc0-3ff6-49ac-9b75-32b1172cc7f6", "embedding": null, "doc_hash": "986405f3f4e567428ba926cc99a678776741a1cc75de8e167935829d3324e689", "extra_info": null, "node_info": {"start": 0, "end": 1603, "_node_type": "1"}, "relationships": {"1": "e20d9672-763a-4293-97a2-0281ac8dd8d4"}}, "__type__": "1"}, "aee6ff7f-6fe0-4443-9d82-fe8374f243b1": {"__data__": {"text": "\u3010Name\u3011Numpy\u3010Chapter\u3011ArrayObjects\u3010Section\u3011numpy.ndarray.ndim\u3010Content\u3011numpy.ndarray.ndim#attributendarray.ndim#Number of array dimensions.Examples>>>x=np.array([1,2,3])>>>x.ndim1>>>y=np.zeros((2,3,4))>>>y.ndim3", "doc_id": "aee6ff7f-6fe0-4443-9d82-fe8374f243b1", "embedding": null, "doc_hash": "6f10aab44766a0d2cdab9236fb013091cfc5a5472cd58751bb9c2a7b907ed963", "extra_info": null, "node_info": {"start": 0, "end": 208, "_node_type": "1"}, "relationships": {"1": "d1018d4c-8bc3-4d6c-805a-55b39a9f449b"}}, "__type__": "1"}, "bbb9cc0a-0788-4c76-9c39-b80c9b03113a": {"__data__": {"text": "\u3010Name\u3011Numpy\u3010Chapter\u3011ArrayObjects\u3010Section\u3011numpy.ndarray.data\u3010Content\u3011numpy.ndarray.data#attributendarray.data#Python buffer object pointing to the start of the array\uff82\u2019s data.", "doc_id": "bbb9cc0a-0788-4c76-9c39-b80c9b03113a", "embedding": null, "doc_hash": "3f95e8e4a4a3332150a4b6078709c0ddfd301a0c10837202fc0671664ab11735", "extra_info": null, "node_info": {"start": 0, "end": 173, "_node_type": "1"}, "relationships": {"1": "46059212-a159-428d-b1d7-ffb1e61a4010"}}, "__type__": "1"}, "27b56800-5bf8-4f77-a094-403110e28d94": {"__data__": {"text": "\u3010Name\u3011Numpy\u3010Chapter\u3011ArrayObjects\u3010Section\u3011numpy.ndarray.size\u3010Content\u3011numpy.ndarray.size#attributendarray.size#Number of elements in the array.Equal tonp.prod(a.shape), i.e., the product of the array\uff82\u2019s\r\ndimensions.Notesa.sizereturns a standard arbitrary precision Python integer. This\r\nmay not be the case with other methods of obtaining the same value\r\n(like the suggestednp.prod(a.shape), which returns an instance\r\nofnp.int_), and may be relevant if the value is used further in\r\ncalculations that may overflow a fixed size integer type.Examples>>>x=np.zeros((3,5,2),dtype=np.complex128)>>>x.size30>>>np.prod(x.shape)30", "doc_id": "27b56800-5bf8-4f77-a094-403110e28d94", "embedding": null, "doc_hash": "01170b69a1209d9e19af81e6dccf6acc4343ced119400060f1cfca8df50af710", "extra_info": null, "node_info": {"start": 0, "end": 621, "_node_type": "1"}, "relationships": {"1": "02fae34c-1202-4172-a755-b0b5ca870f16"}}, "__type__": "1"}, "13faac07-9d01-4c61-9478-cc53c145c200": {"__data__": {"text": "\u3010Name\u3011Numpy\u3010Chapter\u3011ArrayObjects\u3010Section\u3011numpy.ndarray.itemsize\u3010Content\u3011numpy.ndarray.itemsize#attributendarray.itemsize#Length of one array element in bytes.Examples>>>x=np.array([1,2,3],dtype=np.float64)>>>x.itemsize8>>>x=np.array([1,2,3],dtype=np.complex128)>>>x.itemsize16", "doc_id": "13faac07-9d01-4c61-9478-cc53c145c200", "embedding": null, "doc_hash": "1e34af7a11f2bb3d2141e3ebdca60f91352f3868d18163d3113803891f8c262f", "extra_info": null, "node_info": {"start": 0, "end": 276, "_node_type": "1"}, "relationships": {"1": "6ec59c1c-3df8-4fd9-aff1-34d988520d71"}}, "__type__": "1"}, "c04e6ec8-0967-4841-b9c0-cce88162bcf8": {"__data__": {"text": "\u3010Name\u3011Numpy\u3010Chapter\u3011ArrayObjects\u3010Section\u3011numpy.ndarray.nbytes\u3010Content\u3011numpy.ndarray.nbytes#attributendarray.nbytes#Total bytes consumed by the elements of the array.See alsosys.getsizeofMemory consumed by the object itself without parents in case view. This does include memory consumed by non-element attributes.NotesDoes not include memory consumed by non-element attributes of the\r\narray object.Examples>>>x=np.zeros((3,5,2),dtype=np.complex128)>>>x.nbytes480>>>np.prod(x.shape)*x.itemsize480", "doc_id": "c04e6ec8-0967-4841-b9c0-cce88162bcf8", "embedding": null, "doc_hash": "102241b369abdf753cab06d59948dd182d651fdf24d58d4767a38fc7c4f5808a", "extra_info": null, "node_info": {"start": 0, "end": 495, "_node_type": "1"}, "relationships": {"1": "fe6d4829-0749-4b07-b69f-cdbd5bb917e4"}}, "__type__": "1"}, "15adc6ae-1249-4372-9fa1-609ac6f7f716": {"__data__": {"text": "\u3010Name\u3011Numpy\u3010Chapter\u3011ArrayObjects\u3010Section\u3011numpy.ndarray.base\u3010Content\u3011numpy.ndarray.base#attributendarray.base#Base object if memory is from some other object.ExamplesThe base of an array that owns its memory is None:>>>x=np.array([1,2,3,4])>>>x.baseisNoneTrueSlicing creates a view, whose memory is shared with x:>>>y=x[2:]>>>y.baseisxTrue", "doc_id": "15adc6ae-1249-4372-9fa1-609ac6f7f716", "embedding": null, "doc_hash": "44587a1e7dfc73128e3772c61808ddfda6012152b354d614a8a43cba23a61875", "extra_info": null, "node_info": {"start": 0, "end": 338, "_node_type": "1"}, "relationships": {"1": "c10d83cb-b83a-4e8c-bd06-58eb36548b14"}}, "__type__": "1"}, "5e548669-74be-49fd-bc9a-63ad0d38da7f": {"__data__": {"text": "\u3010Name\u3011Numpy\u3010Chapter\u3011ArrayObjects\u3010Section\u3011numpy.ndarray.dtype\u3010Content\u3011numpy.ndarray.dtype#attributendarray.dtype#Data-type of the array\uff82\u2019s elements.WarningSettingarr.dtypeis discouraged and may be deprecated in the\r\nfuture.  Setting will replace thedtypewithout modifying the\r\nmemory (see alsondarray.viewandndarray.astype).Parameters:NoneReturns:dnumpy dtype objectSee alsondarray.astypeCast the values contained in the array to a new data-type.ndarray.viewCreate a view of the same data but a different data-type.numpy.dtypeExamples>>>xarray([[0, 1],[2, 3]])>>>x.dtypedtype('int32')>>>type(x.dtype)<type 'numpy.dtype'>", "doc_id": "5e548669-74be-49fd-bc9a-63ad0d38da7f", "embedding": null, "doc_hash": "9a176cb020f12e146ec30c598dad1067cac02570fba4f9fab8f9731e63ab4401", "extra_info": null, "node_info": {"start": 0, "end": 619, "_node_type": "1"}, "relationships": {"1": "3d620dd2-0af8-4848-bf91-75ce5b88ddcd"}}, "__type__": "1"}, "08fbe560-d4c6-4e7f-b8ae-00c8e8b9b7eb": {"__data__": {"text": "\u3010Name\u3011Numpy\u3010Chapter\u3011ArrayObjects\u3010Section\u3011numpy.ndarray.T\u3010Content\u3011numpy.ndarray.T#attributendarray.T#View of the transposed array.Same asself.transpose().See alsotransposeExamples>>>a=np.array([[1,2],[3,4]])>>>aarray([[1, 2],[3, 4]])>>>a.Tarray([[1, 3],[2, 4]])>>>a=np.array([1,2,3,4])>>>aarray([1, 2, 3, 4])>>>a.Tarray([1, 2, 3, 4])", "doc_id": "08fbe560-d4c6-4e7f-b8ae-00c8e8b9b7eb", "embedding": null, "doc_hash": "41735b0dcdd6bb0b5cfb713b23509dbfb56592a93a25d5a42f2725b3ea5f1897", "extra_info": null, "node_info": {"start": 0, "end": 332, "_node_type": "1"}, "relationships": {"1": "e3a5ffce-08e6-4635-a76d-1d10d3412565"}}, "__type__": "1"}, "b6011c1c-258f-43b8-8278-e9bdd21eb7e1": {"__data__": {"text": "\u3010Name\u3011Numpy\u3010Chapter\u3011ArrayObjects\u3010Section\u3011numpy.ndarray.real\u3010Content\u3011numpy.ndarray.real#attributendarray.real#The real part of the array.See alsonumpy.realequivalent functionExamples>>>x=np.sqrt([1+0j,0+1j])>>>x.realarray([ 1.        ,  0.70710678])>>>x.real.dtypedtype('float64')", "doc_id": "b6011c1c-258f-43b8-8278-e9bdd21eb7e1", "embedding": null, "doc_hash": "f19079a98a416792e5077e0b8b55d8ce4cd63ae275a64b05b6dfde8e50a75c5d", "extra_info": null, "node_info": {"start": 0, "end": 279, "_node_type": "1"}, "relationships": {"1": "d90558fc-742e-442a-867e-8f4a7dc1e0cc"}}, "__type__": "1"}, "373d9b5f-db86-4d88-bafe-8cd37109bbec": {"__data__": {"text": "\u3010Name\u3011Numpy\u3010Chapter\u3011ArrayObjects\u3010Section\u3011numpy.ndarray.imag\u3010Content\u3011numpy.ndarray.imag#attributendarray.imag#The imaginary part of the array.Examples>>>x=np.sqrt([1+0j,0+1j])>>>x.imagarray([ 0.        ,  0.70710678])>>>x.imag.dtypedtype('float64')", "doc_id": "373d9b5f-db86-4d88-bafe-8cd37109bbec", "embedding": null, "doc_hash": "0a82f93fd1256ffab05d7a52ea78a7936db6df55c66f4590243552f57b9b5c22", "extra_info": null, "node_info": {"start": 0, "end": 247, "_node_type": "1"}, "relationships": {"1": "bdec2c92-1555-4675-a059-de9cb8e83625"}}, "__type__": "1"}, "c4d2ac62-c2a8-42e6-bae1-ffc360fedcee": {"__data__": {"text": "\u3010Name\u3011Numpy\u3010Chapter\u3011ArrayObjects\u3010Section\u3011numpy.ndarray.flat\u3010Content\u3011numpy.ndarray.flat#attributendarray.flat#A 1-D iterator over the array.This is anumpy.flatiterinstance, which acts similarly to, but is not\r\na subclass of, Python\uff82\u2019s built-in iterator object.See alsoflattenReturn a copy of the array collapsed into one dimension.flatiterExamples>>>x=np.arange(1,7).reshape(2,3)>>>xarray([[1, 2, 3],[4, 5, 6]])>>>x.flat[3]4>>>x.Tarray([[1, 4],[2, 5],[3, 6]])>>>x.T.flat[3]5>>>type(x.flat)<class 'numpy.flatiter'>An assignment example:>>>x.flat=3;xarray([[3, 3, 3],[3, 3, 3]])>>>x.flat[[1,4]]=1;xarray([[3, 1, 3],[3, 1, 3]])", "doc_id": "c4d2ac62-c2a8-42e6-bae1-ffc360fedcee", "embedding": null, "doc_hash": "2947e4d2b5d580b1c1a5284c24435733de86521895396ddfeffde32038051e70", "extra_info": null, "node_info": {"start": 0, "end": 623, "_node_type": "1"}, "relationships": {"1": "35092868-f154-4cba-a8a6-a3e976321dcb"}}, "__type__": "1"}, "aa8548b3-2282-47b1-8c3d-b15be6726216": {"__data__": {"text": "\u3010Name\u3011Numpy\u3010Chapter\u3011ArrayObjects\u3010Section\u3011numpy.ndarray.ctypes\u3010Content\u3011numpy.ndarray.ctypes#attributendarray.ctypes#An object to simplify the interaction of the array with the ctypes\r\nmodule.This attribute creates an object that makes it easier to use arrays\r\nwhen calling shared libraries with the ctypes module. The returned\r\nobject has, among others, data, shape, and strides attributes (see\r\nNotes below) which themselves return ctypes objects that can be used\r\nas arguments to a shared library.Parameters:NoneReturns:cPython objectPossessing attributes data, shape, strides, etc.See alsonumpy.ctypeslibNotesBelow are the public attributes of this object which were documented\r\nin \uff82\u201cGuide to NumPy\uff82\u201d (we have omitted undocumented public attributes,\r\nas well as documented private attributes):_ctypes.dataA pointer to the memory area of the array as a Python integer.\r\nThis memory area may contain data that is not aligned, or not in correct\r\nbyte-order. The memory area may not even be writeable. The array\r\nflags and data-type of this array should be respected when passing this\r\nattribute to arbitrary C-code to avoid trouble that can include Python\r\ncrashing. User Beware! The value of this attribute is exactly the same\r\nasself._array_interface_['data'][0].Note that unlikedata_as, a reference will not be kept to the array:\r\ncode likectypes.c_void_p((a+b).ctypes.data)will result in a\r\npointer to a deallocated array, and should be spelt(a+b).ctypes.data_as(ctypes.c_void_p)_ctypes.shape(c_intp*self.ndim): A ctypes array of length self.ndim where\r\nthe basetype is the C-integer corresponding todtype('p')on this\r\nplatform (seec_intp). This base-type could bectypes.c_int,ctypes.c_long, orctypes.c_longlongdepending on\r\nthe platform. The ctypes array contains the shape of\r\nthe underlying array._ctypes.strides(c_intp*self.ndim): A ctypes array of length self.ndim where\r\nthe basetype is the same as for the shape attribute. This ctypes array\r\ncontains the strides information from the underlying array. This strides\r\ninformation is important for showing how many bytes must be jumped to\r\nget to the next element in the array._ctypes.data_as(obj)[source]Return the data pointer cast to a particular c-types object.\r\nFor example, callingself._as_parameter_is equivalent toself.data_as(ctypes.c_void_p). Perhaps you want to use the data as a\r\npointer to a ctypes array of floating-point data:self.data_as(ctypes.POINTER(ctypes.c_double)).The returned pointer will keep a reference to the array._ctypes.shape_as(obj)[source]Return the shape tuple as an array of some other c-types\r\ntype. For example:self.shape_as(ctypes.c_short)._ctypes.strides_as(obj)[source]Return the strides tuple as an array of some other\r\nc-types type. For example:self.strides_as(ctypes.c_longlong).If the ctypes module is not available, then the ctypes attribute\r\nof array objects still returns something useful, but ctypes objects\r\nare not returned and errors may be raised instead. In particular,\r\nthe object will still have theas_parameterattribute which will\r\nreturn an integer equal to the data attribute.Examples>>>importctypes>>>x=np.array([[0,1],[2,3]],dtype=np.int32)>>>xarray([[0, 1],[2, 3]], dtype=int32)>>>x.ctypes.data31962608 # may vary>>>x.ctypes.data_as(ctypes.POINTER(ctypes.c_uint32))<__main__.LP_c_uint object at 0x7ff2fc1fc200> # may", "doc_id": "aa8548b3-2282-47b1-8c3d-b15be6726216", "embedding": null, "doc_hash": "883c8c82e49438a0a0383f9d45420730cf65a3a8304fb192319c0b78c2ce40d6", "extra_info": null, "node_info": {"start": 0, "end": 3334, "_node_type": "1"}, "relationships": {"1": "63dc15fb-3734-4d14-a16e-f8dd810c01ca", "3": "9511f079-c38b-4ce9-a6d2-5adc8dbc686b"}}, "__type__": "1"}, "9511f079-c38b-4ce9-a6d2-5adc8dbc686b": {"__data__": {"text": "the ctypes module is not available, then the ctypes attribute\r\nof array objects still returns something useful, but ctypes objects\r\nare not returned and errors may be raised instead. In particular,\r\nthe object will still have theas_parameterattribute which will\r\nreturn an integer equal to the data attribute.Examples>>>importctypes>>>x=np.array([[0,1],[2,3]],dtype=np.int32)>>>xarray([[0, 1],[2, 3]], dtype=int32)>>>x.ctypes.data31962608 # may vary>>>x.ctypes.data_as(ctypes.POINTER(ctypes.c_uint32))<__main__.LP_c_uint object at 0x7ff2fc1fc200> # may vary>>>x.ctypes.data_as(ctypes.POINTER(ctypes.c_uint32)).contentsc_uint(0)>>>x.ctypes.data_as(ctypes.POINTER(ctypes.c_uint64)).contentsc_ulong(4294967296)>>>x.ctypes.shape<numpy.core._internal.c_long_Array_2 object at 0x7ff2fc1fce60> # may vary>>>x.ctypes.strides<numpy.core._internal.c_long_Array_2 object at 0x7ff2fc1ff320> # may vary", "doc_id": "9511f079-c38b-4ce9-a6d2-5adc8dbc686b", "embedding": null, "doc_hash": "ea4bbef54174ceb80585dc1e9471678d3b3e94545cdb15fec4699d13312a47ab", "extra_info": null, "node_info": {"start": 2782, "end": 3671, "_node_type": "1"}, "relationships": {"1": "63dc15fb-3734-4d14-a16e-f8dd810c01ca", "2": "aa8548b3-2282-47b1-8c3d-b15be6726216"}}, "__type__": "1"}, "6cd8e3d7-f2e8-4701-bc46-c7495f2597eb": {"__data__": {"text": "\u3010Name\u3011Numpy\u3010Chapter\u3011ArrayObjects\u3010Section\u3011numpy.ndarray.item\u3010Content\u3011numpy.ndarray.item#methodndarray.item(*args)#Copy an element of an array to a standard Python scalar and return it.Parameters:*argsArguments (variable number and type)none: in this case, the method only works for arrays\r\nwith one element (a.size == 1), which element is\r\ncopied into a standard Python scalar object and returned.int_type: this argument is interpreted as a flat index into\r\nthe array, specifying which element to copy and return.tuple of int_types: functions as does a single int_type argument,\r\nexcept that the argument is interpreted as an nd-index into the\r\narray.Returns:zStandard Python scalar objectA copy of the specified element of the array as a suitable\r\nPython scalarNotesWhen the data type ofais longdouble or clongdouble, item() returns\r\na scalar array object because there is no available Python scalar that\r\nwould not lose information. Void arrays return a buffer object for item(),\r\nunless fields are defined, in which case a tuple is returned.itemis very similar to a[args], except, instead of an array scalar,\r\na standard Python scalar is returned. This can be useful for speeding up\r\naccess to elements of the array and doing arithmetic on elements of the\r\narray using Python\uff82\u2019s optimized math.Examples>>>np.random.seed(123)>>>x=np.random.randint(9,size=(3,3))>>>xarray([[2, 2, 6],[1, 3, 6],[1, 0, 1]])>>>x.item(3)1>>>x.item(7)0>>>x.item((0,1))2>>>x.item((2,2))1", "doc_id": "6cd8e3d7-f2e8-4701-bc46-c7495f2597eb", "embedding": null, "doc_hash": "e6029e3c4be9ea35aace383bd625c50f9de47a48eae90100dfbe48d95ce2f3d2", "extra_info": null, "node_info": {"start": 0, "end": 1464, "_node_type": "1"}, "relationships": {"1": "a601ade3-10a8-4753-8dc8-b6503bedceb6"}}, "__type__": "1"}, "72dd9bc1-d23d-41f9-aedd-4cc0f9b482b2": {"__data__": {"text": "\u3010Name\u3011Numpy\u3010Chapter\u3011ArrayObjects\u3010Section\u3011numpy.ndarray.tolist\u3010Content\u3011numpy.ndarray.tolist#methodndarray.tolist()#Return the array as ana.ndim-levels deep nested list of Python scalars.Return a copy of the array data as a (nested) Python list.\r\nData items are converted to the nearest compatible builtin Python type, via\r\ntheitemfunction.Ifa.ndimis 0, then since the depth of the nested list is 0, it will\r\nnot be a list at all, but a simple Python scalar.Parameters:noneReturns:yobject, or list of object, or list of list of object, or \uff82\u2026The possibly nested list of array elements.NotesThe array may be recreated viaa=np.array(a.tolist()), although this\r\nmay sometimes lose precision.ExamplesFor a 1D array,a.tolist()is almost the same aslist(a),\r\nexcept thattolistchanges numpy scalars to Python scalars:>>>a=np.uint32([1,2])>>>a_list=list(a)>>>a_list[1, 2]>>>type(a_list[0])<class 'numpy.uint32'>>>>a_tolist=a.tolist()>>>a_tolist[1, 2]>>>type(a_tolist[0])<class 'int'>Additionally, for a 2D array,tolistapplies recursively:>>>a=np.array([[1,2],[3,4]])>>>list(a)[array([1, 2]), array([3, 4])]>>>a.tolist()[[1, 2], [3, 4]]The base case for this recursion is a 0D array:>>>a=np.array(1)>>>list(a)Traceback (most recent call last):...TypeError:iteration over a 0-d array>>>a.tolist()1", "doc_id": "72dd9bc1-d23d-41f9-aedd-4cc0f9b482b2", "embedding": null, "doc_hash": "5f09b857ee35f91b5cf0a2a04d3362e734dc368eb0e4a51011fe2b11384de568", "extra_info": null, "node_info": {"start": 0, "end": 1283, "_node_type": "1"}, "relationships": {"1": "7af121a9-db65-4792-bd53-cc8d4ba2a498"}}, "__type__": "1"}, "75f848a3-996f-48b4-b5a3-9d2ac6c53122": {"__data__": {"text": "\u3010Name\u3011Numpy\u3010Chapter\u3011ArrayObjects\u3010Section\u3011numpy.ndarray.itemset\u3010Content\u3011numpy.ndarray.itemset#methodndarray.itemset(*args)#Insert scalar into an array (scalar is cast to array\uff82\u2019s dtype, if possible)There must be at least 1 argument, and define the last argument\r\nasitem.  Then,a.itemset(*args)is equivalent to but faster\r\nthana[args]=item.  The item should be a scalar value andargsmust select a single item in the arraya.Parameters:*argsArgumentsIf one argument: a scalar, only used in caseais of size 1.\r\nIf two arguments: the last argument is the value to be set\r\nand must be a scalar, the first argument specifies a single array\r\nelement location. It is either an int or a tuple.NotesCompared to indexing syntax,itemsetprovides some speed increase\r\nfor placing a scalar into a particular location in anndarray,\r\nif you must do this.  However, generally this is discouraged:\r\namong other problems, it complicates the appearance of the code.\r\nAlso, when usingitemset(anditem) inside a loop, be sure\r\nto assign the methods to a local variable to avoid the attribute\r\nlook-up at each loop iteration.Examples>>>np.random.seed(123)>>>x=np.random.randint(9,size=(3,3))>>>xarray([[2, 2, 6],[1, 3, 6],[1, 0, 1]])>>>x.itemset(4,0)>>>x.itemset((2,2),9)>>>xarray([[2, 2, 6],[1, 0, 6],[1, 0, 9]])", "doc_id": "75f848a3-996f-48b4-b5a3-9d2ac6c53122", "embedding": null, "doc_hash": "c71d0fa9d209812ac09c8f8190c181f3953653a765cb1ed5b3c291bc9ea0b5a4", "extra_info": null, "node_info": {"start": 0, "end": 1286, "_node_type": "1"}, "relationships": {"1": "97081a5b-b68d-494b-9025-4d79cece4299"}}, "__type__": "1"}, "e16b5424-e9bf-444f-b3ca-5895199913e4": {"__data__": {"text": "\u3010Name\u3011Numpy\u3010Chapter\u3011ArrayObjects\u3010Section\u3011numpy.ndarray.tobytes\u3010Content\u3011numpy.ndarray.tobytes#methodndarray.tobytes(order='C')#Construct Python bytes containing the raw data bytes in the array.Constructs Python bytes showing a copy of the raw contents of\r\ndata memory. The bytes object is produced in C-order by default.\r\nThis behavior is controlled by theorderparameter.New in version 1.9.0.Parameters:order{\uff82\u2018C\uff82\u2019, \uff82\u2018F\uff82\u2019, \uff82\u2018A\uff82\u2019}, optionalControls the memory layout of the bytes object. \uff82\u2018C\uff82\u2019 means C-order,\r\n\uff82\u2018F\uff82\u2019 means F-order, \uff82\u2018A\uff82\u2019 (short forAny) means \uff82\u2018F\uff82\u2019 ifais\r\nFortran contiguous, \uff82\u2018C\uff82\u2019 otherwise. Default is \uff82\u2018C\uff82\u2019.Returns:sbytesPython bytes exhibiting a copy ofa\uff82\u2019s raw data.See alsofrombufferInverse of this operation, construct a 1-dimensional array from Python bytes.Examples>>>x=np.array([[0,1],[2,3]],dtype='<u2')>>>x.tobytes()b'\\x00\\x00\\x01\\x00\\x02\\x00\\x03\\x00'>>>x.tobytes('C')==x.tobytes()True>>>x.tobytes('F')b'\\x00\\x00\\x02\\x00\\x01\\x00\\x03\\x00'", "doc_id": "e16b5424-e9bf-444f-b3ca-5895199913e4", "embedding": null, "doc_hash": "acfc03dc175246463e02fcf60de2c103474a7c48d5aa53a2cc481e6e43b15be0", "extra_info": null, "node_info": {"start": 0, "end": 962, "_node_type": "1"}, "relationships": {"1": "b155e346-db66-45a2-974a-7e1d695a9686"}}, "__type__": "1"}, "afae6699-f49d-40b2-89bb-aecb26ec1b95": {"__data__": {"text": "\u3010Name\u3011Numpy\u3010Chapter\u3011ArrayObjects\u3010Section\u3011numpy.ndarray.astype\u3010Content\u3011numpy.ndarray.astype#methodndarray.astype(dtype,order='K',casting='unsafe',subok=True,copy=True)#Copy of the array, cast to a specified type.Parameters:dtypestr or dtypeTypecode or data-type to which the array is cast.order{\uff82\u2018C\uff82\u2019, \uff82\u2018F\uff82\u2019, \uff82\u2018A\uff82\u2019, \uff82\u2018K\uff82\u2019}, optionalControls the memory layout order of the result.\r\n\uff82\u2018C\uff82\u2019 means C order, \uff82\u2018F\uff82\u2019 means Fortran order, \uff82\u2018A\uff82\u2019\r\nmeans \uff82\u2018F\uff82\u2019 order if all the arrays are Fortran contiguous,\r\n\uff82\u2018C\uff82\u2019 order otherwise, and \uff82\u2018K\uff82\u2019 means as close to the\r\norder the array elements appear in memory as possible.\r\nDefault is \uff82\u2018K\uff82\u2019.casting{\uff82\u2018no\uff82\u2019, \uff82\u2018equiv\uff82\u2019, \uff82\u2018safe\uff82\u2019, \uff82\u2018same_kind\uff82\u2019, \uff82\u2018unsafe\uff82\u2019}, optionalControls what kind of data casting may occur. Defaults to \uff82\u2018unsafe\uff82\u2019\r\nfor backwards compatibility.\uff82\u2018no\uff82\u2019 means the data types should not be cast at all.\uff82\u2018equiv\uff82\u2019 means only byte-order changes are allowed.\uff82\u2018safe\uff82\u2019 means only casts which can preserve values are allowed.\uff82\u2018same_kind\uff82\u2019 means only safe casts or casts within a kind,\r\nlike float64 to float32, are allowed.\uff82\u2018unsafe\uff82\u2019 means any data conversions may be done.subokbool, optionalIf True, then sub-classes will be passed-through (default), otherwise\r\nthe returned array will be forced to be a base-class array.copybool, optionalBy default, astype always returns a newly allocated array. If this\r\nis set to false, and thedtype,order, andsubokrequirements are satisfied, the input array is returned instead\r\nof a copy.Returns:arr_tndarrayUnlesscopyis False and the other conditions for returning the input\r\narray are satisfied (see description forcopyinput parameter),arr_tis a new array of the same shape as the input array, with dtype, order\r\ngiven bydtype,order.Raises:ComplexWarningWhen casting from complex to float or int. To avoid this,\r\none should usea.real.astype(t).NotesChanged in version 1.17.0:Casting between a simple data type and a structured one is possible only\r\nfor \uff82\u201cunsafe\uff82\u201d casting.  Casting to multiple fields is allowed, but\r\ncasting from multiple fields is not.Changed in version 1.9.0:Casting from numeric to string types in \uff82\u2018safe\uff82\u2019 casting mode requires\r\nthat the string dtype length is long enough to store the max\r\ninteger/float value converted.Examples>>>x=np.array([1,2,2.5])>>>xarray([1. ,  2. ,  2.5])>>>x.astype(int)array([1, 2, 2])", "doc_id": "afae6699-f49d-40b2-89bb-aecb26ec1b95", "embedding": null, "doc_hash": "a78000eaa9a3a7b72fd0406ddd22bd29da5a324df0a89d080e1f57b66463685f", "extra_info": null, "node_info": {"start": 0, "end": 2318, "_node_type": "1"}, "relationships": {"1": "fa0c95aa-c091-4712-a6b9-3564adbbf3a9"}}, "__type__": "1"}, "6192a5bd-e2e1-41df-9693-3d31fc0d8d7f": {"__data__": {"text": "\u3010Name\u3011Numpy\u3010Chapter\u3011ArrayObjects\u3010Section\u3011numpy.ndarray.byteswap\u3010Content\u3011numpy.ndarray.byteswap#methodndarray.byteswap(inplace=False)#Swap the bytes of the array elementsToggle between low-endian and big-endian data representation by\r\nreturning a byteswapped array, optionally swapped in-place.\r\nArrays of byte-strings are not swapped. The real and imaginary\r\nparts of a complex number are swapped individually.Parameters:inplacebool, optionalIfTrue, swap bytes in-place, default isFalse.Returns:outndarrayThe byteswapped array. IfinplaceisTrue, this is\r\na view to self.Examples>>>A=np.array([1,256,8755],dtype=np.int16)>>>list(map(hex,A))['0x1', '0x100', '0x2233']>>>A.byteswap(inplace=True)array([  256,     1, 13090], dtype=int16)>>>list(map(hex,A))['0x100', '0x1', '0x3322']Arrays of byte-strings are not swapped>>>A=np.array([b'ceg',b'fac'])>>>A.byteswap()array([b'ceg', b'fac'], dtype='|S3')A.newbyteorder().byteswap()produces an array with the same valuesbut different representation in memory>>>A=np.array([1,2,3])>>>A.view(np.uint8)array([1, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0,0, 0], dtype=uint8)>>>A.newbyteorder().byteswap(inplace=True)array([1, 2, 3])>>>A.view(np.uint8)array([0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0,0, 3], dtype=uint8)", "doc_id": "6192a5bd-e2e1-41df-9693-3d31fc0d8d7f", "embedding": null, "doc_hash": "346e124cc13690d48a672a59a121dc3944206c5c8bb5c288acc427fe6353b1f1", "extra_info": null, "node_info": {"start": 0, "end": 1299, "_node_type": "1"}, "relationships": {"1": "32fa4716-a768-4b62-a558-7efe65246371"}}, "__type__": "1"}, "dc873cc1-be79-4bde-adbb-d2480d61c162": {"__data__": {"text": "\u3010Name\u3011Numpy\u3010Chapter\u3011ArrayObjects\u3010Section\u3011numpy.ndarray.copy\u3010Content\u3011numpy.ndarray.copy#methodndarray.copy(order='C')#Return a copy of the array.Parameters:order{\uff82\u2018C\uff82\u2019, \uff82\u2018F\uff82\u2019, \uff82\u2018A\uff82\u2019, \uff82\u2018K\uff82\u2019}, optionalControls the memory layout of the copy. \uff82\u2018C\uff82\u2019 means C-order,\r\n\uff82\u2018F\uff82\u2019 means F-order, \uff82\u2018A\uff82\u2019 means \uff82\u2018F\uff82\u2019 ifais Fortran contiguous,\r\n\uff82\u2018C\uff82\u2019 otherwise. \uff82\u2018K\uff82\u2019 means match the layout ofaas closely\r\nas possible. (Note that this function andnumpy.copyare very\r\nsimilar but have different default values for their order=\r\narguments, and this function always passes sub-classes through.)See alsonumpy.copySimilar function with different default behaviornumpy.copytoNotesThis function is the preferred method for creating an array copy.  The\r\nfunctionnumpy.copyis similar, but it defaults to using order \uff82\u2018K\uff82\u2019,\r\nand will not pass sub-classes through by default.Examples>>>x=np.array([[1,2,3],[4,5,6]],order='F')>>>y=x.copy()>>>x.fill(0)>>>xarray([[0, 0, 0],[0, 0, 0]])>>>yarray([[1, 2, 3],[4, 5, 6]])>>>y.flags['C_CONTIGUOUS']True", "doc_id": "dc873cc1-be79-4bde-adbb-d2480d61c162", "embedding": null, "doc_hash": "936e33a34c4c805c6e4dab26e50d7b17ad43d1010ad8b9fb69a2ca6b59ca736d", "extra_info": null, "node_info": {"start": 0, "end": 1014, "_node_type": "1"}, "relationships": {"1": "f5db7140-0e96-41df-b9a1-e720f78a40a7"}}, "__type__": "1"}, "494137b3-015d-48fe-ba93-c87ddfb392d9": {"__data__": {"text": "\u3010Name\u3011Numpy\u3010Chapter\u3011ArrayObjects\u3010Section\u3011numpy.ndarray.view\u3010Content\u3011numpy.ndarray.view#methodndarray.view([dtype][,type])#New view of array with the same data.NotePassing None fordtypeis different from omitting the parameter,\r\nsince the former invokesdtype(None)which is an alias fordtype('float_').Parameters:dtypedata-type or ndarray sub-class, optionalData-type descriptor of the returned view, e.g., float32 or int16.\r\nOmitting it results in the view having the same data-type asa.\r\nThis argument can also be specified as an ndarray sub-class, which\r\nthen specifies the type of the returned object (this is equivalent to\r\nsetting thetypeparameter).typePython type, optionalType of the returned view, e.g., ndarray or matrix.  Again, omission\r\nof the parameter results in type preservation.Notesa.view()is used two different ways:a.view(some_dtype)ora.view(dtype=some_dtype)constructs a view\r\nof the array\uff82\u2019s memory with a different data-type.  This can cause a\r\nreinterpretation of the bytes of memory.a.view(ndarray_subclass)ora.view(type=ndarray_subclass)just\r\nreturns an instance ofndarray_subclassthat looks at the same array\r\n(same shape, dtype, etc.)  This does not cause a reinterpretation of the\r\nmemory.Fora.view(some_dtype), ifsome_dtypehas a different number of\r\nbytes per entry than the previous dtype (for example, converting a regular\r\narray to a structured array), then the last axis ofamust be\r\ncontiguous. This axis will be resized in the result.Changed in version 1.23.0:Only the last axis needs to be contiguous. Previously, the entire array\r\nhad to be C-contiguous.Examples>>>x=np.array([(1,2)],dtype=[('a',np.int8),('b',np.int8)])Viewing array data using a different type and dtype:>>>y=x.view(dtype=np.int16,type=np.matrix)>>>ymatrix([[513]], dtype=int16)>>>print(type(y))<class 'numpy.matrix'>Creating a view on a structured array so it can be used in calculations>>>x=np.array([(1,2),(3,4)],dtype=[('a',np.int8),('b',np.int8)])>>>xv=x.view(dtype=np.int8).reshape(-1,2)>>>xvarray([[1, 2],[3, 4]], dtype=int8)>>>xv.mean(0)array([2.,  3.])Making changes to the view changes the underlying array>>>xv[0,1]=20>>>xarray([(1, 20), (3,  4)], dtype=[('a', 'i1'), ('b', 'i1')])Using a view to convert an array to a recarray:>>>z=x.view(np.recarray)>>>z.aarray([1, 3], dtype=int8)Views share data:>>>x[0]=(9,10)>>>z[0](9, 10)Views that change the dtype size (bytes per entry) should normally be\r\navoided on arrays defined by slices, transposes, fortran-ordering, etc.:>>>x=np.array([[1,2,3],[4,5,6]],dtype=np.int16)>>>y=x[:,::2]>>>yarray([[1, 3],[4, 6]], dtype=int16)>>>y.view(dtype=[('width',np.int16),('length',np.int16)])Traceback (most recent call last):...ValueError:To change to a dtype of a different size, the last axis must be contiguous>>>z=y.copy()>>>z.view(dtype=[('width',np.int16),('length',np.int16)])array([[(1, 3)],[(4, 6)]], dtype=[('width', '<i2'), ('length',", "doc_id": "494137b3-015d-48fe-ba93-c87ddfb392d9", "embedding": null, "doc_hash": "8e64ec406729b3b600ef18f9d22b986dad5c7e85212dd1247b95bb67e424c278", "extra_info": null, "node_info": {"start": 0, "end": 2895, "_node_type": "1"}, "relationships": {"1": "2d9b72c2-0702-480f-9753-fdea12a89a69", "3": "6075597c-61c0-4b87-828d-56a615d5e265"}}, "__type__": "1"}, "6075597c-61c0-4b87-828d-56a615d5e265": {"__data__": {"text": "be\r\navoided on arrays defined by slices, transposes, fortran-ordering, etc.:>>>x=np.array([[1,2,3],[4,5,6]],dtype=np.int16)>>>y=x[:,::2]>>>yarray([[1, 3],[4, 6]], dtype=int16)>>>y.view(dtype=[('width',np.int16),('length',np.int16)])Traceback (most recent call last):...ValueError:To change to a dtype of a different size, the last axis must be contiguous>>>z=y.copy()>>>z.view(dtype=[('width',np.int16),('length',np.int16)])array([[(1, 3)],[(4, 6)]], dtype=[('width', '<i2'), ('length', '<i2')])However, views that change dtype are totally fine for arrays with a\r\ncontiguous last axis, even if the rest of the axes are not C-contiguous:>>>x=np.arange(2*3*4,dtype=np.int8).reshape(2,3,4)>>>x.transpose(1,0,2).view(np.int16)array([[[ 256,  770],[3340, 3854]],[[1284, 1798],[4368, 4882]],[[2312, 2826],[5396, 5910]]], dtype=int16)", "doc_id": "6075597c-61c0-4b87-828d-56a615d5e265", "embedding": null, "doc_hash": "3654bd1f42705f6807e2bba717166e1ed7bc7dc7a1739d3707a625de4bb230ad", "extra_info": null, "node_info": {"start": 2409, "end": 3236, "_node_type": "1"}, "relationships": {"1": "2d9b72c2-0702-480f-9753-fdea12a89a69", "2": "494137b3-015d-48fe-ba93-c87ddfb392d9"}}, "__type__": "1"}, "9e784b8e-df49-4b6c-87ab-c4414b076207": {"__data__": {"text": "\u3010Name\u3011Numpy\u3010Chapter\u3011ArrayObjects\u3010Section\u3011numpy.ndarray.reshape\u3010Content\u3011numpy.ndarray.reshape#methodndarray.reshape(shape,order='C')#Returns an array containing the same data with a new shape.Refer tonumpy.reshapefor full documentation.See alsonumpy.reshapeequivalent functionNotesUnlike the free functionnumpy.reshape, this method onndarrayallows\r\nthe elements of the shape parameter to be passed in as separate arguments.\r\nFor example,a.reshape(10,11)is equivalent toa.reshape((10,11)).", "doc_id": "9e784b8e-df49-4b6c-87ab-c4414b076207", "embedding": null, "doc_hash": "28bf3d8d419b39f48e21b9e3671ae2f1d3d763e222ff934973d4d72593748701", "extra_info": null, "node_info": {"start": 0, "end": 487, "_node_type": "1"}, "relationships": {"1": "46d69053-b4ef-4ef9-8f9e-0dd7f46300af"}}, "__type__": "1"}, "982d0c34-496e-47fd-ac15-2745b9d4a128": {"__data__": {"text": "\u3010Name\u3011Numpy\u3010Chapter\u3011ArrayObjects\u3010Section\u3011numpy.ndarray.transpose\u3010Content\u3011numpy.ndarray.transpose#methodndarray.transpose(*axes)#Returns a view of the array with axes transposed.Refer tonumpy.transposefor full documentation.Parameters:axesNone, tuple of ints, ornintsNone or no argument: reverses the order of the axes.tuple of ints:iin thej-th place in the tuple means that the\r\narray\uff82\u2019si-th axis becomes the transposed array\uff82\u2019sj-th axis.nints: same as an n-tuple of the same ints (this form is\r\nintended simply as a \uff82\u201cconvenience\uff82\u201d alternative to the tuple form).Returns:pndarrayView of the array with its axes suitably permuted.See alsotransposeEquivalent function.ndarray.TArray property returning the array transposed.ndarray.reshapeGive a new shape to an array without changing its data.Examples>>>a=np.array([[1,2],[3,4]])>>>aarray([[1, 2],[3, 4]])>>>a.transpose()array([[1, 3],[2, 4]])>>>a.transpose((1,0))array([[1, 3],[2, 4]])>>>a.transpose(1,0)array([[1, 3],[2, 4]])>>>a=np.array([1,2,3,4])>>>aarray([1, 2, 3, 4])>>>a.transpose()array([1, 2, 3, 4])", "doc_id": "982d0c34-496e-47fd-ac15-2745b9d4a128", "embedding": null, "doc_hash": "8e0d36e46543b1524d43b118806dddb312b0f9480d54fa71b423abd40e0f47b1", "extra_info": null, "node_info": {"start": 0, "end": 1058, "_node_type": "1"}, "relationships": {"1": "8a43d83f-a1e4-4480-8069-ff88977fa8d1"}}, "__type__": "1"}, "51671c6e-c20f-4514-b6f4-cc051fa53098": {"__data__": {"text": "\u3010Name\u3011Numpy\u3010Chapter\u3011ArrayObjects\u3010Section\u3011numpy.ndarray.swapaxes\u3010Content\u3011numpy.ndarray.swapaxes#methodndarray.swapaxes(axis1,axis2)#Return a view of the array withaxis1andaxis2interchanged.Refer tonumpy.swapaxesfor full documentation.See alsonumpy.swapaxesequivalent function", "doc_id": "51671c6e-c20f-4514-b6f4-cc051fa53098", "embedding": null, "doc_hash": "f7b844a464029c7b917f59278972bad7beca33b6574e5b68ea5044246429bd12", "extra_info": null, "node_info": {"start": 0, "end": 274, "_node_type": "1"}, "relationships": {"1": "80300de4-041a-45d5-8e73-fcb98a962e63"}}, "__type__": "1"}, "76c2a4f1-dee6-4945-8a18-4b1105ff967f": {"__data__": {"text": "\u3010Name\u3011Numpy\u3010Chapter\u3011ArrayObjects\u3010Section\u3011numpy.ndarray.flatten\u3010Content\u3011numpy.ndarray.flatten#methodndarray.flatten(order='C')#Return a copy of the array collapsed into one dimension.Parameters:order{\uff82\u2018C\uff82\u2019, \uff82\u2018F\uff82\u2019, \uff82\u2018A\uff82\u2019, \uff82\u2018K\uff82\u2019}, optional\uff82\u2018C\uff82\u2019 means to flatten in row-major (C-style) order.\r\n\uff82\u2018F\uff82\u2019 means to flatten in column-major (Fortran-\r\nstyle) order. \uff82\u2018A\uff82\u2019 means to flatten in column-major\r\norder ifais Fortrancontiguousin memory,\r\nrow-major order otherwise. \uff82\u2018K\uff82\u2019 means to flattenain the order the elements occur in memory.\r\nThe default is \uff82\u2018C\uff82\u2019.Returns:yndarrayA copy of the input array, flattened to one dimension.See alsoravelReturn a flattened array.flatA 1-D flat iterator over the array.Examples>>>a=np.array([[1,2],[3,4]])>>>a.flatten()array([1, 2, 3, 4])>>>a.flatten('F')array([1, 3, 2, 4])", "doc_id": "76c2a4f1-dee6-4945-8a18-4b1105ff967f", "embedding": null, "doc_hash": "1656ba48f21543dd0515895ddf421e1c48e63509a85a8d79e0d47b7822ae8758", "extra_info": null, "node_info": {"start": 0, "end": 802, "_node_type": "1"}, "relationships": {"1": "3ab9740e-d425-4b5d-b448-8a8250e97899"}}, "__type__": "1"}, "c4a65099-7210-4556-96e5-1a7a5c8df5c6": {"__data__": {"text": "\u3010Name\u3011Numpy\u3010Chapter\u3011ArrayObjects\u3010Section\u3011numpy.ndarray.ravel\u3010Content\u3011numpy.ndarray.ravel#methodndarray.ravel([order])#Return a flattened array.Refer tonumpy.ravelfor full documentation.See alsonumpy.ravelequivalent functionndarray.flata flat iterator on the array.", "doc_id": "c4a65099-7210-4556-96e5-1a7a5c8df5c6", "embedding": null, "doc_hash": "7c27d332abcd97816f3a97e29d0201afd38035cffb9ec38de2a13b938cbc7540", "extra_info": null, "node_info": {"start": 0, "end": 264, "_node_type": "1"}, "relationships": {"1": "5fbaf00d-9739-4abd-8a35-be4ce4d89b1b"}}, "__type__": "1"}, "f5778b6c-1ce4-4409-9675-61ae1cf7d229": {"__data__": {"text": "\u3010Name\u3011Numpy\u3010Chapter\u3011ArrayObjects\u3010Section\u3011numpy.ndarray.squeeze\u3010Content\u3011numpy.ndarray.squeeze#methodndarray.squeeze(axis=None)#Remove axes of length one froma.Refer tonumpy.squeezefor full documentation.See alsonumpy.squeezeequivalent function", "doc_id": "f5778b6c-1ce4-4409-9675-61ae1cf7d229", "embedding": null, "doc_hash": "95f755622881fcafa0f491a880facd0de7b9a999c3e1d9a3162d27697917ec44", "extra_info": null, "node_info": {"start": 0, "end": 242, "_node_type": "1"}, "relationships": {"1": "e6d57768-fdbe-4636-8d17-597f5c5a1fa1"}}, "__type__": "1"}, "45d62107-b4c0-4e08-bdf8-93a4771a7bea": {"__data__": {"text": "\u3010Name\u3011Numpy\u3010Chapter\u3011ArrayObjects\u3010Section\u3011numpy.ndarray.max\u3010Content\u3011numpy.ndarray.max#methodndarray.max(axis=None,out=None,keepdims=False,initial=<novalue>,where=True)#Return the maximum along a given axis.Refer tonumpy.amaxfor full documentation.See alsonumpy.amaxequivalent function", "doc_id": "45d62107-b4c0-4e08-bdf8-93a4771a7bea", "embedding": null, "doc_hash": "eb03ff25957cc04294f58ad8522947c78d2bdd227b0f03b534f4e6da052db504", "extra_info": null, "node_info": {"start": 0, "end": 283, "_node_type": "1"}, "relationships": {"1": "503b309c-25dc-421f-83cf-a16b872b0f27"}}, "__type__": "1"}, "cbf6be02-d855-4ed0-a704-f63066394083": {"__data__": {"text": "\u3010Name\u3011Numpy\u3010Chapter\u3011ArrayObjects\u3010Section\u3011numpy.ndarray.argmax\u3010Content\u3011numpy.ndarray.argmax#methodndarray.argmax(axis=None,out=None,*,keepdims=False)#Return indices of the maximum values along the given axis.Refer tonumpy.argmaxfor full documentation.See alsonumpy.argmaxequivalent function", "doc_id": "cbf6be02-d855-4ed0-a704-f63066394083", "embedding": null, "doc_hash": "a0a806a429162891045ab82d07c5b39f226d1a51e7508cc3d0872d16aa4de7dd", "extra_info": null, "node_info": {"start": 0, "end": 289, "_node_type": "1"}, "relationships": {"1": "227e0104-05ef-444a-a487-c94e2fad5bc1"}}, "__type__": "1"}, "a33048b8-6849-4a88-becb-b894ba6427c8": {"__data__": {"text": "\u3010Name\u3011Numpy\u3010Chapter\u3011ArrayObjects\u3010Section\u3011numpy.ndarray.min\u3010Content\u3011numpy.ndarray.min#methodndarray.min(axis=None,out=None,keepdims=False,initial=<novalue>,where=True)#Return the minimum along a given axis.Refer tonumpy.aminfor full documentation.See alsonumpy.aminequivalent function", "doc_id": "a33048b8-6849-4a88-becb-b894ba6427c8", "embedding": null, "doc_hash": "44792bf72ca32ef661a0459a7bcf89de17dba01bebc4b1d169d04e71c77992eb", "extra_info": null, "node_info": {"start": 0, "end": 283, "_node_type": "1"}, "relationships": {"1": "e7895e8d-4ee1-4976-9ef9-b70019e35da4"}}, "__type__": "1"}, "214c6da0-8131-43a3-9847-11180fbee728": {"__data__": {"text": "\u3010Name\u3011Numpy\u3010Chapter\u3011ArrayObjects\u3010Section\u3011numpy.ndarray.argmin\u3010Content\u3011numpy.ndarray.argmin#methodndarray.argmin(axis=None,out=None,*,keepdims=False)#Return indices of the minimum values along the given axis.Refer tonumpy.argminfor detailed documentation.See alsonumpy.argminequivalent function", "doc_id": "214c6da0-8131-43a3-9847-11180fbee728", "embedding": null, "doc_hash": "936259d64102479d8c77551f06c070450fb113c24a81c3b7998c64b7ea6133fc", "extra_info": null, "node_info": {"start": 0, "end": 293, "_node_type": "1"}, "relationships": {"1": "48ddf893-4049-4295-b20c-fd19d0fee613"}}, "__type__": "1"}, "0da139dc-3384-4f90-bddd-509bd0be31e0": {"__data__": {"text": "\u3010Name\u3011Numpy\u3010Chapter\u3011ArrayObjects\u3010Section\u3011numpy.ndarray.sum\u3010Content\u3011numpy.ndarray.sum#methodndarray.sum(axis=None,dtype=None,out=None,keepdims=False,initial=0,where=True)#Return the sum of the array elements over the given axis.Refer tonumpy.sumfor full documentation.See alsonumpy.sumequivalent function", "doc_id": "0da139dc-3384-4f90-bddd-509bd0be31e0", "embedding": null, "doc_hash": "de4afdf0d734d99f8f36e0f8e34884f7f4f3dc7399e89e740d506f38867ea269", "extra_info": null, "node_info": {"start": 0, "end": 303, "_node_type": "1"}, "relationships": {"1": "916cf07d-6ac2-4d7b-b09e-e19a94cd9000"}}, "__type__": "1"}, "e5eeb34e-6a96-42c7-92c4-dfbe8bc9e2bc": {"__data__": {"text": "\u3010Name\u3011Numpy\u3010Chapter\u3011ArrayObjects\u3010Section\u3011numpy.ndarray.cumsum\u3010Content\u3011numpy.ndarray.cumsum#methodndarray.cumsum(axis=None,dtype=None,out=None)#Return the cumulative sum of the elements along the given axis.Refer tonumpy.cumsumfor full documentation.See alsonumpy.cumsumequivalent function", "doc_id": "e5eeb34e-6a96-42c7-92c4-dfbe8bc9e2bc", "embedding": null, "doc_hash": "e9c08a51792ec22a9352e034796690249adab9109b64ba8c7718cbea8f2a4c36", "extra_info": null, "node_info": {"start": 0, "end": 288, "_node_type": "1"}, "relationships": {"1": "b1d98bfc-bebc-4ffa-8e87-501a771a2eb5"}}, "__type__": "1"}, "8f4aee17-6659-45d0-86c1-299163849adb": {"__data__": {"text": "\u3010Name\u3011Numpy\u3010Chapter\u3011ArrayObjects\u3010Section\u3011numpy.ndarray.mean\u3010Content\u3011numpy.ndarray.mean#methodndarray.mean(axis=None,dtype=None,out=None,keepdims=False,*,where=True)#Returns the average of the array elements along given axis.Refer tonumpy.meanfor full documentation.See alsonumpy.meanequivalent function", "doc_id": "8f4aee17-6659-45d0-86c1-299163849adb", "embedding": null, "doc_hash": "e2d47f3c921d3e0f015ad1e2ddb2244b2d37282b750d53662cd4cf2ec0b68740", "extra_info": null, "node_info": {"start": 0, "end": 302, "_node_type": "1"}, "relationships": {"1": "149fffea-987c-479d-849c-7fe95b1e60e0"}}, "__type__": "1"}, "3fa6e99f-53d6-4dec-97ed-e5dbcc6a89be": {"__data__": {"text": "\u3010Name\u3011Numpy\u3010Chapter\u3011ArrayObjects\u3010Section\u3011numpy.ndarray.var\u3010Content\u3011numpy.ndarray.var#methodndarray.var(axis=None,dtype=None,out=None,ddof=0,keepdims=False,*,where=True)#Returns the variance of the array elements, along given axis.Refer tonumpy.varfor full documentation.See alsonumpy.varequivalent function", "doc_id": "3fa6e99f-53d6-4dec-97ed-e5dbcc6a89be", "embedding": null, "doc_hash": "579253a7ac905f5e7eaade0a5b62eb741107a089ddeb430bf4cbdef526c374b2", "extra_info": null, "node_info": {"start": 0, "end": 306, "_node_type": "1"}, "relationships": {"1": "7ba36a0c-7d9b-4723-bf4d-c73367940df9"}}, "__type__": "1"}, "77045b52-8e1e-43a0-8854-913f3df3383d": {"__data__": {"text": "\u3010Name\u3011Numpy\u3010Chapter\u3011ArrayObjects\u3010Section\u3011numpy.ndarray.std\u3010Content\u3011numpy.ndarray.std#methodndarray.std(axis=None,dtype=None,out=None,ddof=0,keepdims=False,*,where=True)#Returns the standard deviation of the array elements along given axis.Refer tonumpy.stdfor full documentation.See alsonumpy.stdequivalent function", "doc_id": "77045b52-8e1e-43a0-8854-913f3df3383d", "embedding": null, "doc_hash": "c639f482e39176c8d853eed3c2ccc02b78d72ff39e0d49df01441b0078d27d17", "extra_info": null, "node_info": {"start": 0, "end": 315, "_node_type": "1"}, "relationships": {"1": "f74b98ca-137b-4804-bb5e-e46e634cd092"}}, "__type__": "1"}, "b9e0905e-58f3-47a6-9313-9328f9912c39": {"__data__": {"text": "\u3010Name\u3011Numpy\u3010Chapter\u3011ArrayObjects\u3010Section\u3011numpy.ndarray.prod\u3010Content\u3011numpy.ndarray.prod#methodndarray.prod(axis=None,dtype=None,out=None,keepdims=False,initial=1,where=True)#Return the product of the array elements over the given axisRefer tonumpy.prodfor full documentation.See alsonumpy.prodequivalent function", "doc_id": "b9e0905e-58f3-47a6-9313-9328f9912c39", "embedding": null, "doc_hash": "d1c297e04308d30523640231f882c5fdb445b25e66eab0c453851fcc064ae7d3", "extra_info": null, "node_info": {"start": 0, "end": 311, "_node_type": "1"}, "relationships": {"1": "6b6a7f17-862b-4598-9403-f6dfb69bbe8b"}}, "__type__": "1"}, "a2ac0205-0ae9-489c-9e64-83881dd3f683": {"__data__": {"text": "\u3010Name\u3011Numpy\u3010Chapter\u3011ArrayObjects\u3010Section\u3011numpy.ndarray.cumprod\u3010Content\u3011numpy.ndarray.cumprod#methodndarray.cumprod(axis=None,dtype=None,out=None)#Return the cumulative product of the elements along the given axis.Refer tonumpy.cumprodfor full documentation.See alsonumpy.cumprodequivalent function", "doc_id": "a2ac0205-0ae9-489c-9e64-83881dd3f683", "embedding": null, "doc_hash": "7a6b45dfa4881d9a7e1ab2c75687fa267e36abffa0e135524901d8ebf0e09a32", "extra_info": null, "node_info": {"start": 0, "end": 297, "_node_type": "1"}, "relationships": {"1": "73326acf-0c3d-4dd0-9858-1f0172816385"}}, "__type__": "1"}, "e591a98f-9ff1-4283-96d7-418a881c1d46": {"__data__": {"text": "\u3010Name\u3011Numpy\u3010Chapter\u3011ArrayObjects\u3010Section\u3011numpy.ndarray.all\u3010Content\u3011numpy.ndarray.all#methodndarray.all(axis=None,out=None,keepdims=False,*,where=True)#Returns True if all elements evaluate to True.Refer tonumpy.allfor full documentation.See alsonumpy.allequivalent function", "doc_id": "e591a98f-9ff1-4283-96d7-418a881c1d46", "embedding": null, "doc_hash": "9df2ea4059f94b29cfe2d2a6959c81961da1a9db9986d0d28f82549882dbc5a4", "extra_info": null, "node_info": {"start": 0, "end": 273, "_node_type": "1"}, "relationships": {"1": "d354ad06-ca4e-422c-a095-f0948c2b89be"}}, "__type__": "1"}, "19f4a5bf-691f-42d3-938b-4dfbb1890430": {"__data__": {"text": "\u3010Name\u3011Numpy\u3010Chapter\u3011ArrayObjects\u3010Section\u3011numpy.ndarray.any\u3010Content\u3011numpy.ndarray.any#methodndarray.any(axis=None,out=None,keepdims=False,*,where=True)#Returns True if any of the elements ofaevaluate to True.Refer tonumpy.anyfor full documentation.See alsonumpy.anyequivalent function", "doc_id": "19f4a5bf-691f-42d3-938b-4dfbb1890430", "embedding": null, "doc_hash": "0f9aed9facb52f40bd43b69081fa4380647c2e95b3d1f9ee4d53b6a6f7856723", "extra_info": null, "node_info": {"start": 0, "end": 283, "_node_type": "1"}, "relationships": {"1": "534492ad-f75a-4ebf-b747-88f20137d105"}}, "__type__": "1"}, "84d2e2c2-5745-4a26-9690-b73398aede45": {"__data__": {"text": "\u3010Name\u3011Numpy\u3010Chapter\u3011Universal functions\u3010Section\u3011numpy.ufunc.__call__\u3010Content\u3011numpy.ufunc.__call__#methodufunc.__call__(*args,**kwargs)#Call self as a function.", "doc_id": "84d2e2c2-5745-4a26-9690-b73398aede45", "embedding": null, "doc_hash": "04b4dfbdc879417acfd198ed712918b57d932af58ec9645093e64d52c61c6962", "extra_info": null, "node_info": {"start": 0, "end": 159, "_node_type": "1"}, "relationships": {"1": "0518ba39-6f47-4567-94ac-84defa1850c0"}}, "__type__": "1"}, "f619f073-2ca4-43d9-9f66-d61ab980c132": {"__data__": {"text": "\u3010Name\u3011Numpy\u3010Chapter\u3011Universal functions\u3010Section\u3011numpy.ufunc.accumulate\u3010Content\u3011numpy.ufunc.accumulate#methodufunc.accumulate(array,axis=0,dtype=None,out=None)#Accumulate the result of applying the operator to all elements.For a one-dimensional array, accumulate produces results equivalent to:r=np.empty(len(A))t=op.identity# op = the ufunc being applied to A's  elementsforiinrange(len(A)):t=op(t,A[i])r[i]=treturnrFor example, add.accumulate() is equivalent to np.cumsum().For a multi-dimensional array, accumulate is applied along only one\r\naxis (axis zero by default; see Examples below) so repeated use is\r\nnecessary if one wants to accumulate over multiple axes.Parameters:arrayarray_likeThe array to act on.axisint, optionalThe axis along which to apply the accumulation; default is zero.dtypedata-type code, optionalThe data-type used to represent the intermediate results. Defaults\r\nto the data-type of the output array if such is provided, or the\r\ndata-type of the input array if no output array is provided.outndarray, None, or tuple of ndarray and None, optionalA location into which the result is stored. If not provided or None,\r\na freshly-allocated array is returned. For consistency withufunc.__call__, if given as a keyword, this may be wrapped in a\r\n1-element tuple.Changed in version 1.13.0:Tuples are allowed for keyword argument.Returns:rndarrayThe accumulated values. Ifoutwas supplied,ris a reference toout.Examples1-D array examples:>>>np.add.accumulate([2,3,5])array([ 2,  5, 10])>>>np.multiply.accumulate([2,3,5])array([ 2,  6, 30])2-D array examples:>>>I=np.eye(2)>>>Iarray([[1.,  0.],[0.,  1.]])Accumulate along axis 0 (rows), down columns:>>>np.add.accumulate(I,0)array([[1.,  0.],[1.,  1.]])>>>np.add.accumulate(I)# no axis specified = axis zeroarray([[1.,  0.],[1.,  1.]])Accumulate along axis 1 (columns), through rows:>>>np.add.accumulate(I,1)array([[1.,  1.],[0.,  1.]])", "doc_id": "f619f073-2ca4-43d9-9f66-d61ab980c132", "embedding": null, "doc_hash": "ca3093290ce692f3cbb41b37b9fbafde04c9a0ad32093af1795590f1041f7642", "extra_info": null, "node_info": {"start": 0, "end": 1904, "_node_type": "1"}, "relationships": {"1": "7d86da09-d0cb-4fec-8e04-cdbfaa31b42d"}}, "__type__": "1"}, "e59b29ca-9ba4-4028-8b01-bdf872f69f71": {"__data__": {"text": "\u3010Name\u3011Numpy\u3010Chapter\u3011Universal functions\u3010Section\u3011numpy.ufunc.at\u3010Content\u3011numpy.ufunc.at#methodufunc.at(a,indices,b=None,/)#Performs unbuffered in place operation on operand \uff82\u2018a\uff82\u2019 for elements\r\nspecified by \uff82\u2018indices\uff82\u2019. For addition ufunc, this method is equivalent toa[indices]+=b, except that results are accumulated for elements that\r\nare indexed more than once. For example,a[[0,0]]+=1will only\r\nincrement the first element once because of buffering, whereasadd.at(a,[0,0],1)will increment the first element twice.New in version 1.8.0.Parameters:aarray_likeThe array to perform in place operation on.indicesarray_like or tupleArray like index object or slice object for indexing into first\r\noperand. If first operand has multiple dimensions, indices can be a\r\ntuple of array like index objects or slice objects.barray_likeSecond operand for ufuncs requiring two operands. Operand must be\r\nbroadcastable over first operand after indexing or slicing.ExamplesSet items 0 and 1 to their negative values:>>>a=np.array([1,2,3,4])>>>np.negative.at(a,[0,1])>>>aarray([-1, -2,  3,  4])Increment items 0 and 1, and increment item 2 twice:>>>a=np.array([1,2,3,4])>>>np.add.at(a,[0,1,2,2],1)>>>aarray([2, 3, 5, 4])Add items 0 and 1 in first array to second array,\r\nand store results in first array:>>>a=np.array([1,2,3,4])>>>b=np.array([1,2])>>>np.add.at(a,[0,1],b)>>>aarray([2, 4, 3, 4])", "doc_id": "e59b29ca-9ba4-4028-8b01-bdf872f69f71", "embedding": null, "doc_hash": "9cb17cf93f092521ced7a23f5638d397af3c12e560dd0ddded43b5d8d1188a24", "extra_info": null, "node_info": {"start": 0, "end": 1377, "_node_type": "1"}, "relationships": {"1": "5aeec8d8-28f7-4747-9d68-b7efaa1fbc67"}}, "__type__": "1"}, "569c2a72-7e1c-4922-a9ca-200d25cd14ee": {"__data__": {"text": "\u3010Name\u3011Numpy\u3010Chapter\u3011Universal functions\u3010Section\u3011numpy.ufunc.outer\u3010Content\u3011numpy.ufunc.outer#methodufunc.outer(A,B,/,**kwargs)#Apply the ufuncopto all pairs (a, b) with a inAand b inB.LetM=A.ndim,N=B.ndim. Then the result,C, ofop.outer(A,B)is an array of dimension M + N such that:\\[C[i_0, ..., i_{M-1}, j_0, ..., j_{N-1}] =\r\nop(A[i_0, ..., i_{M-1}], B[j_0, ..., j_{N-1}])\\]ForAandBone-dimensional, this is equivalent to:r=empty(len(A),len(B))foriinrange(len(A)):forjinrange(len(B)):r[i,j]=op(A[i],B[j])# op = ufunc in questionParameters:Aarray_likeFirst arrayBarray_likeSecond arraykwargsanyArguments to pass on to the ufunc. Typicallydtypeorout.\r\nSeeufuncfor a comprehensive overview of all available arguments.Returns:rndarrayOutput arraySee alsonumpy.outerA less powerful version ofnp.multiply.outerthatravels all inputs to 1D. This exists primarily for compatibility with old code.tensordotnp.tensordot(a,b,axes=((),()))andnp.multiply.outer(a,b)behave same for all dimensions of a and b.Examples>>>np.multiply.outer([1,2,3],[4,5,6])array([[ 4,  5,  6],[ 8, 10, 12],[12, 15, 18]])A multi-dimensional example:>>>A=np.array([[1,2,3],[4,5,6]])>>>A.shape(2, 3)>>>B=np.array([[1,2,3,4]])>>>B.shape(1, 4)>>>C=np.multiply.outer(A,B)>>>C.shape;C(2, 3, 1, 4)array([[[[ 1,  2,  3,  4]],[[ 2,  4,  6,  8]],[[ 3,  6,  9, 12]]],[[[ 4,  8, 12, 16]],[[ 5, 10, 15, 20]],[[ 6, 12, 18, 24]]]])", "doc_id": "569c2a72-7e1c-4922-a9ca-200d25cd14ee", "embedding": null, "doc_hash": "5af5fe83bef6aaa33261f3748aa480daa226eec2946c80537aeaab76485a388a", "extra_info": null, "node_info": {"start": 0, "end": 1378, "_node_type": "1"}, "relationships": {"1": "b1768e30-a7ae-45bb-b295-ef25be778a43"}}, "__type__": "1"}, "ffa6cef8-5428-4f5f-a0a1-4b66d88b407c": {"__data__": {"text": "\u3010Name\u3011Numpy\u3010Chapter\u3011Universal functions\u3010Section\u3011numpy.ufunc.reduce\u3010Content\u3011numpy.ufunc.reduce#methodufunc.reduce(array,axis=0,dtype=None,out=None,keepdims=False,initial=<novalue>,where=True)#Reducesarray\uff82\u2019s dimension by one, by applying ufunc along one axis.Let\\(array.shape = (N_0, ..., N_i, ..., N_{M-1})\\).  Then\\(ufunc.reduce(array, axis=i)[k_0, ..,k_{i-1}, k_{i+1}, .., k_{M-1}]\\)=\r\nthe result of iteratingjover\\(range(N_i)\\), cumulatively applying\r\nufunc to each\\(array[k_0, ..,k_{i-1}, j, k_{i+1}, .., k_{M-1}]\\).\r\nFor a one-dimensional array, reduce produces results equivalent to:r=op.identity# op = ufuncforiinrange(len(A)):r=op(r,A[i])returnrFor example, add.reduce() is equivalent to sum().Parameters:arrayarray_likeThe array to act on.axisNone or int or tuple of ints, optionalAxis or axes along which a reduction is performed.\r\nThe default (axis= 0) is perform a reduction over the first\r\ndimension of the input array.axismay be negative, in\r\nwhich case it counts from the last to the first axis.New in version 1.7.0.If this is None, a reduction is performed over all the axes.\r\nIf this is a tuple of ints, a reduction is performed on multiple\r\naxes, instead of a single axis or all the axes as before.For operations which are either not commutative or not associative,\r\ndoing a reduction over multiple axes is not well-defined. The\r\nufuncs do not currently raise an exception in this case, but will\r\nlikely do so in the future.dtypedata-type code, optionalThe type used to represent the intermediate results. Defaults\r\nto the data-type of the output array if this is provided, or\r\nthe data-type of the input array if no output array is provided.outndarray, None, or tuple of ndarray and None, optionalA location into which the result is stored. If not provided or None,\r\na freshly-allocated array is returned. For consistency withufunc.__call__, if given as a keyword, this may be wrapped in a\r\n1-element tuple.Changed in version 1.13.0:Tuples are allowed for keyword argument.keepdimsbool, optionalIf this is set to True, the axes which are reduced are left\r\nin the result as dimensions with size one. With this option,\r\nthe result will broadcast correctly against the originalarray.New in version 1.7.0.initialscalar, optionalThe value with which to start the reduction.\r\nIf the ufunc has no identity or the dtype is object, this defaults\r\nto None - otherwise it defaults to ufunc.identity.\r\nIfNoneis given, the first element of the reduction is used,\r\nand an error is thrown if the reduction is empty.New in version 1.15.0.wherearray_like of bool, optionalA boolean array which is broadcasted to match the dimensions\r\nofarray, and selects elements to include in the reduction. Note\r\nthat for ufuncs likeminimumthat do not have an identity\r\ndefined, one has to pass in alsoinitial.New in version 1.17.0.Returns:rndarrayThe reduced array. Ifoutwas supplied,ris a reference to it.Examples>>>np.multiply.reduce([2,3,5])30A multi-dimensional array example:>>>X=np.arange(8).reshape((2,2,2))>>>Xarray([[[0, 1],[2, 3]],[[4, 5],[6, 7]]])>>>np.add.reduce(X,0)array([[ 4,  6],[ 8, 10]])>>>np.add.reduce(X)# confirm: default axis value is", "doc_id": "ffa6cef8-5428-4f5f-a0a1-4b66d88b407c", "embedding": null, "doc_hash": "c0f6fed8561135f1c4ba922373c5c308e357ee1c9b4d75492985eebac9279605", "extra_info": null, "node_info": {"start": 0, "end": 3145, "_node_type": "1"}, "relationships": {"1": "7231f917-8d9b-4276-87d7-72ab2a614adb", "3": "6ba98e21-4ed9-40b9-a0dc-04eea4bd23d9"}}, "__type__": "1"}, "6ba98e21-4ed9-40b9-a0dc-04eea4bd23d9": {"__data__": {"text": "array which is broadcasted to match the dimensions\r\nofarray, and selects elements to include in the reduction. Note\r\nthat for ufuncs likeminimumthat do not have an identity\r\ndefined, one has to pass in alsoinitial.New in version 1.17.0.Returns:rndarrayThe reduced array. Ifoutwas supplied,ris a reference to it.Examples>>>np.multiply.reduce([2,3,5])30A multi-dimensional array example:>>>X=np.arange(8).reshape((2,2,2))>>>Xarray([[[0, 1],[2, 3]],[[4, 5],[6, 7]]])>>>np.add.reduce(X,0)array([[ 4,  6],[ 8, 10]])>>>np.add.reduce(X)# confirm: default axis value is 0array([[ 4,  6],[ 8, 10]])>>>np.add.reduce(X,1)array([[ 2,  4],[10, 12]])>>>np.add.reduce(X,2)array([[ 1,  5],[ 9, 13]])You can use theinitialkeyword argument to initialize the reduction\r\nwith a different value, andwhereto select specific elements to include:>>>np.add.reduce([10],initial=5)15>>>np.add.reduce(np.ones((2,2,2)),axis=(0,2),initial=10)array([14., 14.])>>>a=np.array([10.,np.nan,10])>>>np.add.reduce(a,where=~np.isnan(a))20.0Allows reductions of empty arrays where they would normally fail, i.e.\r\nfor ufuncs without an identity.>>>np.minimum.reduce([],initial=np.inf)inf>>>np.minimum.reduce([[1.,2.],[3.,4.]],initial=10.,where=[True,False])array([ 1., 10.])>>>np.minimum.reduce([])Traceback (most recent call last):...ValueError:zero-size array to reduction operation minimum which has no identity", "doc_id": "6ba98e21-4ed9-40b9-a0dc-04eea4bd23d9", "embedding": null, "doc_hash": "9dad189b782314c509bec6395898773367c44577802ed3621a353d2835ba6807", "extra_info": null, "node_info": {"start": 2584, "end": 3957, "_node_type": "1"}, "relationships": {"1": "7231f917-8d9b-4276-87d7-72ab2a614adb", "2": "ffa6cef8-5428-4f5f-a0a1-4b66d88b407c"}}, "__type__": "1"}, "2e8cbbca-2749-4dd8-95ee-afe1de75005f": {"__data__": {"text": "\u3010Name\u3011Numpy\u3010Chapter\u3011Universal functions\u3010Section\u3011numpy.ufunc.reduceat\u3010Content\u3011numpy.ufunc.reduceat#methodufunc.reduceat(array,indices,axis=0,dtype=None,out=None)#Performs a (local) reduce with specified slices over a single axis.For i inrange(len(indices)),reduceatcomputesufunc.reduce(array[indices[i]:indices[i+1]]), which becomes the i-th\r\ngeneralized \uff82\u201crow\uff82\u201d parallel toaxisin the final result (i.e., in a\r\n2-D array, for example, ifaxis = 0, it becomes the i-th row, but ifaxis = 1, it becomes the i-th column).  There are three exceptions to this:wheni=len(indices)-1(so for the last index),indices[i+1]=array.shape[axis].ifindices[i]>=indices[i+1], the i-th generalized \uff82\u201crow\uff82\u201d is\r\nsimplyarray[indices[i]].ifindices[i]>=len(array)orindices[i]<0, an error is raised.The shape of the output depends on the size ofindices, and may be\r\nlarger thanarray(this happens iflen(indices)>array.shape[axis]).Parameters:arrayarray_likeThe array to act on.indicesarray_likePaired indices, comma separated (not colon), specifying slices to\r\nreduce.axisint, optionalThe axis along which to apply the reduceat.dtypedata-type code, optionalThe type used to represent the intermediate results. Defaults\r\nto the data type of the output array if this is provided, or\r\nthe data type of the input array if no output array is provided.outndarray, None, or tuple of ndarray and None, optionalA location into which the result is stored. If not provided or None,\r\na freshly-allocated array is returned. For consistency withufunc.__call__, if given as a keyword, this may be wrapped in a\r\n1-element tuple.Changed in version 1.13.0:Tuples are allowed for keyword argument.Returns:rndarrayThe reduced values. Ifoutwas supplied,ris a reference toout.NotesA descriptive example:Ifarrayis 1-D, the functionufunc.accumulate(array)is the same asufunc.reduceat(array,indices)[::2]whereindicesisrange(len(array)-1)with a zero placed\r\nin every other element:indices=zeros(2*len(array)-1),indices[1::2]=range(1,len(array)).Don\uff82\u2019t be fooled by this attribute\uff82\u2019s name:reduceat(array)is not\r\nnecessarily smaller thanarray.ExamplesTo take the running sum of four successive values:>>>np.add.reduceat(np.arange(8),[0,4,1,5,2,6,3,7])[::2]array([ 6, 10, 14, 18])A 2-D example:>>>x=np.linspace(0,15,16).reshape(4,4)>>>xarray([[ 0.,   1.,   2.,   3.],[ 4.,   5.,   6.,   7.],[ 8.,   9.,  10.,  11.],[12.,  13.,  14.,  15.]])# reduce such that the result has the following five rows:# [row1 + row2 + row3]# [row4]# [row2]# [row3]# [row1 + row2 + row3 + row4]>>>np.add.reduceat(x,[0,3,1,2,0])array([[12.,  15.,  18.,  21.],[12.,  13.,  14.,  15.],[ 4.,   5.,   6.,   7.],[ 8.,   9.,  10.,  11.],[24.,  28.,  32.,  36.]])# reduce such that result has the following two columns:# [col1 * col2 * col3,", "doc_id": "2e8cbbca-2749-4dd8-95ee-afe1de75005f", "embedding": null, "doc_hash": "9dda00153d82fb15ecfe5e629f7d94d818ec8fa8278a0da425fbdaa38c3c976b", "extra_info": null, "node_info": {"start": 0, "end": 2754, "_node_type": "1"}, "relationships": {"1": "a0b9f89d-52f5-42d2-9188-bcddc63b7a04", "3": "38c364c5-f9fd-4395-9e77-595dcdd73b08"}}, "__type__": "1"}, "38c364c5-f9fd-4395-9e77-595dcdd73b08": {"__data__": {"text": "  6.,   7.],[ 8.,   9.,  10.,  11.],[12.,  13.,  14.,  15.]])# reduce such that the result has the following five rows:# [row1 + row2 + row3]# [row4]# [row2]# [row3]# [row1 + row2 + row3 + row4]>>>np.add.reduceat(x,[0,3,1,2,0])array([[12.,  15.,  18.,  21.],[12.,  13.,  14.,  15.],[ 4.,   5.,   6.,   7.],[ 8.,   9.,  10.,  11.],[24.,  28.,  32.,  36.]])# reduce such that result has the following two columns:# [col1 * col2 * col3, col4]>>>np.multiply.reduceat(x,[0,3],1)array([[   0.,     3.],[ 120.,     7.],[ 720.,    11.],[2184.,    15.]])", "doc_id": "38c364c5-f9fd-4395-9e77-595dcdd73b08", "embedding": null, "doc_hash": "dd88b1f06f17df2ee9d103b67bfa35e1ecda8baf61978f6e32500a1a400122bd", "extra_info": null, "node_info": {"start": 2321, "end": 2866, "_node_type": "1"}, "relationships": {"1": "a0b9f89d-52f5-42d2-9188-bcddc63b7a04", "2": "2e8cbbca-2749-4dd8-95ee-afe1de75005f"}}, "__type__": "1"}, "63326a19-283f-4768-87c0-04ba5905a486": {"__data__": {"text": "\u3010Name\u3011Numpy\u3010Chapter\u3011Universal functions\u3010Section\u3011numpy.ufunc.resolve_dtypes\u3010Content\u3011numpy.ufunc.resolve_dtypes#methodufunc.resolve_dtypes(dtypes,*,signature=None,casting=None,reduction=False)#Find the dtypes NumPy will use for the operation.  Both input and\r\noutput dtypes are returned and may differ from those provided.NoteThis function always applies NEP 50 rules since it is not provided\r\nany actual values.  The Python typesint,float, andcomplexthus behave weak and should be passed for \uff82\u201cuntyped\uff82\u201d\r\nPython input.Parameters:dtypestuple of dtypes, None, or literal int, float, complexThe input dtypes for each operand.  Output operands can be\r\nNone, indicating that the dtype must be found.signaturetuple of DTypes or None, optionalIf given, enforces exact DType (classes) of the specific operand.\r\nThe ufuncdtypeargument is equivalent to passing a tuple with\r\nonly output dtypes set.casting{\uff82\u2018no\uff82\u2019, \uff82\u2018equiv\uff82\u2019, \uff82\u2018safe\uff82\u2019, \uff82\u2018same_kind\uff82\u2019, \uff82\u2018unsafe\uff82\u2019}, optionalThe casting mode when casting is necessary.  This is identical to\r\nthe ufunc call casting modes.reductionbooleanIf given, the resolution assumes a reduce operation is happening\r\nwhich slightly changes the promotion and type resolution rules.dtypesis usually something like(None,np.dtype(\"i2\"),None)for reductions (first input is also the output).NoteThe default casting mode is \uff82\u201csame_kind\uff82\u201d, however, as of\r\nNumPy 1.24, NumPy uses \uff82\u201cunsafe\uff82\u201d for reductions.Returns:dtypestuple of dtypesThe dtypes which NumPy would use for the calculation.  Note that\r\ndtypes may not match the passed in ones (casting is necessary).See alsonumpy.ufunc._resolve_dtypes_and_contextSimilar function to this, but returns additional information which give access to the core C functionality of NumPy.ExamplesThis API requires passing dtypes, define them for convenience:>>>int32=np.dtype(\"int32\")>>>float32=np.dtype(\"float32\")The typical ufunc call does not pass an output dtype.np.addhas two\r\ninputs and one output, so leave the output asNone(not provided):>>>np.add.resolve_dtypes((int32,float32,None))(dtype('float64'), dtype('float64'), dtype('float64'))The loop found uses \uff82\u201cfloat64\uff82\u201d for all operands (including the output), the\r\nfirst input would be cast.resolve_dtypessupports \uff82\u201cweak\uff82\u201d handling for Python scalars by passingint,float, orcomplex:>>>np.add.resolve_dtypes((float32,float,None))(dtype('float32'), dtype('float32'), dtype('float32'))Where the Pythonfloatbehaves samilar to a Python value0.0in a ufunc call.  (SeeNEP 50for details.)", "doc_id": "63326a19-283f-4768-87c0-04ba5905a486", "embedding": null, "doc_hash": "55d50a1f1a74b9d85ff3ffd19e367c033752b829855d0d56d6d51c3f19093050", "extra_info": null, "node_info": {"start": 0, "end": 2490, "_node_type": "1"}, "relationships": {"1": "4327c654-30d5-4298-b1ed-7c57ad4129c3"}}, "__type__": "1"}, "fb77ab93-39db-47ad-be98-ac2d221583b9": {"__data__": {"text": "\u3010Name\u3011Numpy\u3010Chapter\u3011Universal functions\u3010Section\u3011numpy.ufunc.nin\u3010Content\u3011numpy.ufunc.nin#attributeufunc.nin#The number of inputs.Data attribute containing the number of arguments the ufunc treats as input.Examples>>>np.add.nin2>>>np.multiply.nin2>>>np.power.nin2>>>np.exp.nin1", "doc_id": "fb77ab93-39db-47ad-be98-ac2d221583b9", "embedding": null, "doc_hash": "c498c9f98002558dc3162b93db4dfb099c7996ed8ca66ffef100b0a76bf05035", "extra_info": null, "node_info": {"start": 0, "end": 275, "_node_type": "1"}, "relationships": {"1": "f36cb0f9-da12-4fc2-a83a-b75695312ccc"}}, "__type__": "1"}, "e81932be-a58f-4b8b-a698-163da647d28c": {"__data__": {"text": "\u3010Name\u3011Numpy\u3010Chapter\u3011Universal functions\u3010Section\u3011numpy.ufunc.nout\u3010Content\u3011numpy.ufunc.nout#attributeufunc.nout#The number of outputs.Data attribute containing the number of arguments the ufunc treats as output.NotesSince all ufuncs can take output arguments, this will always be (at least) 1.Examples>>>np.add.nout1>>>np.multiply.nout1>>>np.power.nout1>>>np.exp.nout1", "doc_id": "e81932be-a58f-4b8b-a698-163da647d28c", "embedding": null, "doc_hash": "cb15b4474bc1b121ff1947f1ee229e28e355d10071e3ab0647672976a37150f4", "extra_info": null, "node_info": {"start": 0, "end": 366, "_node_type": "1"}, "relationships": {"1": "f00a7ae7-1f82-4191-a6f0-39ba11c971b8"}}, "__type__": "1"}, "ea29f0d0-0df5-410f-8305-95d18990bc53": {"__data__": {"text": "\u3010Name\u3011Numpy\u3010Chapter\u3011Universal functions\u3010Section\u3011numpy.ufunc.nargs\u3010Content\u3011numpy.ufunc.nargs#attributeufunc.nargs#The number of arguments.Data attribute containing the number of arguments the ufunc takes, including\r\noptional ones.NotesTypically this value will be one more than what you might expect because all\r\nufuncs take  the optional \uff82\u201cout\uff82\u201d argument.Examples>>>np.add.nargs3>>>np.multiply.nargs3>>>np.power.nargs3>>>np.exp.nargs2", "doc_id": "ea29f0d0-0df5-410f-8305-95d18990bc53", "embedding": null, "doc_hash": "40bbe7dc7a3603c4c43b38de920e6306beb203a7fb8fa478dc37d55e227d6fcb", "extra_info": null, "node_info": {"start": 0, "end": 434, "_node_type": "1"}, "relationships": {"1": "b8300a4c-cc32-4d02-aae6-90705a8d367d"}}, "__type__": "1"}, "354f3f9b-ff1d-4ec9-a942-5ebace4bca39": {"__data__": {"text": "\u3010Name\u3011Numpy\u3010Chapter\u3011Universal functions\u3010Section\u3011numpy.ufunc.ntypes\u3010Content\u3011numpy.ufunc.ntypes#attributeufunc.ntypes#The number of types.The number of numerical NumPy types - of which there are 18 total - on which\r\nthe ufunc can operate.See alsonumpy.ufunc.typesExamples>>>np.add.ntypes18>>>np.multiply.ntypes18>>>np.power.ntypes17>>>np.exp.ntypes7>>>np.remainder.ntypes14", "doc_id": "354f3f9b-ff1d-4ec9-a942-5ebace4bca39", "embedding": null, "doc_hash": "6afbc04ed3f58dacad287bc2c2addda66d799be3d5df6e363c1586209ba85a8b", "extra_info": null, "node_info": {"start": 0, "end": 371, "_node_type": "1"}, "relationships": {"1": "b6ed7851-8224-431c-9d64-f0bd438593f2"}}, "__type__": "1"}, "1919089b-3566-436b-8809-93259fecd58b": {"__data__": {"text": "\u3010Name\u3011Numpy\u3010Chapter\u3011Universal functions\u3010Section\u3011numpy.ufunc.types\u3010Content\u3011numpy.ufunc.types#attributeufunc.types#Returns a list with types grouped input->output.Data attribute listing the data-type \uff82\u201cDomain-Range\uff82\u201d groupings the ufunc can\r\ndeliver. The data-types are given using the character codes.See alsonumpy.ufunc.ntypesExamples>>>np.add.types['??->?', 'bb->b', 'BB->B', 'hh->h', 'HH->H', 'ii->i', 'II->I', 'll->l','LL->L', 'qq->q', 'QQ->Q', 'ff->f', 'dd->d', 'gg->g', 'FF->F', 'DD->D','GG->G', 'OO->O']>>>np.multiply.types['??->?', 'bb->b', 'BB->B', 'hh->h', 'HH->H', 'ii->i', 'II->I', 'll->l','LL->L', 'qq->q', 'QQ->Q', 'ff->f', 'dd->d', 'gg->g', 'FF->F', 'DD->D','GG->G', 'OO->O']>>>np.power.types['bb->b', 'BB->B', 'hh->h', 'HH->H', 'ii->i', 'II->I', 'll->l', 'LL->L','qq->q', 'QQ->Q', 'ff->f', 'dd->d', 'gg->g', 'FF->F', 'DD->D', 'GG->G','OO->O']>>>np.exp.types['f->f', 'd->d', 'g->g', 'F->F', 'D->D', 'G->G', 'O->O']>>>np.remainder.types['bb->b', 'BB->B', 'hh->h', 'HH->H', 'ii->i', 'II->I', 'll->l', 'LL->L','qq->q', 'QQ->Q', 'ff->f', 'dd->d', 'gg->g', 'OO->O']", "doc_id": "1919089b-3566-436b-8809-93259fecd58b", "embedding": null, "doc_hash": "b01fb20352088e06c0c20dd1a1cb2ffffea47fa7754aafa4787a63b6cd5c186f", "extra_info": null, "node_info": {"start": 0, "end": 1074, "_node_type": "1"}, "relationships": {"1": "4c887932-b80f-4165-bd21-87b209a9aa3c"}}, "__type__": "1"}, "3dc43a3a-7cc3-4d24-ac22-a4a625a9745d": {"__data__": {"text": "\u3010Name\u3011Numpy\u3010Chapter\u3011Universal functions\u3010Section\u3011numpy.ufunc.identity\u3010Content\u3011numpy.ufunc.identity#attributeufunc.identity#The identity value.Data attribute containing the identity element for the ufunc, if it has one.\r\nIf it does not, the attribute value is None.Examples>>>np.add.identity0>>>np.multiply.identity1>>>np.power.identity1>>>print(np.exp.identity)None", "doc_id": "3dc43a3a-7cc3-4d24-ac22-a4a625a9745d", "embedding": null, "doc_hash": "bc50302c30ce788652bf06a4dc1d6d46409ea1023a6c50963f36480f991586a8", "extra_info": null, "node_info": {"start": 0, "end": 364, "_node_type": "1"}, "relationships": {"1": "3caa5255-d820-4b86-b3dc-4e09c05882e3"}}, "__type__": "1"}, "93294637-ca55-4624-9dbc-44c7f1e19aa6": {"__data__": {"text": "\u3010Name\u3011Numpy\u3010Chapter\u3011Universal functions\u3010Section\u3011numpy.ufunc.signature\u3010Content\u3011numpy.ufunc.signature#attributeufunc.signature#Definition of the core elements a generalized ufunc operates on.The signature determines how the dimensions of each input/output array\r\nare split into core and loop dimensions:Each dimension in the signature is matched to a dimension of the\r\ncorresponding passed-in array, starting from the end of the shape tuple.Core dimensions assigned to the same label in the signature must have\r\nexactly matching sizes, no broadcasting is performed.The core dimensions are removed from all inputs and the remaining\r\ndimensions are broadcast together, defining the loop dimensions.NotesGeneralized ufuncs are used internally in many linalg functions, and in\r\nthe testing suite; the examples below are taken from these.\r\nFor ufuncs that operate on scalars, the signature is None, which is\r\nequivalent to \uff82\u2018()\uff82\u2019 for every argument.Examples>>>np.core.umath_tests.matrix_multiply.signature'(m,n),(n,p)->(m,p)'>>>np.linalg._umath_linalg.det.signature'(m,m)->()'>>>np.add.signatureisNoneTrue  # equivalent to '(),()->()'", "doc_id": "93294637-ca55-4624-9dbc-44c7f1e19aa6", "embedding": null, "doc_hash": "1bbb827b80ea7524345820f1be0d8bd5d8ac6fe5847cfba8672955ce4cf6bb2d", "extra_info": null, "node_info": {"start": 0, "end": 1127, "_node_type": "1"}, "relationships": {"1": "0f63cbae-5156-496e-8936-bb4a62b2835a"}}, "__type__": "1"}, "3154af2b-b805-4dd8-8550-a1784155c9a7": {"__data__": {"text": "\u3010Name\u3011Numpy\u3010Chapter\u3011Universal functions\u3010Section\u3011numpy.ufunc.reduce\u3010Content\u3011numpy.ufunc.reduce#methodufunc.reduce(array,axis=0,dtype=None,out=None,keepdims=False,initial=<novalue>,where=True)#Reducesarray\uff82\u2019s dimension by one, by applying ufunc along one axis.Let\\(array.shape = (N_0, ..., N_i, ..., N_{M-1})\\).  Then\\(ufunc.reduce(array, axis=i)[k_0, ..,k_{i-1}, k_{i+1}, .., k_{M-1}]\\)=\r\nthe result of iteratingjover\\(range(N_i)\\), cumulatively applying\r\nufunc to each\\(array[k_0, ..,k_{i-1}, j, k_{i+1}, .., k_{M-1}]\\).\r\nFor a one-dimensional array, reduce produces results equivalent to:r=op.identity# op = ufuncforiinrange(len(A)):r=op(r,A[i])returnrFor example, add.reduce() is equivalent to sum().Parameters:arrayarray_likeThe array to act on.axisNone or int or tuple of ints, optionalAxis or axes along which a reduction is performed.\r\nThe default (axis= 0) is perform a reduction over the first\r\ndimension of the input array.axismay be negative, in\r\nwhich case it counts from the last to the first axis.New in version 1.7.0.If this is None, a reduction is performed over all the axes.\r\nIf this is a tuple of ints, a reduction is performed on multiple\r\naxes, instead of a single axis or all the axes as before.For operations which are either not commutative or not associative,\r\ndoing a reduction over multiple axes is not well-defined. The\r\nufuncs do not currently raise an exception in this case, but will\r\nlikely do so in the future.dtypedata-type code, optionalThe type used to represent the intermediate results. Defaults\r\nto the data-type of the output array if this is provided, or\r\nthe data-type of the input array if no output array is provided.outndarray, None, or tuple of ndarray and None, optionalA location into which the result is stored. If not provided or None,\r\na freshly-allocated array is returned. For consistency withufunc.__call__, if given as a keyword, this may be wrapped in a\r\n1-element tuple.Changed in version 1.13.0:Tuples are allowed for keyword argument.keepdimsbool, optionalIf this is set to True, the axes which are reduced are left\r\nin the result as dimensions with size one. With this option,\r\nthe result will broadcast correctly against the originalarray.New in version 1.7.0.initialscalar, optionalThe value with which to start the reduction.\r\nIf the ufunc has no identity or the dtype is object, this defaults\r\nto None - otherwise it defaults to ufunc.identity.\r\nIfNoneis given, the first element of the reduction is used,\r\nand an error is thrown if the reduction is empty.New in version 1.15.0.wherearray_like of bool, optionalA boolean array which is broadcasted to match the dimensions\r\nofarray, and selects elements to include in the reduction. Note\r\nthat for ufuncs likeminimumthat do not have an identity\r\ndefined, one has to pass in alsoinitial.New in version 1.17.0.Returns:rndarrayThe reduced array. Ifoutwas supplied,ris a reference to it.Examples>>>np.multiply.reduce([2,3,5])30A multi-dimensional array example:>>>X=np.arange(8).reshape((2,2,2))>>>Xarray([[[0, 1],[2, 3]],[[4, 5],[6, 7]]])>>>np.add.reduce(X,0)array([[ 4,  6],[ 8, 10]])>>>np.add.reduce(X)# confirm: default axis value is", "doc_id": "3154af2b-b805-4dd8-8550-a1784155c9a7", "embedding": null, "doc_hash": "c0f6fed8561135f1c4ba922373c5c308e357ee1c9b4d75492985eebac9279605", "extra_info": null, "node_info": {"start": 0, "end": 3145, "_node_type": "1"}, "relationships": {"1": "d126a10e-351a-4460-83dd-8af93bf23bf1", "3": "37b69833-5489-4367-9a1a-7603aea5276e"}}, "__type__": "1"}, "37b69833-5489-4367-9a1a-7603aea5276e": {"__data__": {"text": "array which is broadcasted to match the dimensions\r\nofarray, and selects elements to include in the reduction. Note\r\nthat for ufuncs likeminimumthat do not have an identity\r\ndefined, one has to pass in alsoinitial.New in version 1.17.0.Returns:rndarrayThe reduced array. Ifoutwas supplied,ris a reference to it.Examples>>>np.multiply.reduce([2,3,5])30A multi-dimensional array example:>>>X=np.arange(8).reshape((2,2,2))>>>Xarray([[[0, 1],[2, 3]],[[4, 5],[6, 7]]])>>>np.add.reduce(X,0)array([[ 4,  6],[ 8, 10]])>>>np.add.reduce(X)# confirm: default axis value is 0array([[ 4,  6],[ 8, 10]])>>>np.add.reduce(X,1)array([[ 2,  4],[10, 12]])>>>np.add.reduce(X,2)array([[ 1,  5],[ 9, 13]])You can use theinitialkeyword argument to initialize the reduction\r\nwith a different value, andwhereto select specific elements to include:>>>np.add.reduce([10],initial=5)15>>>np.add.reduce(np.ones((2,2,2)),axis=(0,2),initial=10)array([14., 14.])>>>a=np.array([10.,np.nan,10])>>>np.add.reduce(a,where=~np.isnan(a))20.0Allows reductions of empty arrays where they would normally fail, i.e.\r\nfor ufuncs without an identity.>>>np.minimum.reduce([],initial=np.inf)inf>>>np.minimum.reduce([[1.,2.],[3.,4.]],initial=10.,where=[True,False])array([ 1., 10.])>>>np.minimum.reduce([])Traceback (most recent call last):...ValueError:zero-size array to reduction operation minimum which has no identity", "doc_id": "37b69833-5489-4367-9a1a-7603aea5276e", "embedding": null, "doc_hash": "9dad189b782314c509bec6395898773367c44577802ed3621a353d2835ba6807", "extra_info": null, "node_info": {"start": 2584, "end": 3957, "_node_type": "1"}, "relationships": {"1": "d126a10e-351a-4460-83dd-8af93bf23bf1", "2": "3154af2b-b805-4dd8-8550-a1784155c9a7"}}, "__type__": "1"}, "22d016b4-6c9e-49c5-88da-2539153fe8f7": {"__data__": {"text": "\u3010Name\u3011Numpy\u3010Chapter\u3011Universal functions\u3010Section\u3011numpy.ufunc.accumulate\u3010Content\u3011numpy.ufunc.accumulate#methodufunc.accumulate(array,axis=0,dtype=None,out=None)#Accumulate the result of applying the operator to all elements.For a one-dimensional array, accumulate produces results equivalent to:r=np.empty(len(A))t=op.identity# op = the ufunc being applied to A's  elementsforiinrange(len(A)):t=op(t,A[i])r[i]=treturnrFor example, add.accumulate() is equivalent to np.cumsum().For a multi-dimensional array, accumulate is applied along only one\r\naxis (axis zero by default; see Examples below) so repeated use is\r\nnecessary if one wants to accumulate over multiple axes.Parameters:arrayarray_likeThe array to act on.axisint, optionalThe axis along which to apply the accumulation; default is zero.dtypedata-type code, optionalThe data-type used to represent the intermediate results. Defaults\r\nto the data-type of the output array if such is provided, or the\r\ndata-type of the input array if no output array is provided.outndarray, None, or tuple of ndarray and None, optionalA location into which the result is stored. If not provided or None,\r\na freshly-allocated array is returned. For consistency withufunc.__call__, if given as a keyword, this may be wrapped in a\r\n1-element tuple.Changed in version 1.13.0:Tuples are allowed for keyword argument.Returns:rndarrayThe accumulated values. Ifoutwas supplied,ris a reference toout.Examples1-D array examples:>>>np.add.accumulate([2,3,5])array([ 2,  5, 10])>>>np.multiply.accumulate([2,3,5])array([ 2,  6, 30])2-D array examples:>>>I=np.eye(2)>>>Iarray([[1.,  0.],[0.,  1.]])Accumulate along axis 0 (rows), down columns:>>>np.add.accumulate(I,0)array([[1.,  0.],[1.,  1.]])>>>np.add.accumulate(I)# no axis specified = axis zeroarray([[1.,  0.],[1.,  1.]])Accumulate along axis 1 (columns), through rows:>>>np.add.accumulate(I,1)array([[1.,  1.],[0.,  1.]])", "doc_id": "22d016b4-6c9e-49c5-88da-2539153fe8f7", "embedding": null, "doc_hash": "ca3093290ce692f3cbb41b37b9fbafde04c9a0ad32093af1795590f1041f7642", "extra_info": null, "node_info": {"start": 0, "end": 1904, "_node_type": "1"}, "relationships": {"1": "03a87517-e59e-43fe-ae59-d3e4dc45bdaf"}}, "__type__": "1"}, "fb2212ad-1d97-4250-8b7e-607d0598cdf0": {"__data__": {"text": "\u3010Name\u3011Numpy\u3010Chapter\u3011Universal functions\u3010Section\u3011numpy.ufunc.reduceat\u3010Content\u3011numpy.ufunc.reduceat#methodufunc.reduceat(array,indices,axis=0,dtype=None,out=None)#Performs a (local) reduce with specified slices over a single axis.For i inrange(len(indices)),reduceatcomputesufunc.reduce(array[indices[i]:indices[i+1]]), which becomes the i-th\r\ngeneralized \uff82\u201crow\uff82\u201d parallel toaxisin the final result (i.e., in a\r\n2-D array, for example, ifaxis = 0, it becomes the i-th row, but ifaxis = 1, it becomes the i-th column).  There are three exceptions to this:wheni=len(indices)-1(so for the last index),indices[i+1]=array.shape[axis].ifindices[i]>=indices[i+1], the i-th generalized \uff82\u201crow\uff82\u201d is\r\nsimplyarray[indices[i]].ifindices[i]>=len(array)orindices[i]<0, an error is raised.The shape of the output depends on the size ofindices, and may be\r\nlarger thanarray(this happens iflen(indices)>array.shape[axis]).Parameters:arrayarray_likeThe array to act on.indicesarray_likePaired indices, comma separated (not colon), specifying slices to\r\nreduce.axisint, optionalThe axis along which to apply the reduceat.dtypedata-type code, optionalThe type used to represent the intermediate results. Defaults\r\nto the data type of the output array if this is provided, or\r\nthe data type of the input array if no output array is provided.outndarray, None, or tuple of ndarray and None, optionalA location into which the result is stored. If not provided or None,\r\na freshly-allocated array is returned. For consistency withufunc.__call__, if given as a keyword, this may be wrapped in a\r\n1-element tuple.Changed in version 1.13.0:Tuples are allowed for keyword argument.Returns:rndarrayThe reduced values. Ifoutwas supplied,ris a reference toout.NotesA descriptive example:Ifarrayis 1-D, the functionufunc.accumulate(array)is the same asufunc.reduceat(array,indices)[::2]whereindicesisrange(len(array)-1)with a zero placed\r\nin every other element:indices=zeros(2*len(array)-1),indices[1::2]=range(1,len(array)).Don\uff82\u2019t be fooled by this attribute\uff82\u2019s name:reduceat(array)is not\r\nnecessarily smaller thanarray.ExamplesTo take the running sum of four successive values:>>>np.add.reduceat(np.arange(8),[0,4,1,5,2,6,3,7])[::2]array([ 6, 10, 14, 18])A 2-D example:>>>x=np.linspace(0,15,16).reshape(4,4)>>>xarray([[ 0.,   1.,   2.,   3.],[ 4.,   5.,   6.,   7.],[ 8.,   9.,  10.,  11.],[12.,  13.,  14.,  15.]])# reduce such that the result has the following five rows:# [row1 + row2 + row3]# [row4]# [row2]# [row3]# [row1 + row2 + row3 + row4]>>>np.add.reduceat(x,[0,3,1,2,0])array([[12.,  15.,  18.,  21.],[12.,  13.,  14.,  15.],[ 4.,   5.,   6.,   7.],[ 8.,   9.,  10.,  11.],[24.,  28.,  32.,  36.]])# reduce such that result has the following two columns:# [col1 * col2 * col3,", "doc_id": "fb2212ad-1d97-4250-8b7e-607d0598cdf0", "embedding": null, "doc_hash": "9dda00153d82fb15ecfe5e629f7d94d818ec8fa8278a0da425fbdaa38c3c976b", "extra_info": null, "node_info": {"start": 0, "end": 2754, "_node_type": "1"}, "relationships": {"1": "efe0d9c6-a13a-4144-9775-a20fbbfb2f67", "3": "8156e427-176c-431b-832c-b2d69308539b"}}, "__type__": "1"}, "8156e427-176c-431b-832c-b2d69308539b": {"__data__": {"text": "  6.,   7.],[ 8.,   9.,  10.,  11.],[12.,  13.,  14.,  15.]])# reduce such that the result has the following five rows:# [row1 + row2 + row3]# [row4]# [row2]# [row3]# [row1 + row2 + row3 + row4]>>>np.add.reduceat(x,[0,3,1,2,0])array([[12.,  15.,  18.,  21.],[12.,  13.,  14.,  15.],[ 4.,   5.,   6.,   7.],[ 8.,   9.,  10.,  11.],[24.,  28.,  32.,  36.]])# reduce such that result has the following two columns:# [col1 * col2 * col3, col4]>>>np.multiply.reduceat(x,[0,3],1)array([[   0.,     3.],[ 120.,     7.],[ 720.,    11.],[2184.,    15.]])", "doc_id": "8156e427-176c-431b-832c-b2d69308539b", "embedding": null, "doc_hash": "dd88b1f06f17df2ee9d103b67bfa35e1ecda8baf61978f6e32500a1a400122bd", "extra_info": null, "node_info": {"start": 2321, "end": 2866, "_node_type": "1"}, "relationships": {"1": "efe0d9c6-a13a-4144-9775-a20fbbfb2f67", "2": "fb2212ad-1d97-4250-8b7e-607d0598cdf0"}}, "__type__": "1"}, "230e4f4d-8cc3-47a6-99dc-b22121ff98e9": {"__data__": {"text": "\u3010Name\u3011Numpy\u3010Chapter\u3011Universal functions\u3010Section\u3011numpy.ufunc.outer\u3010Content\u3011numpy.ufunc.outer#methodufunc.outer(A,B,/,**kwargs)#Apply the ufuncopto all pairs (a, b) with a inAand b inB.LetM=A.ndim,N=B.ndim. Then the result,C, ofop.outer(A,B)is an array of dimension M + N such that:\\[C[i_0, ..., i_{M-1}, j_0, ..., j_{N-1}] =\r\nop(A[i_0, ..., i_{M-1}], B[j_0, ..., j_{N-1}])\\]ForAandBone-dimensional, this is equivalent to:r=empty(len(A),len(B))foriinrange(len(A)):forjinrange(len(B)):r[i,j]=op(A[i],B[j])# op = ufunc in questionParameters:Aarray_likeFirst arrayBarray_likeSecond arraykwargsanyArguments to pass on to the ufunc. Typicallydtypeorout.\r\nSeeufuncfor a comprehensive overview of all available arguments.Returns:rndarrayOutput arraySee alsonumpy.outerA less powerful version ofnp.multiply.outerthatravels all inputs to 1D. This exists primarily for compatibility with old code.tensordotnp.tensordot(a,b,axes=((),()))andnp.multiply.outer(a,b)behave same for all dimensions of a and b.Examples>>>np.multiply.outer([1,2,3],[4,5,6])array([[ 4,  5,  6],[ 8, 10, 12],[12, 15, 18]])A multi-dimensional example:>>>A=np.array([[1,2,3],[4,5,6]])>>>A.shape(2, 3)>>>B=np.array([[1,2,3,4]])>>>B.shape(1, 4)>>>C=np.multiply.outer(A,B)>>>C.shape;C(2, 3, 1, 4)array([[[[ 1,  2,  3,  4]],[[ 2,  4,  6,  8]],[[ 3,  6,  9, 12]]],[[[ 4,  8, 12, 16]],[[ 5, 10, 15, 20]],[[ 6, 12, 18, 24]]]])", "doc_id": "230e4f4d-8cc3-47a6-99dc-b22121ff98e9", "embedding": null, "doc_hash": "5af5fe83bef6aaa33261f3748aa480daa226eec2946c80537aeaab76485a388a", "extra_info": null, "node_info": {"start": 0, "end": 1378, "_node_type": "1"}, "relationships": {"1": "5b928f57-5786-4a98-a33c-e62834e476d2"}}, "__type__": "1"}, "32394e2b-ec7b-4d43-bf3b-2bf7e003ae10": {"__data__": {"text": "\u3010Name\u3011Numpy\u3010Chapter\u3011Universal functions\u3010Section\u3011numpy.ufunc.at\u3010Content\u3011numpy.ufunc.at#methodufunc.at(a,indices,b=None,/)#Performs unbuffered in place operation on operand \uff82\u2018a\uff82\u2019 for elements\r\nspecified by \uff82\u2018indices\uff82\u2019. For addition ufunc, this method is equivalent toa[indices]+=b, except that results are accumulated for elements that\r\nare indexed more than once. For example,a[[0,0]]+=1will only\r\nincrement the first element once because of buffering, whereasadd.at(a,[0,0],1)will increment the first element twice.New in version 1.8.0.Parameters:aarray_likeThe array to perform in place operation on.indicesarray_like or tupleArray like index object or slice object for indexing into first\r\noperand. If first operand has multiple dimensions, indices can be a\r\ntuple of array like index objects or slice objects.barray_likeSecond operand for ufuncs requiring two operands. Operand must be\r\nbroadcastable over first operand after indexing or slicing.ExamplesSet items 0 and 1 to their negative values:>>>a=np.array([1,2,3,4])>>>np.negative.at(a,[0,1])>>>aarray([-1, -2,  3,  4])Increment items 0 and 1, and increment item 2 twice:>>>a=np.array([1,2,3,4])>>>np.add.at(a,[0,1,2,2],1)>>>aarray([2, 3, 5, 4])Add items 0 and 1 in first array to second array,\r\nand store results in first array:>>>a=np.array([1,2,3,4])>>>b=np.array([1,2])>>>np.add.at(a,[0,1],b)>>>aarray([2, 4, 3, 4])", "doc_id": "32394e2b-ec7b-4d43-bf3b-2bf7e003ae10", "embedding": null, "doc_hash": "9cb17cf93f092521ced7a23f5638d397af3c12e560dd0ddded43b5d8d1188a24", "extra_info": null, "node_info": {"start": 0, "end": 1377, "_node_type": "1"}, "relationships": {"1": "87db3ab5-578b-40db-b110-694f85c8f6b8"}}, "__type__": "1"}}}