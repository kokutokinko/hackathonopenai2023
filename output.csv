ƒ‰ƒCƒuƒ‰ƒŠ–¼,Í,ß,“à—e
NumPy,Array objects,The N-dimensional array ( ndarray ),"numpy.ndarray.flags#attributendarray.flags#Information about the memory layout of the array.NotesTheflagsobject can be accessed dictionary-like (as ina.flags['WRITEABLE']),
or by using lowercased attribute names (as ina.flags.writeable). Short flag
names are only supported in dictionary access.Only the WRITEBACKIFCOPY, WRITEABLE, and ALIGNED flags can be
changed by the user, via direct assignment to the attribute or dictionary
entry, or by callingndarray.setflags.The array flags cannot be set arbitrarily:WRITEBACKIFCOPY can only be setFalse.ALIGNED can only be setTrueif the data is truly aligned.WRITEABLE can only be setTrueif the array owns its own memory
or the ultimate owner of the memory exposes a writeable buffer
interface or is a string.Arrays can be both C-style and Fortran-style contiguous simultaneously.
This is clear for 1-dimensional arrays, but can also be true for higher
dimensional arrays.Even for contiguous arrays a stride for a given dimensionarr.strides[dim]may bearbitraryifarr.shape[dim]==1or the array has no elements.
It doesnotgenerally hold thatself.strides[-1]==self.itemsizefor C-style contiguous arrays orself.strides[0]==self.itemsizefor
Fortran-style contiguous arrays is true.Attributes:C_CONTIGUOUS (C)The data is in a single, C-style contiguous segment.F_CONTIGUOUS (F)The data is in a single, Fortran-style contiguous segment.OWNDATA (O)The array owns the memory it uses or borrows it from another object.WRITEABLE (W)The data area can be written to.  Setting this to False locks
the data, making it read-only.  A view (slice, etc.) inherits WRITEABLE
from its base array at creation time, but a view of a writeable
array may be subsequently locked while the base array remains writeable.
(The opposite is not true, in that a view of a locked array may not
be made writeable.  However, currently, locking a base object does not
lock any views that already reference it, so under that circumstance it
is possible to alter the contents of a locked array via a previously
created writeable view onto it.)  Attempting to change a non-writeable
array raises a RuntimeError exception.ALIGNED (A)The data and all elements are aligned appropriately for the hardware.WRITEBACKIFCOPY (X)This array is a copy of some other array. The C-API function
PyArray_ResolveWritebackIfCopy must be called before deallocating
to the base array will be updated with the contents of this array.FNCF_CONTIGUOUS and not C_CONTIGUOUS.FORCF_CONTIGUOUS or C_CONTIGUOUS (one-segment test).BEHAVED (B)ALIGNED and WRITEABLE.CARRAY (CA)BEHAVED and C_CONTIGUOUS.FARRAY (FA)BEHAVED and F_CONTIGUOUS and not C_CONTIGUOUS."
NumPy,Array objects,The N-dimensional array ( ndarray ),"numpy.ndarray.shape#attributendarray.shape#Tuple of array dimensions.The shape property is usually used to get the current shape of an array,
but may also be used to reshape the array in-place by assigning a tuple of
array dimensions to it.  As withnumpy.reshape, one of the new shape
dimensions can be -1, in which case its value is inferred from the size of
the array and the remaining dimensions. Reshaping an array in-place will
fail if a copy is required.WarningSettingarr.shapeis discouraged and may be deprecated in the
future.  Usingndarray.reshapeis the preferred approach.See alsonumpy.shapeEquivalent getter function.numpy.reshapeFunction similar to settingshape.ndarray.reshapeMethod similar to settingshape.Examples>>>x=np.array([1,2,3,4])>>>x.shape(4,)>>>y=np.zeros((2,3,4))>>>y.shape(2, 3, 4)>>>y.shape=(3,8)>>>yarray([[ 0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.],[ 0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.],[ 0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.]])>>>y.shape=(3,6)Traceback (most recent call last):File""<stdin>"", line1, in<module>ValueError:total size of new array must be unchanged>>>np.zeros((4,2))[::2].shape=(-1,)Traceback (most recent call last):File""<stdin>"", line1, in<module>AttributeError:Incompatible shape for in-place modification. Use`.reshape()` to make a copy with the desired shape."
NumPy,Array objects,The N-dimensional array ( ndarray ),"numpy.ndarray.strides#attributendarray.strides#Tuple of bytes to step in each dimension when traversing an array.The byte offset of element(i[0],i[1],...,i[n])in an arrayais:offset=sum(np.array(i)*a.strides)A more detailed explanation of strides can be found in the
gndarray.rsth file in the NumPy reference guide.WarningSettingarr.stridesis discouraged and may be deprecated in the
future.numpy.lib.stride_tricks.as_stridedshould be preferred
to create a new view of the same data in a safer way.See alsonumpy.lib.stride_tricks.as_stridedNotesImagine an array of 32-bit integers (each 4 bytes):x=np.array([[0,1,2,3,4],[5,6,7,8,9]],dtype=np.int32)This array is stored in memory as 40 bytes, one after the other
(known as a contiguous block of memory).  The strides of an array tell
us how many bytes we have to skip in memory to move to the next position
along a certain axis.  For example, we have to skip 4 bytes (1 value) to
move to the next column, but 20 bytes (5 values) to get to the same
position in the next row.  As such, the strides for the arrayxwill be(20,4).Examples>>>y=np.reshape(np.arange(2*3*4),(2,3,4))>>>yarray([[[ 0,  1,  2,  3],[ 4,  5,  6,  7],[ 8,  9, 10, 11]],[[12, 13, 14, 15],[16, 17, 18, 19],[20, 21, 22, 23]]])>>>y.strides(48, 16, 4)>>>y[1,1,1]17>>>offset=sum(y.strides*np.array((1,1,1)))>>>offset/y.itemsize17>>>x=np.reshape(np.arange(5*6*7*8),(5,6,7,8)).transpose(2,3,1,0)>>>x.strides(32, 4, 224, 1344)>>>i=np.array([3,5,2,2])>>>offset=sum(i*x.strides)>>>x[3,5,2,2]813>>>offset/x.itemsize813"
NumPy,Array objects,The N-dimensional array ( ndarray ),"numpy.ndarray.ndim#attributendarray.ndim#Number of array dimensions.Examples>>>x=np.array([1,2,3])>>>x.ndim1>>>y=np.zeros((2,3,4))>>>y.ndim3"
NumPy,Array objects,The N-dimensional array ( ndarray ),numpy.ndarray.data#attributendarray.data#Python buffer object pointing to the start of the arrayfs data.
NumPy,Array objects,The N-dimensional array ( ndarray ),"numpy.ndarray.size#attributendarray.size#Number of elements in the array.Equal tonp.prod(a.shape), i.e., the product of the arrayfs
dimensions.Notesa.sizereturns a standard arbitrary precision Python integer. This
may not be the case with other methods of obtaining the same value
(like the suggestednp.prod(a.shape), which returns an instance
ofnp.int_), and may be relevant if the value is used further in
calculations that may overflow a fixed size integer type.Examples>>>x=np.zeros((3,5,2),dtype=np.complex128)>>>x.size30>>>np.prod(x.shape)30"
NumPy,Array objects,The N-dimensional array ( ndarray ),"numpy.ndarray.itemsize#attributendarray.itemsize#Length of one array element in bytes.Examples>>>x=np.array([1,2,3],dtype=np.float64)>>>x.itemsize8>>>x=np.array([1,2,3],dtype=np.complex128)>>>x.itemsize16"
NumPy,Array objects,The N-dimensional array ( ndarray ),"numpy.ndarray.nbytes#attributendarray.nbytes#Total bytes consumed by the elements of the array.See alsosys.getsizeofMemory consumed by the object itself without parents in case view. This does include memory consumed by non-element attributes.NotesDoes not include memory consumed by non-element attributes of the
array object.Examples>>>x=np.zeros((3,5,2),dtype=np.complex128)>>>x.nbytes480>>>np.prod(x.shape)*x.itemsize480"
NumPy,Array objects,The N-dimensional array ( ndarray ),"numpy.ndarray.base#attributendarray.base#Base object if memory is from some other object.ExamplesThe base of an array that owns its memory is None:>>>x=np.array([1,2,3,4])>>>x.baseisNoneTrueSlicing creates a view, whose memory is shared with x:>>>y=x[2:]>>>y.baseisxTrue"
NumPy,Array objects,The N-dimensional array ( ndarray ),"numpy.ndarray.dtype#attributendarray.dtype#Data-type of the arrayfs elements.WarningSettingarr.dtypeis discouraged and may be deprecated in the
future.  Setting will replace thedtypewithout modifying the
memory (see alsondarray.viewandndarray.astype).Parameters:NoneReturns:dnumpy dtype objectSee alsondarray.astypeCast the values contained in the array to a new data-type.ndarray.viewCreate a view of the same data but a different data-type.numpy.dtypeExamples>>>xarray([[0, 1],[2, 3]])>>>x.dtypedtype('int32')>>>type(x.dtype)<type 'numpy.dtype'>"
NumPy,Array objects,The N-dimensional array ( ndarray ),"numpy.ndarray.T#attributendarray.T#View of the transposed array.Same asself.transpose().See alsotransposeExamples>>>a=np.array([[1,2],[3,4]])>>>aarray([[1, 2],[3, 4]])>>>a.Tarray([[1, 3],[2, 4]])>>>a=np.array([1,2,3,4])>>>aarray([1, 2, 3, 4])>>>a.Tarray([1, 2, 3, 4])"
NumPy,Array objects,The N-dimensional array ( ndarray ),"numpy.ndarray.real#attributendarray.real#The real part of the array.See alsonumpy.realequivalent functionExamples>>>x=np.sqrt([1+0j,0+1j])>>>x.realarray([ 1.        ,  0.70710678])>>>x.real.dtypedtype('float64')"
NumPy,Array objects,The N-dimensional array ( ndarray ),"numpy.ndarray.imag#attributendarray.imag#The imaginary part of the array.Examples>>>x=np.sqrt([1+0j,0+1j])>>>x.imagarray([ 0.        ,  0.70710678])>>>x.imag.dtypedtype('float64')"
NumPy,Array objects,The N-dimensional array ( ndarray ),"numpy.ndarray.flat#attributendarray.flat#A 1-D iterator over the array.This is anumpy.flatiterinstance, which acts similarly to, but is not
a subclass of, Pythonfs built-in iterator object.See alsoflattenReturn a copy of the array collapsed into one dimension.flatiterExamples>>>x=np.arange(1,7).reshape(2,3)>>>xarray([[1, 2, 3],[4, 5, 6]])>>>x.flat[3]4>>>x.Tarray([[1, 4],[2, 5],[3, 6]])>>>x.T.flat[3]5>>>type(x.flat)<class 'numpy.flatiter'>An assignment example:>>>x.flat=3;xarray([[3, 3, 3],[3, 3, 3]])>>>x.flat[[1,4]]=1;xarray([[3, 1, 3],[3, 1, 3]])"
NumPy,Array objects,The N-dimensional array ( ndarray ),"numpy.ndarray.ctypes#attributendarray.ctypes#An object to simplify the interaction of the array with the ctypes
module.This attribute creates an object that makes it easier to use arrays
when calling shared libraries with the ctypes module. The returned
object has, among others, data, shape, and strides attributes (see
Notes below) which themselves return ctypes objects that can be used
as arguments to a shared library.Parameters:NoneReturns:cPython objectPossessing attributes data, shape, strides, etc.See alsonumpy.ctypeslibNotesBelow are the public attributes of this object which were documented
in gGuide to NumPyh (we have omitted undocumented public attributes,
as well as documented private attributes):_ctypes.dataA pointer to the memory area of the array as a Python integer.
This memory area may contain data that is not aligned, or not in correct
byte-order. The memory area may not even be writeable. The array
flags and data-type of this array should be respected when passing this
attribute to arbitrary C-code to avoid trouble that can include Python
crashing. User Beware! The value of this attribute is exactly the same
asself._array_interface_['data'][0].Note that unlikedata_as, a reference will not be kept to the array:
code likectypes.c_void_p((a+b).ctypes.data)will result in a
pointer to a deallocated array, and should be spelt(a+b).ctypes.data_as(ctypes.c_void_p)_ctypes.shape(c_intp*self.ndim): A ctypes array of length self.ndim where
the basetype is the C-integer corresponding todtype('p')on this
platform (seec_intp). This base-type could bectypes.c_int,ctypes.c_long, orctypes.c_longlongdepending on
the platform. The ctypes array contains the shape of
the underlying array._ctypes.strides(c_intp*self.ndim): A ctypes array of length self.ndim where
the basetype is the same as for the shape attribute. This ctypes array
contains the strides information from the underlying array. This strides
information is important for showing how many bytes must be jumped to
get to the next element in the array._ctypes.data_as(obj)[source]Return the data pointer cast to a particular c-types object.
For example, callingself._as_parameter_is equivalent toself.data_as(ctypes.c_void_p). Perhaps you want to use the data as a
pointer to a ctypes array of floating-point data:self.data_as(ctypes.POINTER(ctypes.c_double)).The returned pointer will keep a reference to the array._ctypes.shape_as(obj)[source]Return the shape tuple as an array of some other c-types
type. For example:self.shape_as(ctypes.c_short)._ctypes.strides_as(obj)[source]Return the strides tuple as an array of some other
c-types type. For example:self.strides_as(ctypes.c_longlong).If the ctypes module is not available, then the ctypes attribute
of array objects still returns something useful, but ctypes objects
are not returned and errors may be raised instead. In particular,
the object will still have theas_parameterattribute which will
return an integer equal to the data attribute.Examples>>>importctypes>>>x=np.array([[0,1],[2,3]],dtype=np.int32)>>>xarray([[0, 1],[2, 3]], dtype=int32)>>>x.ctypes.data31962608 # may vary>>>x.ctypes.data_as(ctypes.POINTER(ctypes.c_uint32))<__main__.LP_c_uint object at 0x7ff2fc1fc200> # may vary>>>x.ctypes.data_as(ctypes.POINTER(ctypes.c_uint32)).contentsc_uint(0)>>>x.ctypes.data_as(ctypes.POINTER(ctypes.c_uint64)).contentsc_ulong(4294967296)>>>x.ctypes.shape<numpy.core._internal.c_long_Array_2 object at 0x7ff2fc1fce60> # may vary>>>x.ctypes.strides<numpy.core._internal.c_long_Array_2 object at 0x7ff2fc1ff320> # may vary"
NumPy,Array objects,The N-dimensional array ( ndarray ),"numpy.ndarray.item#methodndarray.item(*args)#Copy an element of an array to a standard Python scalar and return it.Parameters:*argsArguments (variable number and type)none: in this case, the method only works for arrays
with one element (a.size == 1), which element is
copied into a standard Python scalar object and returned.int_type: this argument is interpreted as a flat index into
the array, specifying which element to copy and return.tuple of int_types: functions as does a single int_type argument,
except that the argument is interpreted as an nd-index into the
array.Returns:zStandard Python scalar objectA copy of the specified element of the array as a suitable
Python scalarNotesWhen the data type ofais longdouble or clongdouble, item() returns
a scalar array object because there is no available Python scalar that
would not lose information. Void arrays return a buffer object for item(),
unless fields are defined, in which case a tuple is returned.itemis very similar to a[args], except, instead of an array scalar,
a standard Python scalar is returned. This can be useful for speeding up
access to elements of the array and doing arithmetic on elements of the
array using Pythonfs optimized math.Examples>>>np.random.seed(123)>>>x=np.random.randint(9,size=(3,3))>>>xarray([[2, 2, 6],[1, 3, 6],[1, 0, 1]])>>>x.item(3)1>>>x.item(7)0>>>x.item((0,1))2>>>x.item((2,2))1"
NumPy,Array objects,The N-dimensional array ( ndarray ),"numpy.ndarray.tolist#methodndarray.tolist()#Return the array as ana.ndim-levels deep nested list of Python scalars.Return a copy of the array data as a (nested) Python list.
Data items are converted to the nearest compatible builtin Python type, via
theitemfunction.Ifa.ndimis 0, then since the depth of the nested list is 0, it will
not be a list at all, but a simple Python scalar.Parameters:noneReturns:yobject, or list of object, or list of list of object, or cThe possibly nested list of array elements.NotesThe array may be recreated viaa=np.array(a.tolist()), although this
may sometimes lose precision.ExamplesFor a 1D array,a.tolist()is almost the same aslist(a),
except thattolistchanges numpy scalars to Python scalars:>>>a=np.uint32([1,2])>>>a_list=list(a)>>>a_list[1, 2]>>>type(a_list[0])<class 'numpy.uint32'>>>>a_tolist=a.tolist()>>>a_tolist[1, 2]>>>type(a_tolist[0])<class 'int'>Additionally, for a 2D array,tolistapplies recursively:>>>a=np.array([[1,2],[3,4]])>>>list(a)[array([1, 2]), array([3, 4])]>>>a.tolist()[[1, 2], [3, 4]]The base case for this recursion is a 0D array:>>>a=np.array(1)>>>list(a)Traceback (most recent call last):...TypeError:iteration over a 0-d array>>>a.tolist()1"
NumPy,Array objects,The N-dimensional array ( ndarray ),"numpy.ndarray.itemset#methodndarray.itemset(*args)#Insert scalar into an array (scalar is cast to arrayfs dtype, if possible)There must be at least 1 argument, and define the last argument
asitem.  Then,a.itemset(*args)is equivalent to but faster
thana[args]=item.  The item should be a scalar value andargsmust select a single item in the arraya.Parameters:*argsArgumentsIf one argument: a scalar, only used in caseais of size 1.
If two arguments: the last argument is the value to be set
and must be a scalar, the first argument specifies a single array
element location. It is either an int or a tuple.NotesCompared to indexing syntax,itemsetprovides some speed increase
for placing a scalar into a particular location in anndarray,
if you must do this.  However, generally this is discouraged:
among other problems, it complicates the appearance of the code.
Also, when usingitemset(anditem) inside a loop, be sure
to assign the methods to a local variable to avoid the attribute
look-up at each loop iteration.Examples>>>np.random.seed(123)>>>x=np.random.randint(9,size=(3,3))>>>xarray([[2, 2, 6],[1, 3, 6],[1, 0, 1]])>>>x.itemset(4,0)>>>x.itemset((2,2),9)>>>xarray([[2, 2, 6],[1, 0, 6],[1, 0, 9]])"
NumPy,Array objects,The N-dimensional array ( ndarray ),"numpy.ndarray.tostring#methodndarray.tostring(order='C')#A compatibility alias fortobytes, with exactly the same behavior.Despite its name, it returnsbytesnotstrs.Deprecated since version 1.19.0."
NumPy,Array objects,The N-dimensional array ( ndarray ),"numpy.ndarray.tobytes#methodndarray.tobytes(order='C')#Construct Python bytes containing the raw data bytes in the array.Constructs Python bytes showing a copy of the raw contents of
data memory. The bytes object is produced in C-order by default.
This behavior is controlled by theorderparameter.New in version 1.9.0.Parameters:order{eCf, eFf, eAf}, optionalControls the memory layout of the bytes object. eCf means C-order,
eFf means F-order, eAf (short forAny) means eFf ifais
Fortran contiguous, eCf otherwise. Default is eCf.Returns:sbytesPython bytes exhibiting a copy ofafs raw data.See alsofrombufferInverse of this operation, construct a 1-dimensional array from Python bytes.Examples>>>x=np.array([[0,1],[2,3]],dtype='<u2')>>>x.tobytes()b'\x00\x00\x01\x00\x02\x00\x03\x00'>>>x.tobytes('C')==x.tobytes()True>>>x.tobytes('F')b'\x00\x00\x02\x00\x01\x00\x03\x00'"
NumPy,Array objects,The N-dimensional array ( ndarray ),"numpy.ndarray.tofile#methodndarray.tofile(fid,sep='',format='%s')#Write array to a file as text or binary (default).Data is always written in eCf order, independent of the order ofa.
The data produced by this method can be recovered using the function
fromfile().Parameters:fidfile or str or PathAn open file object, or a string containing a filename.Changed in version 1.17.0:pathlib.Pathobjects are now accepted.sepstrSeparator between array items for text output.
If gh (empty), a binary file is written, equivalent tofile.write(a.tobytes()).formatstrFormat string for text file output.
Each entry in the array is formatted to text by first converting
it to the closest Python type, and then using gformath % item.NotesThis is a convenience function for quick storage of array data.
Information on endianness and precision is lost, so this method is not a
good choice for files intended to archive data or transport data between
machines with different endianness. Some of these problems can be overcome
by outputting the data as text files, at the expense of speed and file
size.When fid is a file object, array contents are directly written to the
file, bypassing the file objectfswritemethod. As a result, tofile
cannot be used with files objects supporting compression (e.g., GzipFile)
or file-like objects that do not supportfileno()(e.g., BytesIO)."
NumPy,Array objects,The N-dimensional array ( ndarray ),"numpy.ndarray.dump#methodndarray.dump(file)#Dump a pickle of the array to the specified file.
The array can be read back with pickle.load or numpy.load.Parameters:filestr or PathA string naming the dump file.Changed in version 1.17.0:pathlib.Pathobjects are now accepted."
NumPy,Array objects,The N-dimensional array ( ndarray ),"numpy.ndarray.dumps#methodndarray.dumps()#Returns the pickle of the array as a string.
pickle.loads will convert the string back to an array.Parameters:None"
NumPy,Array objects,The N-dimensional array ( ndarray ),"numpy.ndarray.astype#methodndarray.astype(dtype,order='K',casting='unsafe',subok=True,copy=True)#Copy of the array, cast to a specified type.Parameters:dtypestr or dtypeTypecode or data-type to which the array is cast.order{eCf, eFf, eAf, eKf}, optionalControls the memory layout order of the result.
eCf means C order, eFf means Fortran order, eAf
means eFf order if all the arrays are Fortran contiguous,
eCf order otherwise, and eKf means as close to the
order the array elements appear in memory as possible.
Default is eKf.casting{enof, eequivf, esafef, esame_kindf, eunsafef}, optionalControls what kind of data casting may occur. Defaults to eunsafef
for backwards compatibility.enof means the data types should not be cast at all.eequivf means only byte-order changes are allowed.esafef means only casts which can preserve values are allowed.esame_kindf means only safe casts or casts within a kind,
like float64 to float32, are allowed.eunsafef means any data conversions may be done.subokbool, optionalIf True, then sub-classes will be passed-through (default), otherwise
the returned array will be forced to be a base-class array.copybool, optionalBy default, astype always returns a newly allocated array. If this
is set to false, and thedtype,order, andsubokrequirements are satisfied, the input array is returned instead
of a copy.Returns:arr_tndarrayUnlesscopyis False and the other conditions for returning the input
array are satisfied (see description forcopyinput parameter),arr_tis a new array of the same shape as the input array, with dtype, order
given bydtype,order.Raises:ComplexWarningWhen casting from complex to float or int. To avoid this,
one should usea.real.astype(t).NotesChanged in version 1.17.0:Casting between a simple data type and a structured one is possible only
for gunsafeh casting.  Casting to multiple fields is allowed, but
casting from multiple fields is not.Changed in version 1.9.0:Casting from numeric to string types in esafef casting mode requires
that the string dtype length is long enough to store the max
integer/float value converted.Examples>>>x=np.array([1,2,2.5])>>>xarray([1. ,  2. ,  2.5])>>>x.astype(int)array([1, 2, 2])"
NumPy,Array objects,The N-dimensional array ( ndarray ),"numpy.ndarray.byteswap#methodndarray.byteswap(inplace=False)#Swap the bytes of the array elementsToggle between low-endian and big-endian data representation by
returning a byteswapped array, optionally swapped in-place.
Arrays of byte-strings are not swapped. The real and imaginary
parts of a complex number are swapped individually.Parameters:inplacebool, optionalIfTrue, swap bytes in-place, default isFalse.Returns:outndarrayThe byteswapped array. IfinplaceisTrue, this is
a view to self.Examples>>>A=np.array([1,256,8755],dtype=np.int16)>>>list(map(hex,A))['0x1', '0x100', '0x2233']>>>A.byteswap(inplace=True)array([  256,     1, 13090], dtype=int16)>>>list(map(hex,A))['0x100', '0x1', '0x3322']Arrays of byte-strings are not swapped>>>A=np.array([b'ceg',b'fac'])>>>A.byteswap()array([b'ceg', b'fac'], dtype='|S3')A.newbyteorder().byteswap()produces an array with the same valuesbut different representation in memory>>>A=np.array([1,2,3])>>>A.view(np.uint8)array([1, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0,0, 0], dtype=uint8)>>>A.newbyteorder().byteswap(inplace=True)array([1, 2, 3])>>>A.view(np.uint8)array([0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0,0, 3], dtype=uint8)"
NumPy,Array objects,The N-dimensional array ( ndarray ),"numpy.ndarray.copy#methodndarray.copy(order='C')#Return a copy of the array.Parameters:order{eCf, eFf, eAf, eKf}, optionalControls the memory layout of the copy. eCf means C-order,
eFf means F-order, eAf means eFf ifais Fortran contiguous,
eCf otherwise. eKf means match the layout ofaas closely
as possible. (Note that this function andnumpy.copyare very
similar but have different default values for their order=
arguments, and this function always passes sub-classes through.)See alsonumpy.copySimilar function with different default behaviornumpy.copytoNotesThis function is the preferred method for creating an array copy.  The
functionnumpy.copyis similar, but it defaults to using order eKf,
and will not pass sub-classes through by default.Examples>>>x=np.array([[1,2,3],[4,5,6]],order='F')>>>y=x.copy()>>>x.fill(0)>>>xarray([[0, 0, 0],[0, 0, 0]])>>>yarray([[1, 2, 3],[4, 5, 6]])>>>y.flags['C_CONTIGUOUS']True"
NumPy,Array objects,The N-dimensional array ( ndarray ),"numpy.ndarray.view#methodndarray.view([dtype][,type])#New view of array with the same data.NotePassing None fordtypeis different from omitting the parameter,
since the former invokesdtype(None)which is an alias fordtype('float_').Parameters:dtypedata-type or ndarray sub-class, optionalData-type descriptor of the returned view, e.g., float32 or int16.
Omitting it results in the view having the same data-type asa.
This argument can also be specified as an ndarray sub-class, which
then specifies the type of the returned object (this is equivalent to
setting thetypeparameter).typePython type, optionalType of the returned view, e.g., ndarray or matrix.  Again, omission
of the parameter results in type preservation.Notesa.view()is used two different ways:a.view(some_dtype)ora.view(dtype=some_dtype)constructs a view
of the arrayfs memory with a different data-type.  This can cause a
reinterpretation of the bytes of memory.a.view(ndarray_subclass)ora.view(type=ndarray_subclass)just
returns an instance ofndarray_subclassthat looks at the same array
(same shape, dtype, etc.)  This does not cause a reinterpretation of the
memory.Fora.view(some_dtype), ifsome_dtypehas a different number of
bytes per entry than the previous dtype (for example, converting a regular
array to a structured array), then the last axis ofamust be
contiguous. This axis will be resized in the result.Changed in version 1.23.0:Only the last axis needs to be contiguous. Previously, the entire array
had to be C-contiguous.Examples>>>x=np.array([(1,2)],dtype=[('a',np.int8),('b',np.int8)])Viewing array data using a different type and dtype:>>>y=x.view(dtype=np.int16,type=np.matrix)>>>ymatrix([[513]], dtype=int16)>>>print(type(y))<class 'numpy.matrix'>Creating a view on a structured array so it can be used in calculations>>>x=np.array([(1,2),(3,4)],dtype=[('a',np.int8),('b',np.int8)])>>>xv=x.view(dtype=np.int8).reshape(-1,2)>>>xvarray([[1, 2],[3, 4]], dtype=int8)>>>xv.mean(0)array([2.,  3.])Making changes to the view changes the underlying array>>>xv[0,1]=20>>>xarray([(1, 20), (3,  4)], dtype=[('a', 'i1'), ('b', 'i1')])Using a view to convert an array to a recarray:>>>z=x.view(np.recarray)>>>z.aarray([1, 3], dtype=int8)Views share data:>>>x[0]=(9,10)>>>z[0](9, 10)Views that change the dtype size (bytes per entry) should normally be
avoided on arrays defined by slices, transposes, fortran-ordering, etc.:>>>x=np.array([[1,2,3],[4,5,6]],dtype=np.int16)>>>y=x[:,::2]>>>yarray([[1, 3],[4, 6]], dtype=int16)>>>y.view(dtype=[('width',np.int16),('length',np.int16)])Traceback (most recent call last):...ValueError:To change to a dtype of a different size, the last axis must be contiguous>>>z=y.copy()>>>z.view(dtype=[('width',np.int16),('length',np.int16)])array([[(1, 3)],[(4, 6)]], dtype=[('width', '<i2'), ('length', '<i2')])However, views that change dtype are totally fine for arrays with a
contiguous last axis, even if the rest of the axes are not C-contiguous:>>>x=np.arange(2*3*4,dtype=np.int8).reshape(2,3,4)>>>x.transpose(1,0,2).view(np.int16)array([[[ 256,  770],[3340, 3854]],[[1284, 1798],[4368, 4882]],[[2312, 2826],[5396, 5910]]], dtype=int16)"
NumPy,Array objects,The N-dimensional array ( ndarray ),"numpy.ndarray.getfield#methodndarray.getfield(dtype,offset=0)#Returns a field of the given array as a certain type.A field is a view of the array data with a given data-type. The values in
the view are determined by the given type and the offset into the current
array in bytes. The offset needs to be such that the view dtype fits in the
array dtype; for example an array of dtype complex128 has 16-byte elements.
If taking a view with a 32-bit integer (4 bytes), the offset needs to be
between 0 and 12 bytes.Parameters:dtypestr or dtypeThe data type of the view. The dtype size of the view can not be larger
than that of the array itself.offsetintNumber of bytes to skip before beginning the element view.Examples>>>x=np.diag([1.+1.j]*2)>>>x[1,1]=2+4.j>>>xarray([[1.+1.j,  0.+0.j],[0.+0.j,  2.+4.j]])>>>x.getfield(np.float64)array([[1.,  0.],[0.,  2.]])By choosing an offset of 8 bytes we can select the complex part of the
array for our view:>>>x.getfield(np.float64,offset=8)array([[1.,  0.],[0.,  4.]])"
NumPy,Array objects,The N-dimensional array ( ndarray ),"numpy.ndarray.setflags#methodndarray.setflags(write=None,align=None,uic=None)#Set array flags WRITEABLE, ALIGNED, WRITEBACKIFCOPY,
respectively.These Boolean-valued flags affect how numpy interprets the memory
area used bya(see Notes below). The ALIGNED flag can only
be set to True if the data is actually aligned according to the type.
The WRITEBACKIFCOPY and flag can never be set
to True. The flag WRITEABLE can only be set to True if the array owns its
own memory, or the ultimate owner of the memory exposes a writeable buffer
interface, or is a string. (The exception for string is made so that
unpickling can be done without copying memory.)Parameters:writebool, optionalDescribes whether or notacan be written to.alignbool, optionalDescribes whether or notais aligned properly for its type.uicbool, optionalDescribes whether or notais a copy of another gbaseh array.NotesArray flags provide information about how the memory area used
for the array is to be interpreted. There are 7 Boolean flags
in use, only four of which can be changed by the user:
WRITEBACKIFCOPY, WRITEABLE, and ALIGNED.WRITEABLE (W) the data area can be written to;ALIGNED (A) the data and strides are aligned appropriately for the hardware
(as determined by the compiler);WRITEBACKIFCOPY (X) this array is a copy of some other array (referenced
by .base). When the C-API function PyArray_ResolveWritebackIfCopy is
called, the base array will be updated with the contents of this array.All flags can be accessed using the single (upper case) letter as well
as the full name.Examples>>>y=np.array([[3,1,7],...[2,0,0],...[8,5,9]])>>>yarray([[3, 1, 7],[2, 0, 0],[8, 5, 9]])>>>y.flagsC_CONTIGUOUS : TrueF_CONTIGUOUS : FalseOWNDATA : TrueWRITEABLE : TrueALIGNED : TrueWRITEBACKIFCOPY : False>>>y.setflags(write=0,align=0)>>>y.flagsC_CONTIGUOUS : TrueF_CONTIGUOUS : FalseOWNDATA : TrueWRITEABLE : FalseALIGNED : FalseWRITEBACKIFCOPY : False>>>y.setflags(uic=1)Traceback (most recent call last):File""<stdin>"", line1, in<module>ValueError:cannot set WRITEBACKIFCOPY flag to True"
NumPy,Array objects,The N-dimensional array ( ndarray ),"numpy.ndarray.fill#methodndarray.fill(value)#Fill the array with a scalar value.Parameters:valuescalarAll elements ofawill be assigned this value.Examples>>>a=np.array([1,2])>>>a.fill(0)>>>aarray([0, 0])>>>a=np.empty(2)>>>a.fill(1)>>>aarray([1.,  1.])Fill expects a scalar value and always behaves the same as assigning
to a single array element.  The following is a rare example where this
distinction is important:>>>a=np.array([None,None],dtype=object)>>>a[0]=np.array(3)>>>aarray([array(3), None], dtype=object)>>>a.fill(np.array(3))>>>aarray([array(3), array(3)], dtype=object)Where other forms of assignments will unpack the array being assigned:>>>a[...]=np.array(3)>>>aarray([3, 3], dtype=object)"
NumPy,Array objects,The N-dimensional array ( ndarray ),"numpy.ndarray.reshape#methodndarray.reshape(shape,order='C')#Returns an array containing the same data with a new shape.Refer tonumpy.reshapefor full documentation.See alsonumpy.reshapeequivalent functionNotesUnlike the free functionnumpy.reshape, this method onndarrayallows
the elements of the shape parameter to be passed in as separate arguments.
For example,a.reshape(10,11)is equivalent toa.reshape((10,11))."
NumPy,Array objects,The N-dimensional array ( ndarray ),"numpy.ndarray.resize#methodndarray.resize(new_shape,refcheck=True)#Change shape and size of array in-place.Parameters:new_shapetuple of ints, ornintsShape of resized array.refcheckbool, optionalIf False, reference count will not be checked. Default is True.Returns:NoneRaises:ValueErrorIfadoes not own its own data or references or views to it exist,
and the data memory must be changed.
PyPy only: will always raise if the data memory must be changed, since
there is no reliable way to determine if references or views to it
exist.SystemErrorIf theorderkeyword argument is specified. This behaviour is a
bug in NumPy.See alsoresizeReturn a new array with the specified shape.NotesThis reallocates space for the data area if necessary.Only contiguous arrays (data elements consecutive in memory) can be
resized.The purpose of the reference count check is to make sure you
do not use this array as a buffer for another Python object and then
reallocate the memory. However, reference counts can increase in
other ways so if you are sure that you have not shared the memory
for this array with another Python object, then you may safely setrefcheckto False.ExamplesShrinking an array: array is flattened (in the order that the data are
stored in memory), resized, and reshaped:>>>a=np.array([[0,1],[2,3]],order='C')>>>a.resize((2,1))>>>aarray([[0],[1]])>>>a=np.array([[0,1],[2,3]],order='F')>>>a.resize((2,1))>>>aarray([[0],[2]])Enlarging an array: as above, but missing entries are filled with zeros:>>>b=np.array([[0,1],[2,3]])>>>b.resize(2,3)# new_shape parameter doesn't have to be a tuple>>>barray([[0, 1, 2],[3, 0, 0]])Referencing an array prevents resizingc>>>c=a>>>a.resize((1,1))Traceback (most recent call last):...ValueError:cannot resize an array that references or is referenced ...Unlessrefcheckis False:>>>a.resize((1,1),refcheck=False)>>>aarray([[0]])>>>carray([[0]])"
NumPy,Array objects,The N-dimensional array ( ndarray ),"numpy.ndarray.transpose#methodndarray.transpose(*axes)#Returns a view of the array with axes transposed.Refer tonumpy.transposefor full documentation.Parameters:axesNone, tuple of ints, ornintsNone or no argument: reverses the order of the axes.tuple of ints:iin thej-th place in the tuple means that the
arrayfsi-th axis becomes the transposed arrayfsj-th axis.nints: same as an n-tuple of the same ints (this form is
intended simply as a gconvenienceh alternative to the tuple form).Returns:pndarrayView of the array with its axes suitably permuted.See alsotransposeEquivalent function.ndarray.TArray property returning the array transposed.ndarray.reshapeGive a new shape to an array without changing its data.Examples>>>a=np.array([[1,2],[3,4]])>>>aarray([[1, 2],[3, 4]])>>>a.transpose()array([[1, 3],[2, 4]])>>>a.transpose((1,0))array([[1, 3],[2, 4]])>>>a.transpose(1,0)array([[1, 3],[2, 4]])>>>a=np.array([1,2,3,4])>>>aarray([1, 2, 3, 4])>>>a.transpose()array([1, 2, 3, 4])"
NumPy,Array objects,The N-dimensional array ( ndarray ),"numpy.ndarray.swapaxes#methodndarray.swapaxes(axis1,axis2)#Return a view of the array withaxis1andaxis2interchanged.Refer tonumpy.swapaxesfor full documentation.See alsonumpy.swapaxesequivalent function"
NumPy,Array objects,The N-dimensional array ( ndarray ),"numpy.ndarray.flatten#methodndarray.flatten(order='C')#Return a copy of the array collapsed into one dimension.Parameters:order{eCf, eFf, eAf, eKf}, optionaleCf means to flatten in row-major (C-style) order.
eFf means to flatten in column-major (Fortran-
style) order. eAf means to flatten in column-major
order ifais Fortrancontiguousin memory,
row-major order otherwise. eKf means to flattenain the order the elements occur in memory.
The default is eCf.Returns:yndarrayA copy of the input array, flattened to one dimension.See alsoravelReturn a flattened array.flatA 1-D flat iterator over the array.Examples>>>a=np.array([[1,2],[3,4]])>>>a.flatten()array([1, 2, 3, 4])>>>a.flatten('F')array([1, 3, 2, 4])"
NumPy,Array objects,The N-dimensional array ( ndarray ),numpy.ndarray.ravel#methodndarray.ravel([order])#Return a flattened array.Refer tonumpy.ravelfor full documentation.See alsonumpy.ravelequivalent functionndarray.flata flat iterator on the array.
NumPy,Array objects,The N-dimensional array ( ndarray ),numpy.ndarray.squeeze#methodndarray.squeeze(axis=None)#Remove axes of length one froma.Refer tonumpy.squeezefor full documentation.See alsonumpy.squeezeequivalent function
NumPy,Array objects,The N-dimensional array ( ndarray ),"numpy.ndarray.take#methodndarray.take(indices,axis=None,out=None,mode='raise')#Return an array formed from the elements ofaat the given indices.Refer tonumpy.takefor full documentation.See alsonumpy.takeequivalent function"
NumPy,Array objects,The N-dimensional array ( ndarray ),"numpy.ndarray.put#methodndarray.put(indices,values,mode='raise')#Seta.flat[n]=values[n]for allnin indices.Refer tonumpy.putfor full documentation.See alsonumpy.putequivalent function"
NumPy,Array objects,The N-dimensional array ( ndarray ),"numpy.ndarray.repeat#methodndarray.repeat(repeats,axis=None)#Repeat elements of an array.Refer tonumpy.repeatfor full documentation.See alsonumpy.repeatequivalent function"
NumPy,Array objects,The N-dimensional array ( ndarray ),"numpy.ndarray.choose#methodndarray.choose(choices,out=None,mode='raise')#Use an index array to construct a new array from a set of choices.Refer tonumpy.choosefor full documentation.See alsonumpy.chooseequivalent function"
NumPy,Array objects,The N-dimensional array ( ndarray ),"numpy.ndarray.sort#methodndarray.sort(axis=-1,kind=None,order=None)#Sort an array in-place. Refer tonumpy.sortfor full documentation.Parameters:axisint, optionalAxis along which to sort. Default is -1, which means sort along the
last axis.kind{equicksortf, emergesortf, eheapsortf, establef}, optionalSorting algorithm. The default is equicksortf. Note that both establef
and emergesortf use timsort under the covers and, in general, the
actual implementation will vary with datatype. The emergesortf option
is retained for backwards compatibility.Changed in version 1.15.0:The establef option was added.orderstr or list of str, optionalWhenais an array with fields defined, this argument specifies
which fields to compare first, second, etc.  A single field can
be specified as a string, and not all fields need be specified,
but unspecified fields will still be used, in the order in which
they come up in the dtype, to break ties.See alsonumpy.sortReturn a sorted copy of an array.numpy.argsortIndirect sort.numpy.lexsortIndirect stable sort on multiple keys.numpy.searchsortedFind elements in sorted array.numpy.partitionPartial sort.NotesSeenumpy.sortfor notes on the different sorting algorithms.Examples>>>a=np.array([[1,4],[3,1]])>>>a.sort(axis=1)>>>aarray([[1, 4],[1, 3]])>>>a.sort(axis=0)>>>aarray([[1, 3],[1, 4]])Use theorderkeyword to specify a field to use when sorting a
structured array:>>>a=np.array([('a',2),('c',1)],dtype=[('x','S1'),('y',int)])>>>a.sort(order='y')>>>aarray([(b'c', 1), (b'a', 2)],dtype=[('x', 'S1'), ('y', '<i8')])"
NumPy,Array objects,The N-dimensional array ( ndarray ),"numpy.ndarray.argsort#methodndarray.argsort(axis=-1,kind=None,order=None)#Returns the indices that would sort this array.Refer tonumpy.argsortfor full documentation.See alsonumpy.argsortequivalent function"
NumPy,Array objects,The N-dimensional array ( ndarray ),"numpy.ndarray.partition#methodndarray.partition(kth,axis=-1,kind='introselect',order=None)#Rearranges the elements in the array in such a way that the value of the
element in kth position is in the position it would be in a sorted array.
All elements smaller than the kth element are moved before this element and
all equal or greater are moved behind it. The ordering of the elements in
the two partitions is undefined.New in version 1.8.0.Parameters:kthint or sequence of intsElement index to partition by. The kth element value will be in its
final sorted position and all smaller elements will be moved before it
and all equal or greater elements behind it.
The order of all elements in the partitions is undefined.
If provided with a sequence of kth it will partition all elements
indexed by kth of them into their sorted position at once.Deprecated since version 1.22.0:Passing booleans as index is deprecated.axisint, optionalAxis along which to sort. Default is -1, which means sort along the
last axis.kind{eintroselectf}, optionalSelection algorithm. Default is eintroselectf.orderstr or list of str, optionalWhenais an array with fields defined, this argument specifies
which fields to compare first, second, etc. A single field can
be specified as a string, and not all fields need to be specified,
but unspecified fields will still be used, in the order in which
they come up in the dtype, to break ties.See alsonumpy.partitionReturn a partitioned copy of an array.argpartitionIndirect partition.sortFull sort.NotesSeenp.partitionfor notes on the different algorithms.Examples>>>a=np.array([3,4,2,1])>>>a.partition(3)>>>aarray([2, 1, 3, 4])>>>a.partition((1,3))>>>aarray([1, 2, 3, 4])"
NumPy,Array objects,The N-dimensional array ( ndarray ),"numpy.ndarray.argpartition#methodndarray.argpartition(kth,axis=-1,kind='introselect',order=None)#Returns the indices that would partition this array.Refer tonumpy.argpartitionfor full documentation.New in version 1.8.0.See alsonumpy.argpartitionequivalent function"
NumPy,Array objects,The N-dimensional array ( ndarray ),"numpy.ndarray.searchsorted#methodndarray.searchsorted(v,side='left',sorter=None)#Find indices where elements of v should be inserted in a to maintain order.For full documentation, seenumpy.searchsortedSee alsonumpy.searchsortedequivalent function"
NumPy,Array objects,The N-dimensional array ( ndarray ),numpy.ndarray.nonzero#methodndarray.nonzero()#Return the indices of the elements that are non-zero.Refer tonumpy.nonzerofor full documentation.See alsonumpy.nonzeroequivalent function
NumPy,Array objects,The N-dimensional array ( ndarray ),"numpy.ndarray.compress#methodndarray.compress(condition,axis=None,out=None)#Return selected slices of this array along given axis.Refer tonumpy.compressfor full documentation.See alsonumpy.compressequivalent function"
NumPy,Array objects,The N-dimensional array ( ndarray ),"numpy.ndarray.diagonal#methodndarray.diagonal(offset=0,axis1=0,axis2=1)#Return specified diagonals. In NumPy 1.9 the returned array is a
read-only view instead of a copy as in previous NumPy versions.  In
a future version the read-only restriction will be removed.Refer tonumpy.diagonalfor full documentation.See alsonumpy.diagonalequivalent function"
NumPy,Array objects,The N-dimensional array ( ndarray ),"numpy.ndarray.max#methodndarray.max(axis=None,out=None,keepdims=False,initial=<novalue>,where=True)#Return the maximum along a given axis.Refer tonumpy.amaxfor full documentation.See alsonumpy.amaxequivalent function"
NumPy,Array objects,The N-dimensional array ( ndarray ),"numpy.ndarray.argmax#methodndarray.argmax(axis=None,out=None,*,keepdims=False)#Return indices of the maximum values along the given axis.Refer tonumpy.argmaxfor full documentation.See alsonumpy.argmaxequivalent function"
NumPy,Array objects,The N-dimensional array ( ndarray ),"numpy.ndarray.min#methodndarray.min(axis=None,out=None,keepdims=False,initial=<novalue>,where=True)#Return the minimum along a given axis.Refer tonumpy.aminfor full documentation.See alsonumpy.aminequivalent function"
NumPy,Array objects,The N-dimensional array ( ndarray ),"numpy.ndarray.argmin#methodndarray.argmin(axis=None,out=None,*,keepdims=False)#Return indices of the minimum values along the given axis.Refer tonumpy.argminfor detailed documentation.See alsonumpy.argminequivalent function"
NumPy,Array objects,The N-dimensional array ( ndarray ),"numpy.ndarray.ptp#methodndarray.ptp(axis=None,out=None,keepdims=False)#Peak to peak (maximum - minimum) value along a given axis.Refer tonumpy.ptpfor full documentation.See alsonumpy.ptpequivalent function"
NumPy,Array objects,The N-dimensional array ( ndarray ),"numpy.ndarray.clip#methodndarray.clip(min=None,max=None,out=None,**kwargs)#Return an array whose values are limited to[min,max].
One of max or min must be given.Refer tonumpy.clipfor full documentation.See alsonumpy.clipequivalent function"
NumPy,Array objects,The N-dimensional array ( ndarray ),numpy.ndarray.conj#methodndarray.conj()#Complex-conjugate all elements.Refer tonumpy.conjugatefor full documentation.See alsonumpy.conjugateequivalent function
NumPy,Array objects,The N-dimensional array ( ndarray ),"numpy.ndarray.round#methodndarray.round(decimals=0,out=None)#Returnawith each element rounded to the given number of decimals.Refer tonumpy.aroundfor full documentation.See alsonumpy.aroundequivalent function"
NumPy,Array objects,The N-dimensional array ( ndarray ),"numpy.ndarray.trace#methodndarray.trace(offset=0,axis1=0,axis2=1,dtype=None,out=None)#Return the sum along diagonals of the array.Refer tonumpy.tracefor full documentation.See alsonumpy.traceequivalent function"
NumPy,Array objects,The N-dimensional array ( ndarray ),"numpy.ndarray.sum#methodndarray.sum(axis=None,dtype=None,out=None,keepdims=False,initial=0,where=True)#Return the sum of the array elements over the given axis.Refer tonumpy.sumfor full documentation.See alsonumpy.sumequivalent function"
NumPy,Array objects,The N-dimensional array ( ndarray ),"numpy.ndarray.cumsum#methodndarray.cumsum(axis=None,dtype=None,out=None)#Return the cumulative sum of the elements along the given axis.Refer tonumpy.cumsumfor full documentation.See alsonumpy.cumsumequivalent function"
NumPy,Array objects,The N-dimensional array ( ndarray ),"numpy.ndarray.mean#methodndarray.mean(axis=None,dtype=None,out=None,keepdims=False,*,where=True)#Returns the average of the array elements along given axis.Refer tonumpy.meanfor full documentation.See alsonumpy.meanequivalent function"
NumPy,Array objects,The N-dimensional array ( ndarray ),"numpy.ndarray.var#methodndarray.var(axis=None,dtype=None,out=None,ddof=0,keepdims=False,*,where=True)#Returns the variance of the array elements, along given axis.Refer tonumpy.varfor full documentation.See alsonumpy.varequivalent function"
NumPy,Array objects,The N-dimensional array ( ndarray ),"numpy.ndarray.std#methodndarray.std(axis=None,dtype=None,out=None,ddof=0,keepdims=False,*,where=True)#Returns the standard deviation of the array elements along given axis.Refer tonumpy.stdfor full documentation.See alsonumpy.stdequivalent function"
NumPy,Array objects,The N-dimensional array ( ndarray ),"numpy.ndarray.prod#methodndarray.prod(axis=None,dtype=None,out=None,keepdims=False,initial=1,where=True)#Return the product of the array elements over the given axisRefer tonumpy.prodfor full documentation.See alsonumpy.prodequivalent function"
NumPy,Array objects,The N-dimensional array ( ndarray ),"numpy.ndarray.cumprod#methodndarray.cumprod(axis=None,dtype=None,out=None)#Return the cumulative product of the elements along the given axis.Refer tonumpy.cumprodfor full documentation.See alsonumpy.cumprodequivalent function"
NumPy,Array objects,The N-dimensional array ( ndarray ),"numpy.ndarray.all#methodndarray.all(axis=None,out=None,keepdims=False,*,where=True)#Returns True if all elements evaluate to True.Refer tonumpy.allfor full documentation.See alsonumpy.allequivalent function"
NumPy,Array objects,The N-dimensional array ( ndarray ),"numpy.ndarray.any#methodndarray.any(axis=None,out=None,keepdims=False,*,where=True)#Returns True if any of the elements ofaevaluate to True.Refer tonumpy.anyfor full documentation.See alsonumpy.anyequivalent function"
NumPy,Array objects,The N-dimensional array ( ndarray ),"numpy.ndarray.__lt__#methodndarray.__lt__(value,/)#Return self<value."
NumPy,Array objects,The N-dimensional array ( ndarray ),"numpy.ndarray.__le__#methodndarray.__le__(value,/)#Return self<=value."
NumPy,Array objects,The N-dimensional array ( ndarray ),"numpy.ndarray.__gt__#methodndarray.__gt__(value,/)#Return self>value."
NumPy,Array objects,The N-dimensional array ( ndarray ),"numpy.ndarray.__ge__#methodndarray.__ge__(value,/)#Return self>=value."
NumPy,Array objects,The N-dimensional array ( ndarray ),"numpy.ndarray.__eq__#methodndarray.__eq__(value,/)#Return self==value."
NumPy,Array objects,The N-dimensional array ( ndarray ),"numpy.ndarray.__ne__#methodndarray.__ne__(value,/)#Return self!=value."
NumPy,Array objects,The N-dimensional array ( ndarray ),numpy.ndarray.__bool__#methodndarray.__bool__(/)#True if self else False
NumPy,Array objects,The N-dimensional array ( ndarray ),numpy.ndarray.__neg__#methodndarray.__neg__(/)#-self
NumPy,Array objects,The N-dimensional array ( ndarray ),numpy.ndarray.__pos__#methodndarray.__pos__(/)#+self
NumPy,Array objects,The N-dimensional array ( ndarray ),numpy.ndarray.__abs__#methodndarray.__abs__(self)#
NumPy,Array objects,The N-dimensional array ( ndarray ),numpy.ndarray.__invert__#methodndarray.__invert__(/)#~self
NumPy,Array objects,The N-dimensional array ( ndarray ),"numpy.ndarray.__add__#methodndarray.__add__(value,/)#Return self+value."
NumPy,Array objects,The N-dimensional array ( ndarray ),"numpy.ndarray.__sub__#methodndarray.__sub__(value,/)#Return self-value."
NumPy,Array objects,The N-dimensional array ( ndarray ),"numpy.ndarray.__mul__#methodndarray.__mul__(value,/)#Return self*value."
NumPy,Array objects,The N-dimensional array ( ndarray ),"numpy.ndarray.__truediv__#methodndarray.__truediv__(value,/)#Return self/value."
NumPy,Array objects,The N-dimensional array ( ndarray ),"numpy.ndarray.__floordiv__#methodndarray.__floordiv__(value,/)#Return self//value."
NumPy,Array objects,The N-dimensional array ( ndarray ),"numpy.ndarray.__mod__#methodndarray.__mod__(value,/)#Return self%value."
NumPy,Array objects,The N-dimensional array ( ndarray ),"numpy.ndarray.__divmod__#methodndarray.__divmod__(value,/)#Return divmod(self, value)."
NumPy,Array objects,The N-dimensional array ( ndarray ),"numpy.ndarray.__pow__#methodndarray.__pow__(value,mod=None,/)#Return pow(self, value, mod)."
NumPy,Array objects,The N-dimensional array ( ndarray ),"numpy.ndarray.__lshift__#methodndarray.__lshift__(value,/)#Return self<<value."
NumPy,Array objects,The N-dimensional array ( ndarray ),"numpy.ndarray.__rshift__#methodndarray.__rshift__(value,/)#Return self>>value."
NumPy,Array objects,The N-dimensional array ( ndarray ),"numpy.ndarray.__and__#methodndarray.__and__(value,/)#Return self&value."
NumPy,Array objects,The N-dimensional array ( ndarray ),"numpy.ndarray.__or__#methodndarray.__or__(value,/)#Return self|value."
NumPy,Array objects,The N-dimensional array ( ndarray ),"numpy.ndarray.__xor__#methodndarray.__xor__(value,/)#Return self^value."
NumPy,Array objects,The N-dimensional array ( ndarray ),"numpy.ndarray.__iadd__#methodndarray.__iadd__(value,/)#Return self+=value."
NumPy,Array objects,The N-dimensional array ( ndarray ),"numpy.ndarray.__isub__#methodndarray.__isub__(value,/)#Return self-=value."
NumPy,Array objects,The N-dimensional array ( ndarray ),"numpy.ndarray.__imul__#methodndarray.__imul__(value,/)#Return self*=value."
NumPy,Array objects,The N-dimensional array ( ndarray ),"numpy.ndarray.__itruediv__#methodndarray.__itruediv__(value,/)#Return self/=value."
NumPy,Array objects,The N-dimensional array ( ndarray ),"numpy.ndarray.__ifloordiv__#methodndarray.__ifloordiv__(value,/)#Return self//=value."
NumPy,Array objects,The N-dimensional array ( ndarray ),"numpy.ndarray.__imod__#methodndarray.__imod__(value,/)#Return self%=value."
NumPy,Array objects,The N-dimensional array ( ndarray ),"numpy.ndarray.__ipow__#methodndarray.__ipow__(value,/)#Return self**=value."
NumPy,Array objects,The N-dimensional array ( ndarray ),"numpy.ndarray.__ilshift__#methodndarray.__ilshift__(value,/)#Return self<<=value."
NumPy,Array objects,The N-dimensional array ( ndarray ),"numpy.ndarray.__irshift__#methodndarray.__irshift__(value,/)#Return self>>=value."
NumPy,Array objects,The N-dimensional array ( ndarray ),"numpy.ndarray.__iand__#methodndarray.__iand__(value,/)#Return self&=value."
NumPy,Array objects,The N-dimensional array ( ndarray ),"numpy.ndarray.__ior__#methodndarray.__ior__(value,/)#Return self|=value."
NumPy,Array objects,The N-dimensional array ( ndarray ),"numpy.ndarray.__ixor__#methodndarray.__ixor__(value,/)#Return self^=value."
NumPy,Array objects,The N-dimensional array ( ndarray ),"numpy.ndarray.__matmul__#methodndarray.__matmul__(value,/)#Returnself@value."
NumPy,Array objects,The N-dimensional array ( ndarray ),numpy.ndarray.__copy__#methodndarray.__copy__()#Used ifcopy.copyis called on an array. Returns a copy of the array.Equivalent toa.copy(order='K').
NumPy,Array objects,The N-dimensional array ( ndarray ),"numpy.ndarray.__deepcopy__#methodndarray.__deepcopy__(memo,/)#Used ifcopy.deepcopyis called on an array."
NumPy,Array objects,The N-dimensional array ( ndarray ),numpy.ndarray.__reduce__#methodndarray.__reduce__()#For pickling.
NumPy,Array objects,The N-dimensional array ( ndarray ),"numpy.ndarray.__setstate__#methodndarray.__setstate__(state,/)#For unpickling.Thestateargument must be a sequence that contains the following
elements:Parameters:versionintoptional pickle version. If omitted defaults to 0.shapetupledtypedata-typeisFortranboolrawdatastring or lista binary string with the data (or a list if eaf is an object array)"
NumPy,Array objects,The N-dimensional array ( ndarray ),"numpy.ndarray.__new__#methodndarray.__new__(*args,**kwargs)#"
NumPy,Array objects,The N-dimensional array ( ndarray ),"numpy.ndarray.__array__#methodndarray.__array__([dtype,]/)#Returns either a new reference to self if dtype is not given or a new array
of provided data type if dtype is different from the current dtype of the
array."
NumPy,Array objects,The N-dimensional array ( ndarray ),"numpy.ndarray.__array_wrap__#methodndarray.__array_wrap__(array,[context,]/)#Returns a view ofarraywith the same type as self."
NumPy,Array objects,The N-dimensional array ( ndarray ),numpy.ndarray.__len__#methodndarray.__len__(/)#Return len(self).
NumPy,Array objects,The N-dimensional array ( ndarray ),"numpy.ndarray.__getitem__#methodndarray.__getitem__(key,/)#Return self[key]."
NumPy,Array objects,The N-dimensional array ( ndarray ),"numpy.ndarray.__setitem__#methodndarray.__setitem__(key,value,/)#Set self[key] to value."
NumPy,Array objects,The N-dimensional array ( ndarray ),"numpy.ndarray.__contains__#methodndarray.__contains__(key,/)#Return key in self."
NumPy,Array objects,The N-dimensional array ( ndarray ),numpy.ndarray.__int__#methodndarray.__int__(self)#
NumPy,Array objects,The N-dimensional array ( ndarray ),numpy.ndarray.__float__#methodndarray.__float__(self)#
NumPy,Array objects,The N-dimensional array ( ndarray ),numpy.ndarray.__complex__#methodndarray.__complex__()#
NumPy,Array objects,The N-dimensional array ( ndarray ),numpy.ndarray.__str__#methodndarray.__str__(/)#Return str(self).
NumPy,Array objects,The N-dimensional array ( ndarray ),numpy.ndarray.__repr__#methodndarray.__repr__(/)#Return repr(self).
NumPy,Array objects,The N-dimensional array ( ndarray ),"numpy.ndarray.__class_getitem__#methodndarray.__class_getitem__(item,/)#Return a parametrized wrapper around thendarraytype.New in version 1.22.Returns:aliastypes.GenericAliasA parametrizedndarraytype.See alsoPEP 585Type hinting generics in standard collections.numpy.typing.NDArrayAn ndarray aliasgenericw.r.t. itsdtype.type.Examples>>>fromtypingimportAny>>>importnumpyasnp>>>np.ndarray[Any,np.dtype[Any]]numpy.ndarray[typing.Any, numpy.dtype[typing.Any]]"
