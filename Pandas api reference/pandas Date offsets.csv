ライブラリ名,章,節,内容
Pandas,Date offsets,pandas.tseries.offsets.DateOffset,"pandas.tseries.offsets.DateOffset#classpandas.tseries.offsets.DateOffset#Standard kind of date increment used for a date range.Works exactly like the keyword argument form of relativedelta.
Note that the positional argument form of relativedelata is not
supported. Use of the keyword n is discouraged– you would be better
off specifying n in the keywords you use, but regardless it is
there for you. n is needed for DateOffset subclasses.DateOffset works as follows. Each offset specify a set of dates
that conform to the DateOffset. For example, Bday defines this
set to be the set of dates that are weekdays (M-F). To test if a
date is in the set of a DateOffset dateOffset we can use the
is_on_offset method: dateOffset.is_on_offset(date).If a date is not on a valid date, the rollback and rollforward
methods can be used to roll the date to the nearest valid date
before/after the date.DateOffsets can be created to move dates forward a given number of
valid dates. For example, Bday(2) can be added to a date to move
it two business days forward. If the date does not start on a
valid date, first it is moved to a valid date. Thus pseudo code
is:def__add__(date):date=rollback(date)# does nothing if date is validreturndate+<nnumberofperiods>When a date offset is created for a negative number of periods,
the date is first rolled forward. The pseudo code is:def__add__(date):date=rollforward(date)# does nothing if date is validreturndate+<nnumberofperiods>Zero presents a problem. Should it roll forward or back? We
arbitrarily have it rollforward:date + BDay(0) == BDay.rollforward(date)Since 0 is a bit weird, we suggest avoiding its use.Besides, adding a DateOffsets specified by the singular form of the date
component can be used to replace certain component of the timestamp.Parameters:nint, default 1The number of time periods the offset represents.
If specified without a temporal pattern, defaults to n days.normalizebool, default FalseWhether to round the result of a DateOffset addition down to the
previous midnight.**kwdsTemporal parameter that add to or replace the offset value.Parameters thataddto the offset (like Timedelta):yearsmonthsweeksdayshoursminutessecondsmillisecondsmicrosecondsnanosecondsParameters thatreplacethe offset value:yearmonthdayweekdayhourminutesecondmicrosecondnanosecond.See alsodateutil.relativedelta.relativedeltaThe relativedelta type is designed to be applied to an existing datetime an can replace specific components of that datetime, or represents an interval of time.Examples>>>frompandas.tseries.offsetsimportDateOffset>>>ts=pd.Timestamp('2017-01-01 09:10:11')>>>ts+DateOffset(months=3)Timestamp('2017-04-01 09:10:11')>>>ts=pd.Timestamp('2017-01-01 09:10:11')>>>ts+DateOffset(months=2)Timestamp('2017-03-01 09:10:11')>>>ts+DateOffset(day=31)Timestamp('2017-01-31 09:10:11')>>>ts+pd.DateOffset(hour=8)Timestamp('2017-01-01 08:10:11')AttributesbaseReturns a copy of the calling offset object with n=1 and all other attributes equal.freqstrReturn a string representing the frequency.kwdsReturn a dict of extra parameters for the offset.nameReturn a string representing the base frequency.nnanosnormalizerule_codeMethodscopyReturn a copy of the frequency.is_anchoredReturn boolean whether the frequency is a unit frequency (n=1).is_month_endReturn boolean whether a timestamp occurs on the month end.is_month_startReturn boolean whether a timestamp occurs on the month start.is_on_offsetReturn boolean whether a timestamp intersects with this frequency.is_quarter_endReturn boolean whether a timestamp occurs on the quarter end.is_quarter_startReturn boolean whether a timestamp occurs on the quarter start.is_year_endReturn boolean whether a timestamp occurs on the year end.is_year_startReturn boolean whether a timestamp occurs on the year start.rollbackRoll provided date backward to next offset only if not on offset.rollforwardRoll provided date forward to next offset only if not on offset."
Pandas,Date offsets,pandas.tseries.offsets.DateOffset.freqstr,pandas.tseries.offsets.DateOffset.freqstr#DateOffset.freqstr#Return a string representing the frequency.Examples>>>pd.DateOffset(5).freqstr'<5 * DateOffsets>'>>>pd.offsets.BusinessHour(2).freqstr'2BH'>>>pd.offsets.Nano().freqstr'N'>>>pd.offsets.Nano(-3).freqstr'-3N'
Pandas,Date offsets,pandas.tseries.offsets.DateOffset.kwds,"pandas.tseries.offsets.DateOffset.kwds#DateOffset.kwds#Return a dict of extra parameters for the offset.Examples>>>pd.DateOffset(5).kwds{}>>>pd.offsets.FY5253Quarter().kwds{'weekday': 0,'startingMonth': 1,'qtr_with_extra_week': 1,'variation': 'nearest'}"
Pandas,Date offsets,pandas.tseries.offsets.DateOffset.name,pandas.tseries.offsets.DateOffset.name#DateOffset.name#Return a string representing the base frequency.Examples>>>pd.offsets.Hour().name'H'>>>pd.offsets.Hour(5).name'H'
Pandas,Date offsets,pandas.tseries.offsets.DateOffset.nanos,pandas.tseries.offsets.DateOffset.nanos#DateOffset.nanos#
Pandas,Date offsets,pandas.tseries.offsets.DateOffset.normalize,pandas.tseries.offsets.DateOffset.normalize#DateOffset.normalize#
Pandas,Date offsets,pandas.tseries.offsets.DateOffset.rule_code,pandas.tseries.offsets.DateOffset.rule_code#DateOffset.rule_code#
Pandas,Date offsets,pandas.tseries.offsets.DateOffset.n,pandas.tseries.offsets.DateOffset.n#DateOffset.n#
Pandas,Date offsets,pandas.tseries.offsets.DateOffset.is_month_start,"pandas.tseries.offsets.DateOffset.is_month_start#DateOffset.is_month_start()#Return boolean whether a timestamp occurs on the month start.Examples>>>ts=pd.Timestamp(2022,1,1)>>>freq=pd.offsets.Hour(5)>>>freq.is_month_start(ts)True"
Pandas,Date offsets,pandas.tseries.offsets.DateOffset.is_month_end,"pandas.tseries.offsets.DateOffset.is_month_end#DateOffset.is_month_end()#Return boolean whether a timestamp occurs on the month end.Examples>>>ts=pd.Timestamp(2022,1,1)>>>freq=pd.offsets.Hour(5)>>>freq.is_month_end(ts)False"
Pandas,Date offsets,pandas.tseries.offsets.DateOffset.copy,pandas.tseries.offsets.DateOffset.copy#DateOffset.copy()#Return a copy of the frequency.Examples>>>freq=pd.DateOffset(1)>>>freq_copy=freq.copy()>>>freqisfreq_copyFalse
Pandas,Date offsets,pandas.tseries.offsets.DateOffset.is_anchored,pandas.tseries.offsets.DateOffset.is_anchored#DateOffset.is_anchored()#Return boolean whether the frequency is a unit frequency (n=1).Examples>>>pd.DateOffset().is_anchored()True>>>pd.DateOffset(2).is_anchored()False
Pandas,Date offsets,pandas.tseries.offsets.DateOffset.is_on_offset,"pandas.tseries.offsets.DateOffset.is_on_offset#DateOffset.is_on_offset()#Return boolean whether a timestamp intersects with this frequency.Parameters:dtdatetime.datetimeTimestamp to check intersections with frequency.Examples>>>ts=pd.Timestamp(2022,1,1)>>>freq=pd.offsets.Day(1)>>>freq.is_on_offset(ts)True>>>ts=pd.Timestamp(2022,8,6)>>>ts.day_name()'Saturday'>>>freq=pd.offsets.BusinessDay(1)>>>freq.is_on_offset(ts)False"
Pandas,Date offsets,pandas.tseries.offsets.DateOffset.is_month_start,"pandas.tseries.offsets.DateOffset.is_month_start#DateOffset.is_month_start()#Return boolean whether a timestamp occurs on the month start.Examples>>>ts=pd.Timestamp(2022,1,1)>>>freq=pd.offsets.Hour(5)>>>freq.is_month_start(ts)True"
Pandas,Date offsets,pandas.tseries.offsets.DateOffset.is_month_end,"pandas.tseries.offsets.DateOffset.is_month_end#DateOffset.is_month_end()#Return boolean whether a timestamp occurs on the month end.Examples>>>ts=pd.Timestamp(2022,1,1)>>>freq=pd.offsets.Hour(5)>>>freq.is_month_end(ts)False"
Pandas,Date offsets,pandas.tseries.offsets.DateOffset.is_quarter_start,"pandas.tseries.offsets.DateOffset.is_quarter_start#DateOffset.is_quarter_start()#Return boolean whether a timestamp occurs on the quarter start.Examples>>>ts=pd.Timestamp(2022,1,1)>>>freq=pd.offsets.Hour(5)>>>freq.is_quarter_start(ts)True"
Pandas,Date offsets,pandas.tseries.offsets.DateOffset.is_quarter_end,"pandas.tseries.offsets.DateOffset.is_quarter_end#DateOffset.is_quarter_end()#Return boolean whether a timestamp occurs on the quarter end.Examples>>>ts=pd.Timestamp(2022,1,1)>>>freq=pd.offsets.Hour(5)>>>freq.is_quarter_end(ts)False"
Pandas,Date offsets,pandas.tseries.offsets.DateOffset.is_year_start,"pandas.tseries.offsets.DateOffset.is_year_start#DateOffset.is_year_start()#Return boolean whether a timestamp occurs on the year start.Examples>>>ts=pd.Timestamp(2022,1,1)>>>freq=pd.offsets.Hour(5)>>>freq.is_year_start(ts)True"
Pandas,Date offsets,pandas.tseries.offsets.DateOffset.is_year_end,"pandas.tseries.offsets.DateOffset.is_year_end#DateOffset.is_year_end()#Return boolean whether a timestamp occurs on the year end.Examples>>>ts=pd.Timestamp(2022,1,1)>>>freq=pd.offsets.Hour(5)>>>freq.is_year_end(ts)False"
Pandas,Date offsets,pandas.tseries.offsets.BusinessDay,"pandas.tseries.offsets.BusinessDay#classpandas.tseries.offsets.BusinessDay#DateOffset subclass representing possibly n business days.Parameters:nint, default 1The number of days represented.normalizebool, default FalseNormalize start/end dates to midnight.ExamplesYou can use the parameternto represent a shift of n business days.>>>ts=pd.Timestamp(2022,12,9,15)>>>ts.strftime('%a%d%b %Y %H:%M')'Fri 09 Dec 2022 15:00'>>>(ts+pd.offsets.BusinessDay(n=5)).strftime('%a%d%b %Y %H:%M')'Fri 16 Dec 2022 15:00'Passing the parameternormalizeequal to True, you shift the start
of the next business day to midnight.>>>ts=pd.Timestamp(2022,12,9,15)>>>ts+pd.offsets.BusinessDay(normalize=True)Timestamp('2022-12-12 00:00:00')AttributesbaseReturns a copy of the calling offset object with n=1 and all other attributes equal.freqstrReturn a string representing the frequency.kwdsReturn a dict of extra parameters for the offset.nameReturn a string representing the base frequency.offsetAlias for self._offset.calendarholidaysnnanosnormalizerule_codeweekmaskMethodscopyReturn a copy of the frequency.is_anchoredReturn boolean whether the frequency is a unit frequency (n=1).is_month_endReturn boolean whether a timestamp occurs on the month end.is_month_startReturn boolean whether a timestamp occurs on the month start.is_on_offsetReturn boolean whether a timestamp intersects with this frequency.is_quarter_endReturn boolean whether a timestamp occurs on the quarter end.is_quarter_startReturn boolean whether a timestamp occurs on the quarter start.is_year_endReturn boolean whether a timestamp occurs on the year end.is_year_startReturn boolean whether a timestamp occurs on the year start.rollbackRoll provided date backward to next offset only if not on offset.rollforwardRoll provided date forward to next offset only if not on offset."
Pandas,Date offsets,pandas.tseries.offsets.BDay,pandas.tseries.offsets.BDay#pandas.tseries.offsets.BDay#alias ofBusinessDay
Pandas,Date offsets,pandas.tseries.offsets.BusinessDay.freqstr,pandas.tseries.offsets.BusinessDay.freqstr#BusinessDay.freqstr#Return a string representing the frequency.Examples>>>pd.DateOffset(5).freqstr'<5 * DateOffsets>'>>>pd.offsets.BusinessHour(2).freqstr'2BH'>>>pd.offsets.Nano().freqstr'N'>>>pd.offsets.Nano(-3).freqstr'-3N'
Pandas,Date offsets,pandas.tseries.offsets.BusinessDay.kwds,"pandas.tseries.offsets.BusinessDay.kwds#BusinessDay.kwds#Return a dict of extra parameters for the offset.Examples>>>pd.DateOffset(5).kwds{}>>>pd.offsets.FY5253Quarter().kwds{'weekday': 0,'startingMonth': 1,'qtr_with_extra_week': 1,'variation': 'nearest'}"
Pandas,Date offsets,pandas.tseries.offsets.BusinessDay.name,pandas.tseries.offsets.BusinessDay.name#BusinessDay.name#Return a string representing the base frequency.Examples>>>pd.offsets.Hour().name'H'>>>pd.offsets.Hour(5).name'H'
Pandas,Date offsets,pandas.tseries.offsets.BusinessDay.nanos,pandas.tseries.offsets.BusinessDay.nanos#BusinessDay.nanos#
Pandas,Date offsets,pandas.tseries.offsets.BusinessDay.normalize,pandas.tseries.offsets.BusinessDay.normalize#BusinessDay.normalize#
Pandas,Date offsets,pandas.tseries.offsets.BusinessDay.rule_code,pandas.tseries.offsets.BusinessDay.rule_code#BusinessDay.rule_code#
Pandas,Date offsets,pandas.tseries.offsets.BusinessDay.n,pandas.tseries.offsets.BusinessDay.n#BusinessDay.n#
Pandas,Date offsets,pandas.tseries.offsets.BusinessDay.weekmask,pandas.tseries.offsets.BusinessDay.weekmask#BusinessDay.weekmask#
Pandas,Date offsets,pandas.tseries.offsets.BusinessDay.holidays,pandas.tseries.offsets.BusinessDay.holidays#BusinessDay.holidays#
Pandas,Date offsets,pandas.tseries.offsets.BusinessDay.calendar,pandas.tseries.offsets.BusinessDay.calendar#BusinessDay.calendar#
Pandas,Date offsets,pandas.tseries.offsets.BusinessDay.copy,pandas.tseries.offsets.BusinessDay.copy#BusinessDay.copy()#Return a copy of the frequency.Examples>>>freq=pd.DateOffset(1)>>>freq_copy=freq.copy()>>>freqisfreq_copyFalse
Pandas,Date offsets,pandas.tseries.offsets.BusinessDay.is_anchored,pandas.tseries.offsets.BusinessDay.is_anchored#BusinessDay.is_anchored()#Return boolean whether the frequency is a unit frequency (n=1).Examples>>>pd.DateOffset().is_anchored()True>>>pd.DateOffset(2).is_anchored()False
Pandas,Date offsets,pandas.tseries.offsets.BusinessDay.is_on_offset,"pandas.tseries.offsets.BusinessDay.is_on_offset#BusinessDay.is_on_offset()#Return boolean whether a timestamp intersects with this frequency.Parameters:dtdatetime.datetimeTimestamp to check intersections with frequency.Examples>>>ts=pd.Timestamp(2022,1,1)>>>freq=pd.offsets.Day(1)>>>freq.is_on_offset(ts)True>>>ts=pd.Timestamp(2022,8,6)>>>ts.day_name()'Saturday'>>>freq=pd.offsets.BusinessDay(1)>>>freq.is_on_offset(ts)False"
Pandas,Date offsets,pandas.tseries.offsets.BusinessDay.is_month_start,"pandas.tseries.offsets.BusinessDay.is_month_start#BusinessDay.is_month_start()#Return boolean whether a timestamp occurs on the month start.Examples>>>ts=pd.Timestamp(2022,1,1)>>>freq=pd.offsets.Hour(5)>>>freq.is_month_start(ts)True"
Pandas,Date offsets,pandas.tseries.offsets.BusinessDay.is_month_end,"pandas.tseries.offsets.BusinessDay.is_month_end#BusinessDay.is_month_end()#Return boolean whether a timestamp occurs on the month end.Examples>>>ts=pd.Timestamp(2022,1,1)>>>freq=pd.offsets.Hour(5)>>>freq.is_month_end(ts)False"
Pandas,Date offsets,pandas.tseries.offsets.BusinessDay.is_quarter_start,"pandas.tseries.offsets.BusinessDay.is_quarter_start#BusinessDay.is_quarter_start()#Return boolean whether a timestamp occurs on the quarter start.Examples>>>ts=pd.Timestamp(2022,1,1)>>>freq=pd.offsets.Hour(5)>>>freq.is_quarter_start(ts)True"
Pandas,Date offsets,pandas.tseries.offsets.BusinessDay.is_quarter_end,"pandas.tseries.offsets.BusinessDay.is_quarter_end#BusinessDay.is_quarter_end()#Return boolean whether a timestamp occurs on the quarter end.Examples>>>ts=pd.Timestamp(2022,1,1)>>>freq=pd.offsets.Hour(5)>>>freq.is_quarter_end(ts)False"
Pandas,Date offsets,pandas.tseries.offsets.BusinessDay.is_year_start,"pandas.tseries.offsets.BusinessDay.is_year_start#BusinessDay.is_year_start()#Return boolean whether a timestamp occurs on the year start.Examples>>>ts=pd.Timestamp(2022,1,1)>>>freq=pd.offsets.Hour(5)>>>freq.is_year_start(ts)True"
Pandas,Date offsets,pandas.tseries.offsets.BusinessDay.is_year_end,"pandas.tseries.offsets.BusinessDay.is_year_end#BusinessDay.is_year_end()#Return boolean whether a timestamp occurs on the year end.Examples>>>ts=pd.Timestamp(2022,1,1)>>>freq=pd.offsets.Hour(5)>>>freq.is_year_end(ts)False"
Pandas,Date offsets,pandas.tseries.offsets.BusinessHour,"pandas.tseries.offsets.BusinessHour#classpandas.tseries.offsets.BusinessHour#DateOffset subclass representing possibly n business hours.Parameters:nint, default 1The number of hours represented.normalizebool, default FalseNormalize start/end dates to midnight before generating date range.startstr, time, or list of str/time, default “09:00”Start time of your custom business hour in 24h format.endstr, time, or list of str/time, default: “17:00”End time of your custom business hour in 24h format.offsettimedelta, default timedelta(0)Time offset to apply.ExamplesYou can use the parameternto represent a shift of n hours.>>>ts=pd.Timestamp(2022,12,9,8)>>>ts+pd.offsets.BusinessHour(n=5)Timestamp('2022-12-09 14:00:00')You can also change the start and the end of business hours.>>>ts=pd.Timestamp(2022,8,5,16)>>>ts+pd.offsets.BusinessHour(start=""11:00"")Timestamp('2022-08-08 11:00:00')>>>fromdatetimeimporttimeasdt_time>>>ts=pd.Timestamp(2022,8,5,22)>>>ts+pd.offsets.BusinessHour(end=dt_time(19,0))Timestamp('2022-08-08 10:00:00')Passing the parameternormalizeequal to True, you shift the start
of the next business hour to midnight.>>>ts=pd.Timestamp(2022,12,9,8)>>>ts+pd.offsets.BusinessHour(normalize=True)Timestamp('2022-12-09 00:00:00')You can divide your business day hours into several parts.>>>importdatetimeasdt>>>freq=pd.offsets.BusinessHour(start=[""06:00"",""10:00"",""15:00""],...end=[""08:00"",""12:00"",""17:00""])>>>pd.date_range(dt.datetime(2022,12,9),dt.datetime(2022,12,13),freq=freq)DatetimeIndex(['2022-12-09 06:00:00', '2022-12-09 07:00:00','2022-12-09 10:00:00', '2022-12-09 11:00:00','2022-12-09 15:00:00', '2022-12-09 16:00:00','2022-12-12 06:00:00', '2022-12-12 07:00:00','2022-12-12 10:00:00', '2022-12-12 11:00:00','2022-12-12 15:00:00', '2022-12-12 16:00:00'],dtype='datetime64[ns]', freq='BH')AttributesbaseReturns a copy of the calling offset object with n=1 and all other attributes equal.freqstrReturn a string representing the frequency.kwdsReturn a dict of extra parameters for the offset.nameReturn a string representing the base frequency.next_bdayUsed for moving to next business day.offsetAlias for self._offset.calendarendholidaysnnanosnormalizerule_codestartweekmaskMethodscopyReturn a copy of the frequency.is_anchoredReturn boolean whether the frequency is a unit frequency (n=1).is_month_endReturn boolean whether a timestamp occurs on the month end.is_month_startReturn boolean whether a timestamp occurs on the month start.is_on_offsetReturn boolean whether a timestamp intersects with this frequency.is_quarter_endReturn boolean whether a timestamp occurs on the quarter end.is_quarter_startReturn boolean whether a timestamp occurs on the quarter start.is_year_endReturn boolean whether a timestamp occurs on the year end.is_year_startReturn boolean whether a timestamp occurs on the year start.rollback(other)Roll provided date backward to next offset only if not on offset.rollforward(other)Roll provided date forward to next offset only if not on offset."
Pandas,Date offsets,pandas.tseries.offsets.BusinessHour.freqstr,pandas.tseries.offsets.BusinessHour.freqstr#BusinessHour.freqstr#Return a string representing the frequency.Examples>>>pd.DateOffset(5).freqstr'<5 * DateOffsets>'>>>pd.offsets.BusinessHour(2).freqstr'2BH'>>>pd.offsets.Nano().freqstr'N'>>>pd.offsets.Nano(-3).freqstr'-3N'
Pandas,Date offsets,pandas.tseries.offsets.BusinessHour.kwds,"pandas.tseries.offsets.BusinessHour.kwds#BusinessHour.kwds#Return a dict of extra parameters for the offset.Examples>>>pd.DateOffset(5).kwds{}>>>pd.offsets.FY5253Quarter().kwds{'weekday': 0,'startingMonth': 1,'qtr_with_extra_week': 1,'variation': 'nearest'}"
Pandas,Date offsets,pandas.tseries.offsets.BusinessHour.name,pandas.tseries.offsets.BusinessHour.name#BusinessHour.name#Return a string representing the base frequency.Examples>>>pd.offsets.Hour().name'H'>>>pd.offsets.Hour(5).name'H'
Pandas,Date offsets,pandas.tseries.offsets.BusinessHour.nanos,pandas.tseries.offsets.BusinessHour.nanos#BusinessHour.nanos#
Pandas,Date offsets,pandas.tseries.offsets.BusinessHour.normalize,pandas.tseries.offsets.BusinessHour.normalize#BusinessHour.normalize#
Pandas,Date offsets,pandas.tseries.offsets.BusinessHour.rule_code,pandas.tseries.offsets.BusinessHour.rule_code#BusinessHour.rule_code#
Pandas,Date offsets,pandas.tseries.offsets.BusinessHour.n,pandas.tseries.offsets.BusinessHour.n#BusinessHour.n#
Pandas,Date offsets,pandas.tseries.offsets.BusinessHour.start,pandas.tseries.offsets.BusinessHour.start#BusinessHour.start#
Pandas,Date offsets,pandas.tseries.offsets.BusinessHour.end,pandas.tseries.offsets.BusinessHour.end#BusinessHour.end#
Pandas,Date offsets,pandas.tseries.offsets.BusinessHour.weekmask,pandas.tseries.offsets.BusinessHour.weekmask#BusinessHour.weekmask#
Pandas,Date offsets,pandas.tseries.offsets.BusinessHour.holidays,pandas.tseries.offsets.BusinessHour.holidays#BusinessHour.holidays#
Pandas,Date offsets,pandas.tseries.offsets.BusinessHour.calendar,pandas.tseries.offsets.BusinessHour.calendar#BusinessHour.calendar#
Pandas,Date offsets,pandas.tseries.offsets.BusinessHour.copy,pandas.tseries.offsets.BusinessHour.copy#BusinessHour.copy()#Return a copy of the frequency.Examples>>>freq=pd.DateOffset(1)>>>freq_copy=freq.copy()>>>freqisfreq_copyFalse
Pandas,Date offsets,pandas.tseries.offsets.BusinessHour.is_anchored,pandas.tseries.offsets.BusinessHour.is_anchored#BusinessHour.is_anchored()#Return boolean whether the frequency is a unit frequency (n=1).Examples>>>pd.DateOffset().is_anchored()True>>>pd.DateOffset(2).is_anchored()False
Pandas,Date offsets,pandas.tseries.offsets.BusinessHour.is_on_offset,"pandas.tseries.offsets.BusinessHour.is_on_offset#BusinessHour.is_on_offset()#Return boolean whether a timestamp intersects with this frequency.Parameters:dtdatetime.datetimeTimestamp to check intersections with frequency.Examples>>>ts=pd.Timestamp(2022,1,1)>>>freq=pd.offsets.Day(1)>>>freq.is_on_offset(ts)True>>>ts=pd.Timestamp(2022,8,6)>>>ts.day_name()'Saturday'>>>freq=pd.offsets.BusinessDay(1)>>>freq.is_on_offset(ts)False"
Pandas,Date offsets,pandas.tseries.offsets.BusinessHour.is_month_start,"pandas.tseries.offsets.BusinessHour.is_month_start#BusinessHour.is_month_start()#Return boolean whether a timestamp occurs on the month start.Examples>>>ts=pd.Timestamp(2022,1,1)>>>freq=pd.offsets.Hour(5)>>>freq.is_month_start(ts)True"
Pandas,Date offsets,pandas.tseries.offsets.BusinessHour.is_month_end,"pandas.tseries.offsets.BusinessHour.is_month_end#BusinessHour.is_month_end()#Return boolean whether a timestamp occurs on the month end.Examples>>>ts=pd.Timestamp(2022,1,1)>>>freq=pd.offsets.Hour(5)>>>freq.is_month_end(ts)False"
Pandas,Date offsets,pandas.tseries.offsets.BusinessHour.is_quarter_start,"pandas.tseries.offsets.BusinessHour.is_quarter_start#BusinessHour.is_quarter_start()#Return boolean whether a timestamp occurs on the quarter start.Examples>>>ts=pd.Timestamp(2022,1,1)>>>freq=pd.offsets.Hour(5)>>>freq.is_quarter_start(ts)True"
Pandas,Date offsets,pandas.tseries.offsets.BusinessHour.is_quarter_end,"pandas.tseries.offsets.BusinessHour.is_quarter_end#BusinessHour.is_quarter_end()#Return boolean whether a timestamp occurs on the quarter end.Examples>>>ts=pd.Timestamp(2022,1,1)>>>freq=pd.offsets.Hour(5)>>>freq.is_quarter_end(ts)False"
Pandas,Date offsets,pandas.tseries.offsets.BusinessHour.is_year_start,"pandas.tseries.offsets.BusinessHour.is_year_start#BusinessHour.is_year_start()#Return boolean whether a timestamp occurs on the year start.Examples>>>ts=pd.Timestamp(2022,1,1)>>>freq=pd.offsets.Hour(5)>>>freq.is_year_start(ts)True"
Pandas,Date offsets,pandas.tseries.offsets.BusinessHour.is_year_end,"pandas.tseries.offsets.BusinessHour.is_year_end#BusinessHour.is_year_end()#Return boolean whether a timestamp occurs on the year end.Examples>>>ts=pd.Timestamp(2022,1,1)>>>freq=pd.offsets.Hour(5)>>>freq.is_year_end(ts)False"
Pandas,Date offsets,pandas.tseries.offsets.CustomBusinessDay,"pandas.tseries.offsets.CustomBusinessDay#classpandas.tseries.offsets.CustomBusinessDay#DateOffset subclass representing possibly n custom business days.In CustomBusinessDay we can use custom weekmask, holidays, and calendar.Parameters:nint, default 1The number of days represented.normalizebool, default FalseNormalize start/end dates to midnight before generating date range.weekmaskstr, Default ‘Mon Tue Wed Thu Fri’Weekmask of valid business days, passed tonumpy.busdaycalendar.holidayslistList/array of dates to exclude from the set of valid business days,
passed tonumpy.busdaycalendar.calendarnp.busdaycalendarCalendar to integrate.offsettimedelta, default timedelta(0)Time offset to apply.ExamplesIn the example below the default parameters give the next business day.>>>ts=pd.Timestamp(2022,8,5,16)>>>ts+pd.offsets.CustomBusinessDay()Timestamp('2022-08-08 16:00:00')Business days can be specified byweekmaskparameter. To convert
the returned datetime object to its string representation
the function strftime() is used in the next example.>>>importdatetimeasdt>>>freq=pd.offsets.CustomBusinessDay(weekmask=""Mon Wed Fri"")>>>pd.date_range(dt.datetime(2022,12,10),dt.datetime(2022,12,21),...freq=freq).strftime('%a%d%b %Y %H:%M')Index(['Mon 12 Dec 2022 00:00', 'Wed 14 Dec 2022 00:00','Fri 16 Dec 2022 00:00', 'Mon 19 Dec 2022 00:00','Wed 21 Dec 2022 00:00'],dtype='object')Using NumPy business day calendar you can define custom holidays.>>>importdatetimeasdt>>>bdc=np.busdaycalendar(holidays=['2022-12-12','2022-12-14'])>>>freq=pd.offsets.CustomBusinessDay(calendar=bdc)>>>pd.date_range(dt.datetime(2022,12,10),dt.datetime(2022,12,25),freq=freq)DatetimeIndex(['2022-12-13', '2022-12-15', '2022-12-16', '2022-12-19','2022-12-20', '2022-12-21', '2022-12-22', '2022-12-23'],dtype='datetime64[ns]', freq='C')If you want to shift the result on n day you can use the parameteroffset.>>>pd.Timestamp(2022,8,5,16)+pd.offsets.CustomBusinessDay(1)Timestamp('2022-08-08 16:00:00')>>>importdatetimeasdt>>>ts=pd.Timestamp(2022,8,5,16)>>>ts+pd.offsets.CustomBusinessDay(1,offset=dt.timedelta(days=1))Timestamp('2022-08-09 16:00:00')AttributesbaseReturns a copy of the calling offset object with n=1 and all other attributes equal.freqstrReturn a string representing the frequency.kwdsReturn a dict of extra parameters for the offset.nameReturn a string representing the base frequency.offsetAlias for self._offset.calendarholidaysnnanosnormalizerule_codeweekmaskMethodscopyReturn a copy of the frequency.is_anchoredReturn boolean whether the frequency is a unit frequency (n=1).is_month_endReturn boolean whether a timestamp occurs on the month end.is_month_startReturn boolean whether a timestamp occurs on the month start.is_on_offsetReturn boolean whether a timestamp intersects with this frequency.is_quarter_endReturn boolean whether a timestamp occurs on the quarter end.is_quarter_startReturn boolean whether a timestamp occurs on the quarter start.is_year_endReturn boolean whether a timestamp occurs on the year end.is_year_startReturn boolean whether a timestamp occurs on the year start.rollbackRoll provided date backward to next offset only if not on offset.rollforwardRoll provided date forward to next offset only if not on offset."
Pandas,Date offsets,pandas.tseries.offsets.CDay,pandas.tseries.offsets.CDay#pandas.tseries.offsets.CDay#alias ofCustomBusinessDay
Pandas,Date offsets,pandas.tseries.offsets.CustomBusinessDay.freqstr,pandas.tseries.offsets.CustomBusinessDay.freqstr#CustomBusinessDay.freqstr#Return a string representing the frequency.Examples>>>pd.DateOffset(5).freqstr'<5 * DateOffsets>'>>>pd.offsets.BusinessHour(2).freqstr'2BH'>>>pd.offsets.Nano().freqstr'N'>>>pd.offsets.Nano(-3).freqstr'-3N'
Pandas,Date offsets,pandas.tseries.offsets.CustomBusinessDay.kwds,"pandas.tseries.offsets.CustomBusinessDay.kwds#CustomBusinessDay.kwds#Return a dict of extra parameters for the offset.Examples>>>pd.DateOffset(5).kwds{}>>>pd.offsets.FY5253Quarter().kwds{'weekday': 0,'startingMonth': 1,'qtr_with_extra_week': 1,'variation': 'nearest'}"
Pandas,Date offsets,pandas.tseries.offsets.CustomBusinessDay.name,pandas.tseries.offsets.CustomBusinessDay.name#CustomBusinessDay.name#Return a string representing the base frequency.Examples>>>pd.offsets.Hour().name'H'>>>pd.offsets.Hour(5).name'H'
Pandas,Date offsets,pandas.tseries.offsets.CustomBusinessDay.nanos,pandas.tseries.offsets.CustomBusinessDay.nanos#CustomBusinessDay.nanos#
Pandas,Date offsets,pandas.tseries.offsets.CustomBusinessDay.normalize,pandas.tseries.offsets.CustomBusinessDay.normalize#CustomBusinessDay.normalize#
Pandas,Date offsets,pandas.tseries.offsets.CustomBusinessDay.rule_code,pandas.tseries.offsets.CustomBusinessDay.rule_code#CustomBusinessDay.rule_code#
Pandas,Date offsets,pandas.tseries.offsets.CustomBusinessDay.n,pandas.tseries.offsets.CustomBusinessDay.n#CustomBusinessDay.n#
Pandas,Date offsets,pandas.tseries.offsets.CustomBusinessDay.weekmask,pandas.tseries.offsets.CustomBusinessDay.weekmask#CustomBusinessDay.weekmask#
Pandas,Date offsets,pandas.tseries.offsets.CustomBusinessDay.calendar,pandas.tseries.offsets.CustomBusinessDay.calendar#CustomBusinessDay.calendar#
Pandas,Date offsets,pandas.tseries.offsets.CustomBusinessDay.holidays,pandas.tseries.offsets.CustomBusinessDay.holidays#CustomBusinessDay.holidays#
Pandas,Date offsets,pandas.tseries.offsets.CustomBusinessDay.copy,pandas.tseries.offsets.CustomBusinessDay.copy#CustomBusinessDay.copy()#Return a copy of the frequency.Examples>>>freq=pd.DateOffset(1)>>>freq_copy=freq.copy()>>>freqisfreq_copyFalse
Pandas,Date offsets,pandas.tseries.offsets.CustomBusinessDay.is_anchored,pandas.tseries.offsets.CustomBusinessDay.is_anchored#CustomBusinessDay.is_anchored()#Return boolean whether the frequency is a unit frequency (n=1).Examples>>>pd.DateOffset().is_anchored()True>>>pd.DateOffset(2).is_anchored()False
Pandas,Date offsets,pandas.tseries.offsets.CustomBusinessDay.is_on_offset,"pandas.tseries.offsets.CustomBusinessDay.is_on_offset#CustomBusinessDay.is_on_offset()#Return boolean whether a timestamp intersects with this frequency.Parameters:dtdatetime.datetimeTimestamp to check intersections with frequency.Examples>>>ts=pd.Timestamp(2022,1,1)>>>freq=pd.offsets.Day(1)>>>freq.is_on_offset(ts)True>>>ts=pd.Timestamp(2022,8,6)>>>ts.day_name()'Saturday'>>>freq=pd.offsets.BusinessDay(1)>>>freq.is_on_offset(ts)False"
Pandas,Date offsets,pandas.tseries.offsets.CustomBusinessDay.is_month_start,"pandas.tseries.offsets.CustomBusinessDay.is_month_start#CustomBusinessDay.is_month_start()#Return boolean whether a timestamp occurs on the month start.Examples>>>ts=pd.Timestamp(2022,1,1)>>>freq=pd.offsets.Hour(5)>>>freq.is_month_start(ts)True"
Pandas,Date offsets,pandas.tseries.offsets.CustomBusinessDay.is_month_end,"pandas.tseries.offsets.CustomBusinessDay.is_month_end#CustomBusinessDay.is_month_end()#Return boolean whether a timestamp occurs on the month end.Examples>>>ts=pd.Timestamp(2022,1,1)>>>freq=pd.offsets.Hour(5)>>>freq.is_month_end(ts)False"
Pandas,Date offsets,pandas.tseries.offsets.CustomBusinessDay.is_quarter_start,"pandas.tseries.offsets.CustomBusinessDay.is_quarter_start#CustomBusinessDay.is_quarter_start()#Return boolean whether a timestamp occurs on the quarter start.Examples>>>ts=pd.Timestamp(2022,1,1)>>>freq=pd.offsets.Hour(5)>>>freq.is_quarter_start(ts)True"
Pandas,Date offsets,pandas.tseries.offsets.CustomBusinessDay.is_quarter_end,"pandas.tseries.offsets.CustomBusinessDay.is_quarter_end#CustomBusinessDay.is_quarter_end()#Return boolean whether a timestamp occurs on the quarter end.Examples>>>ts=pd.Timestamp(2022,1,1)>>>freq=pd.offsets.Hour(5)>>>freq.is_quarter_end(ts)False"
Pandas,Date offsets,pandas.tseries.offsets.CustomBusinessDay.is_year_start,"pandas.tseries.offsets.CustomBusinessDay.is_year_start#CustomBusinessDay.is_year_start()#Return boolean whether a timestamp occurs on the year start.Examples>>>ts=pd.Timestamp(2022,1,1)>>>freq=pd.offsets.Hour(5)>>>freq.is_year_start(ts)True"
Pandas,Date offsets,pandas.tseries.offsets.CustomBusinessDay.is_year_end,"pandas.tseries.offsets.CustomBusinessDay.is_year_end#CustomBusinessDay.is_year_end()#Return boolean whether a timestamp occurs on the year end.Examples>>>ts=pd.Timestamp(2022,1,1)>>>freq=pd.offsets.Hour(5)>>>freq.is_year_end(ts)False"
Pandas,Date offsets,pandas.tseries.offsets.CustomBusinessHour,"pandas.tseries.offsets.CustomBusinessHour#classpandas.tseries.offsets.CustomBusinessHour#DateOffset subclass representing possibly n custom business days.In CustomBusinessHour we can use custom weekmask, holidays, and calendar.Parameters:nint, default 1The number of hours represented.normalizebool, default FalseNormalize start/end dates to midnight before generating date range.weekmaskstr, Default ‘Mon Tue Wed Thu Fri’Weekmask of valid business days, passed tonumpy.busdaycalendar.holidayslistList/array of dates to exclude from the set of valid business days,
passed tonumpy.busdaycalendar.calendarnp.busdaycalendarCalendar to integrate.startstr, time, or list of str/time, default “09:00”Start time of your custom business hour in 24h format.endstr, time, or list of str/time, default: “17:00”End time of your custom business hour in 24h format.ExamplesIn the example below the default parameters give the next business hour.>>>ts=pd.Timestamp(2022,8,5,16)>>>ts+pd.offsets.CustomBusinessHour()Timestamp('2022-08-08 09:00:00')We can also change the start and the end of business hours.>>>ts=pd.Timestamp(2022,8,5,16)>>>ts+pd.offsets.CustomBusinessHour(start=""11:00"")Timestamp('2022-08-08 11:00:00')>>>fromdatetimeimporttimeasdt_time>>>ts=pd.Timestamp(2022,8,5,16)>>>ts+pd.offsets.CustomBusinessHour(end=dt_time(19,0))Timestamp('2022-08-05 17:00:00')>>>ts=pd.Timestamp(2022,8,5,22)>>>ts+pd.offsets.CustomBusinessHour(end=dt_time(19,0))Timestamp('2022-08-08 10:00:00')You can divide your business day hours into several parts.>>>importdatetimeasdt>>>freq=pd.offsets.CustomBusinessHour(start=[""06:00"",""10:00"",""15:00""],...end=[""08:00"",""12:00"",""17:00""])>>>pd.date_range(dt.datetime(2022,12,9),dt.datetime(2022,12,13),freq=freq)DatetimeIndex(['2022-12-09 06:00:00', '2022-12-09 07:00:00','2022-12-09 10:00:00', '2022-12-09 11:00:00','2022-12-09 15:00:00', '2022-12-09 16:00:00','2022-12-12 06:00:00', '2022-12-12 07:00:00','2022-12-12 10:00:00', '2022-12-12 11:00:00','2022-12-12 15:00:00', '2022-12-12 16:00:00'],dtype='datetime64[ns]', freq='CBH')Business days can be specified byweekmaskparameter. To convert
the returned datetime object to its string representation
the function strftime() is used in the next example.>>>importdatetimeasdt>>>freq=pd.offsets.CustomBusinessHour(weekmask=""Mon Wed Fri"",...start=""10:00"",end=""13:00"")>>>pd.date_range(dt.datetime(2022,12,10),dt.datetime(2022,12,18),...freq=freq).strftime('%a%d%b %Y %H:%M')Index(['Mon 12 Dec 2022 10:00', 'Mon 12 Dec 2022 11:00','Mon 12 Dec 2022 12:00', 'Wed 14 Dec 2022 10:00','Wed 14 Dec 2022 11:00', 'Wed 14 Dec 2022 12:00','Fri 16 Dec 2022 10:00', 'Fri 16 Dec 2022 11:00','Fri 16 Dec 2022 12:00'],dtype='object')Using NumPy business day calendar you can define custom holidays.>>>importdatetimeasdt>>>bdc=np.busdaycalendar(holidays=['2022-12-12','2022-12-14'])>>>freq=pd.offsets.CustomBusinessHour(calendar=bdc,start=""10:00"",end=""13:00"")>>>pd.date_range(dt.datetime(2022,12,10),dt.datetime(2022,12,18),freq=freq)DatetimeIndex(['2022-12-13 10:00:00', '2022-12-13 11:00:00','2022-12-13 12:00:00', '2022-12-15 10:00:00','2022-12-15 11:00:00', '2022-12-15 12:00:00','2022-12-16 10:00:00', '2022-12-16 11:00:00','2022-12-16 12:00:00'],dtype='datetime64[ns]', freq='CBH')AttributesbaseReturns a copy of the calling offset object with n=1 and all other attributes equal.freqstrReturn a string representing the frequency.kwdsReturn a dict of extra parameters for the offset.nameReturn a string representing the base frequency.next_bdayUsed for moving to next business day.offsetAlias for self._offset.calendarendholidaysnnanosnormalizerule_codestartweekmaskMethodscopyReturn a copy of the frequency.is_anchoredReturn boolean whether the frequency is a unit frequency (n=1).is_month_endReturn boolean whether a timestamp occurs on the month end.is_month_startReturn boolean whether a timestamp occurs on the month start.is_on_offsetReturn boolean whether a timestamp intersects with this frequency.is_quarter_endReturn boolean whether a timestamp occurs on the quarter end.is_quarter_startReturn boolean whether a timestamp occurs on the quarter start.is_year_endReturn boolean whether a timestamp occurs on the year end.is_year_startReturn boolean whether a timestamp occurs on the year start.rollback(other)Roll provided date backward to next offset only if not on offset.rollforward(other)Roll provided date forward to next offset only if not on offset."
Pandas,Date offsets,pandas.tseries.offsets.CustomBusinessHour.freqstr,pandas.tseries.offsets.CustomBusinessHour.freqstr#CustomBusinessHour.freqstr#Return a string representing the frequency.Examples>>>pd.DateOffset(5).freqstr'<5 * DateOffsets>'>>>pd.offsets.BusinessHour(2).freqstr'2BH'>>>pd.offsets.Nano().freqstr'N'>>>pd.offsets.Nano(-3).freqstr'-3N'
Pandas,Date offsets,pandas.tseries.offsets.CustomBusinessHour.kwds,"pandas.tseries.offsets.CustomBusinessHour.kwds#CustomBusinessHour.kwds#Return a dict of extra parameters for the offset.Examples>>>pd.DateOffset(5).kwds{}>>>pd.offsets.FY5253Quarter().kwds{'weekday': 0,'startingMonth': 1,'qtr_with_extra_week': 1,'variation': 'nearest'}"
Pandas,Date offsets,pandas.tseries.offsets.CustomBusinessHour.name,pandas.tseries.offsets.CustomBusinessHour.name#CustomBusinessHour.name#Return a string representing the base frequency.Examples>>>pd.offsets.Hour().name'H'>>>pd.offsets.Hour(5).name'H'
Pandas,Date offsets,pandas.tseries.offsets.CustomBusinessHour.nanos,pandas.tseries.offsets.CustomBusinessHour.nanos#CustomBusinessHour.nanos#
Pandas,Date offsets,pandas.tseries.offsets.CustomBusinessHour.normalize,pandas.tseries.offsets.CustomBusinessHour.normalize#CustomBusinessHour.normalize#
Pandas,Date offsets,pandas.tseries.offsets.CustomBusinessHour.rule_code,pandas.tseries.offsets.CustomBusinessHour.rule_code#CustomBusinessHour.rule_code#
Pandas,Date offsets,pandas.tseries.offsets.CustomBusinessHour.n,pandas.tseries.offsets.CustomBusinessHour.n#CustomBusinessHour.n#
Pandas,Date offsets,pandas.tseries.offsets.CustomBusinessHour.weekmask,pandas.tseries.offsets.CustomBusinessHour.weekmask#CustomBusinessHour.weekmask#
Pandas,Date offsets,pandas.tseries.offsets.CustomBusinessHour.calendar,pandas.tseries.offsets.CustomBusinessHour.calendar#CustomBusinessHour.calendar#
Pandas,Date offsets,pandas.tseries.offsets.CustomBusinessHour.holidays,pandas.tseries.offsets.CustomBusinessHour.holidays#CustomBusinessHour.holidays#
Pandas,Date offsets,pandas.tseries.offsets.CustomBusinessHour.start,pandas.tseries.offsets.CustomBusinessHour.start#CustomBusinessHour.start#
Pandas,Date offsets,pandas.tseries.offsets.CustomBusinessHour.end,pandas.tseries.offsets.CustomBusinessHour.end#CustomBusinessHour.end#
Pandas,Date offsets,pandas.tseries.offsets.CustomBusinessHour.copy,pandas.tseries.offsets.CustomBusinessHour.copy#CustomBusinessHour.copy()#Return a copy of the frequency.Examples>>>freq=pd.DateOffset(1)>>>freq_copy=freq.copy()>>>freqisfreq_copyFalse
Pandas,Date offsets,pandas.tseries.offsets.CustomBusinessHour.is_anchored,pandas.tseries.offsets.CustomBusinessHour.is_anchored#CustomBusinessHour.is_anchored()#Return boolean whether the frequency is a unit frequency (n=1).Examples>>>pd.DateOffset().is_anchored()True>>>pd.DateOffset(2).is_anchored()False
Pandas,Date offsets,pandas.tseries.offsets.CustomBusinessHour.is_on_offset,"pandas.tseries.offsets.CustomBusinessHour.is_on_offset#CustomBusinessHour.is_on_offset()#Return boolean whether a timestamp intersects with this frequency.Parameters:dtdatetime.datetimeTimestamp to check intersections with frequency.Examples>>>ts=pd.Timestamp(2022,1,1)>>>freq=pd.offsets.Day(1)>>>freq.is_on_offset(ts)True>>>ts=pd.Timestamp(2022,8,6)>>>ts.day_name()'Saturday'>>>freq=pd.offsets.BusinessDay(1)>>>freq.is_on_offset(ts)False"
Pandas,Date offsets,pandas.tseries.offsets.CustomBusinessHour.is_month_start,"pandas.tseries.offsets.CustomBusinessHour.is_month_start#CustomBusinessHour.is_month_start()#Return boolean whether a timestamp occurs on the month start.Examples>>>ts=pd.Timestamp(2022,1,1)>>>freq=pd.offsets.Hour(5)>>>freq.is_month_start(ts)True"
Pandas,Date offsets,pandas.tseries.offsets.CustomBusinessHour.is_month_end,"pandas.tseries.offsets.CustomBusinessHour.is_month_end#CustomBusinessHour.is_month_end()#Return boolean whether a timestamp occurs on the month end.Examples>>>ts=pd.Timestamp(2022,1,1)>>>freq=pd.offsets.Hour(5)>>>freq.is_month_end(ts)False"
Pandas,Date offsets,pandas.tseries.offsets.CustomBusinessHour.is_quarter_start,"pandas.tseries.offsets.CustomBusinessHour.is_quarter_start#CustomBusinessHour.is_quarter_start()#Return boolean whether a timestamp occurs on the quarter start.Examples>>>ts=pd.Timestamp(2022,1,1)>>>freq=pd.offsets.Hour(5)>>>freq.is_quarter_start(ts)True"
Pandas,Date offsets,pandas.tseries.offsets.CustomBusinessHour.is_quarter_end,"pandas.tseries.offsets.CustomBusinessHour.is_quarter_end#CustomBusinessHour.is_quarter_end()#Return boolean whether a timestamp occurs on the quarter end.Examples>>>ts=pd.Timestamp(2022,1,1)>>>freq=pd.offsets.Hour(5)>>>freq.is_quarter_end(ts)False"
Pandas,Date offsets,pandas.tseries.offsets.CustomBusinessHour.is_year_start,"pandas.tseries.offsets.CustomBusinessHour.is_year_start#CustomBusinessHour.is_year_start()#Return boolean whether a timestamp occurs on the year start.Examples>>>ts=pd.Timestamp(2022,1,1)>>>freq=pd.offsets.Hour(5)>>>freq.is_year_start(ts)True"
Pandas,Date offsets,pandas.tseries.offsets.CustomBusinessHour.is_year_end,"pandas.tseries.offsets.CustomBusinessHour.is_year_end#CustomBusinessHour.is_year_end()#Return boolean whether a timestamp occurs on the year end.Examples>>>ts=pd.Timestamp(2022,1,1)>>>freq=pd.offsets.Hour(5)>>>freq.is_year_end(ts)False"
Pandas,Date offsets,pandas.tseries.offsets.MonthEnd,"pandas.tseries.offsets.MonthEnd#classpandas.tseries.offsets.MonthEnd#DateOffset of one month end.MonthEnd goes to the next date which is an end of the month.Parameters:nint, default 1The number of months represented.normalizebool, default FalseNormalize start/end dates to midnight before generating date range.See alsoDateOffsetStandard kind of date increment.Examples>>>ts=pd.Timestamp(2022,1,30)>>>ts+pd.offsets.MonthEnd()Timestamp('2022-01-31 00:00:00')>>>ts=pd.Timestamp(2022,1,31)>>>ts+pd.offsets.MonthEnd()Timestamp('2022-02-28 00:00:00')If you want to get the end of the current month:>>>ts=pd.Timestamp(2022,1,31)>>>pd.offsets.MonthEnd().rollforward(ts)Timestamp('2022-01-31 00:00:00')AttributesbaseReturns a copy of the calling offset object with n=1 and all other attributes equal.freqstrReturn a string representing the frequency.kwdsReturn a dict of extra parameters for the offset.nameReturn a string representing the base frequency.nnanosnormalizerule_codeMethodscopyReturn a copy of the frequency.is_anchoredReturn boolean whether the frequency is a unit frequency (n=1).is_month_endReturn boolean whether a timestamp occurs on the month end.is_month_startReturn boolean whether a timestamp occurs on the month start.is_on_offsetReturn boolean whether a timestamp intersects with this frequency.is_quarter_endReturn boolean whether a timestamp occurs on the quarter end.is_quarter_startReturn boolean whether a timestamp occurs on the quarter start.is_year_endReturn boolean whether a timestamp occurs on the year end.is_year_startReturn boolean whether a timestamp occurs on the year start.rollbackRoll provided date backward to next offset only if not on offset.rollforwardRoll provided date forward to next offset only if not on offset."
Pandas,Date offsets,pandas.tseries.offsets.MonthEnd.freqstr,pandas.tseries.offsets.MonthEnd.freqstr#MonthEnd.freqstr#Return a string representing the frequency.Examples>>>pd.DateOffset(5).freqstr'<5 * DateOffsets>'>>>pd.offsets.BusinessHour(2).freqstr'2BH'>>>pd.offsets.Nano().freqstr'N'>>>pd.offsets.Nano(-3).freqstr'-3N'
Pandas,Date offsets,pandas.tseries.offsets.MonthEnd.kwds,"pandas.tseries.offsets.MonthEnd.kwds#MonthEnd.kwds#Return a dict of extra parameters for the offset.Examples>>>pd.DateOffset(5).kwds{}>>>pd.offsets.FY5253Quarter().kwds{'weekday': 0,'startingMonth': 1,'qtr_with_extra_week': 1,'variation': 'nearest'}"
Pandas,Date offsets,pandas.tseries.offsets.MonthEnd.name,pandas.tseries.offsets.MonthEnd.name#MonthEnd.name#Return a string representing the base frequency.Examples>>>pd.offsets.Hour().name'H'>>>pd.offsets.Hour(5).name'H'
Pandas,Date offsets,pandas.tseries.offsets.MonthEnd.nanos,pandas.tseries.offsets.MonthEnd.nanos#MonthEnd.nanos#
Pandas,Date offsets,pandas.tseries.offsets.MonthEnd.normalize,pandas.tseries.offsets.MonthEnd.normalize#MonthEnd.normalize#
Pandas,Date offsets,pandas.tseries.offsets.MonthEnd.rule_code,pandas.tseries.offsets.MonthEnd.rule_code#MonthEnd.rule_code#
Pandas,Date offsets,pandas.tseries.offsets.MonthEnd.n,pandas.tseries.offsets.MonthEnd.n#MonthEnd.n#
Pandas,Date offsets,pandas.tseries.offsets.MonthEnd.copy,pandas.tseries.offsets.MonthEnd.copy#MonthEnd.copy()#Return a copy of the frequency.Examples>>>freq=pd.DateOffset(1)>>>freq_copy=freq.copy()>>>freqisfreq_copyFalse
Pandas,Date offsets,pandas.tseries.offsets.MonthEnd.is_anchored,pandas.tseries.offsets.MonthEnd.is_anchored#MonthEnd.is_anchored()#Return boolean whether the frequency is a unit frequency (n=1).Examples>>>pd.DateOffset().is_anchored()True>>>pd.DateOffset(2).is_anchored()False
Pandas,Date offsets,pandas.tseries.offsets.MonthEnd.is_on_offset,"pandas.tseries.offsets.MonthEnd.is_on_offset#MonthEnd.is_on_offset()#Return boolean whether a timestamp intersects with this frequency.Parameters:dtdatetime.datetimeTimestamp to check intersections with frequency.Examples>>>ts=pd.Timestamp(2022,1,1)>>>freq=pd.offsets.Day(1)>>>freq.is_on_offset(ts)True>>>ts=pd.Timestamp(2022,8,6)>>>ts.day_name()'Saturday'>>>freq=pd.offsets.BusinessDay(1)>>>freq.is_on_offset(ts)False"
Pandas,Date offsets,pandas.tseries.offsets.MonthEnd.is_month_start,"pandas.tseries.offsets.MonthEnd.is_month_start#MonthEnd.is_month_start()#Return boolean whether a timestamp occurs on the month start.Examples>>>ts=pd.Timestamp(2022,1,1)>>>freq=pd.offsets.Hour(5)>>>freq.is_month_start(ts)True"
Pandas,Date offsets,pandas.tseries.offsets.MonthEnd.is_month_end,"pandas.tseries.offsets.MonthEnd.is_month_end#MonthEnd.is_month_end()#Return boolean whether a timestamp occurs on the month end.Examples>>>ts=pd.Timestamp(2022,1,1)>>>freq=pd.offsets.Hour(5)>>>freq.is_month_end(ts)False"
Pandas,Date offsets,pandas.tseries.offsets.MonthEnd.is_quarter_start,"pandas.tseries.offsets.MonthEnd.is_quarter_start#MonthEnd.is_quarter_start()#Return boolean whether a timestamp occurs on the quarter start.Examples>>>ts=pd.Timestamp(2022,1,1)>>>freq=pd.offsets.Hour(5)>>>freq.is_quarter_start(ts)True"
Pandas,Date offsets,pandas.tseries.offsets.MonthEnd.is_quarter_end,"pandas.tseries.offsets.MonthEnd.is_quarter_end#MonthEnd.is_quarter_end()#Return boolean whether a timestamp occurs on the quarter end.Examples>>>ts=pd.Timestamp(2022,1,1)>>>freq=pd.offsets.Hour(5)>>>freq.is_quarter_end(ts)False"
Pandas,Date offsets,pandas.tseries.offsets.MonthEnd.is_year_start,"pandas.tseries.offsets.MonthEnd.is_year_start#MonthEnd.is_year_start()#Return boolean whether a timestamp occurs on the year start.Examples>>>ts=pd.Timestamp(2022,1,1)>>>freq=pd.offsets.Hour(5)>>>freq.is_year_start(ts)True"
Pandas,Date offsets,pandas.tseries.offsets.MonthEnd.is_year_end,"pandas.tseries.offsets.MonthEnd.is_year_end#MonthEnd.is_year_end()#Return boolean whether a timestamp occurs on the year end.Examples>>>ts=pd.Timestamp(2022,1,1)>>>freq=pd.offsets.Hour(5)>>>freq.is_year_end(ts)False"
Pandas,Date offsets,pandas.tseries.offsets.MonthBegin,"pandas.tseries.offsets.MonthBegin#classpandas.tseries.offsets.MonthBegin#DateOffset of one month at beginning.MonthBegin goes to the next date which is a start of the month.Parameters:nint, default 1The number of months represented.normalizebool, default FalseNormalize start/end dates to midnight before generating date range.See alsoDateOffsetStandard kind of date increment.Examples>>>ts=pd.Timestamp(2022,11,30)>>>ts+pd.offsets.MonthBegin()Timestamp('2022-12-01 00:00:00')>>>ts=pd.Timestamp(2022,12,1)>>>ts+pd.offsets.MonthBegin()Timestamp('2023-01-01 00:00:00')If you want to get the start of the current month:>>>ts=pd.Timestamp(2022,12,1)>>>pd.offsets.MonthBegin().rollback(ts)Timestamp('2022-12-01 00:00:00')AttributesbaseReturns a copy of the calling offset object with n=1 and all other attributes equal.freqstrReturn a string representing the frequency.kwdsReturn a dict of extra parameters for the offset.nameReturn a string representing the base frequency.nnanosnormalizerule_codeMethodscopyReturn a copy of the frequency.is_anchoredReturn boolean whether the frequency is a unit frequency (n=1).is_month_endReturn boolean whether a timestamp occurs on the month end.is_month_startReturn boolean whether a timestamp occurs on the month start.is_on_offsetReturn boolean whether a timestamp intersects with this frequency.is_quarter_endReturn boolean whether a timestamp occurs on the quarter end.is_quarter_startReturn boolean whether a timestamp occurs on the quarter start.is_year_endReturn boolean whether a timestamp occurs on the year end.is_year_startReturn boolean whether a timestamp occurs on the year start.rollbackRoll provided date backward to next offset only if not on offset.rollforwardRoll provided date forward to next offset only if not on offset."
Pandas,Date offsets,pandas.tseries.offsets.MonthBegin.freqstr,pandas.tseries.offsets.MonthBegin.freqstr#MonthBegin.freqstr#Return a string representing the frequency.Examples>>>pd.DateOffset(5).freqstr'<5 * DateOffsets>'>>>pd.offsets.BusinessHour(2).freqstr'2BH'>>>pd.offsets.Nano().freqstr'N'>>>pd.offsets.Nano(-3).freqstr'-3N'
Pandas,Date offsets,pandas.tseries.offsets.MonthBegin.kwds,"pandas.tseries.offsets.MonthBegin.kwds#MonthBegin.kwds#Return a dict of extra parameters for the offset.Examples>>>pd.DateOffset(5).kwds{}>>>pd.offsets.FY5253Quarter().kwds{'weekday': 0,'startingMonth': 1,'qtr_with_extra_week': 1,'variation': 'nearest'}"
Pandas,Date offsets,pandas.tseries.offsets.MonthBegin.name,pandas.tseries.offsets.MonthBegin.name#MonthBegin.name#Return a string representing the base frequency.Examples>>>pd.offsets.Hour().name'H'>>>pd.offsets.Hour(5).name'H'
Pandas,Date offsets,pandas.tseries.offsets.MonthBegin.nanos,pandas.tseries.offsets.MonthBegin.nanos#MonthBegin.nanos#
Pandas,Date offsets,pandas.tseries.offsets.MonthBegin.normalize,pandas.tseries.offsets.MonthBegin.normalize#MonthBegin.normalize#
Pandas,Date offsets,pandas.tseries.offsets.MonthBegin.rule_code,pandas.tseries.offsets.MonthBegin.rule_code#MonthBegin.rule_code#
Pandas,Date offsets,pandas.tseries.offsets.MonthBegin.n,pandas.tseries.offsets.MonthBegin.n#MonthBegin.n#
Pandas,Date offsets,pandas.tseries.offsets.MonthBegin.copy,pandas.tseries.offsets.MonthBegin.copy#MonthBegin.copy()#Return a copy of the frequency.Examples>>>freq=pd.DateOffset(1)>>>freq_copy=freq.copy()>>>freqisfreq_copyFalse
Pandas,Date offsets,pandas.tseries.offsets.MonthBegin.is_anchored,pandas.tseries.offsets.MonthBegin.is_anchored#MonthBegin.is_anchored()#Return boolean whether the frequency is a unit frequency (n=1).Examples>>>pd.DateOffset().is_anchored()True>>>pd.DateOffset(2).is_anchored()False
Pandas,Date offsets,pandas.tseries.offsets.MonthBegin.is_on_offset,"pandas.tseries.offsets.MonthBegin.is_on_offset#MonthBegin.is_on_offset()#Return boolean whether a timestamp intersects with this frequency.Parameters:dtdatetime.datetimeTimestamp to check intersections with frequency.Examples>>>ts=pd.Timestamp(2022,1,1)>>>freq=pd.offsets.Day(1)>>>freq.is_on_offset(ts)True>>>ts=pd.Timestamp(2022,8,6)>>>ts.day_name()'Saturday'>>>freq=pd.offsets.BusinessDay(1)>>>freq.is_on_offset(ts)False"
Pandas,Date offsets,pandas.tseries.offsets.MonthBegin.is_month_start,"pandas.tseries.offsets.MonthBegin.is_month_start#MonthBegin.is_month_start()#Return boolean whether a timestamp occurs on the month start.Examples>>>ts=pd.Timestamp(2022,1,1)>>>freq=pd.offsets.Hour(5)>>>freq.is_month_start(ts)True"
Pandas,Date offsets,pandas.tseries.offsets.MonthBegin.is_month_end,"pandas.tseries.offsets.MonthBegin.is_month_end#MonthBegin.is_month_end()#Return boolean whether a timestamp occurs on the month end.Examples>>>ts=pd.Timestamp(2022,1,1)>>>freq=pd.offsets.Hour(5)>>>freq.is_month_end(ts)False"
Pandas,Date offsets,pandas.tseries.offsets.MonthBegin.is_quarter_start,"pandas.tseries.offsets.MonthBegin.is_quarter_start#MonthBegin.is_quarter_start()#Return boolean whether a timestamp occurs on the quarter start.Examples>>>ts=pd.Timestamp(2022,1,1)>>>freq=pd.offsets.Hour(5)>>>freq.is_quarter_start(ts)True"
Pandas,Date offsets,pandas.tseries.offsets.MonthBegin.is_quarter_end,"pandas.tseries.offsets.MonthBegin.is_quarter_end#MonthBegin.is_quarter_end()#Return boolean whether a timestamp occurs on the quarter end.Examples>>>ts=pd.Timestamp(2022,1,1)>>>freq=pd.offsets.Hour(5)>>>freq.is_quarter_end(ts)False"
Pandas,Date offsets,pandas.tseries.offsets.MonthBegin.is_year_start,"pandas.tseries.offsets.MonthBegin.is_year_start#MonthBegin.is_year_start()#Return boolean whether a timestamp occurs on the year start.Examples>>>ts=pd.Timestamp(2022,1,1)>>>freq=pd.offsets.Hour(5)>>>freq.is_year_start(ts)True"
Pandas,Date offsets,pandas.tseries.offsets.MonthBegin.is_year_end,"pandas.tseries.offsets.MonthBegin.is_year_end#MonthBegin.is_year_end()#Return boolean whether a timestamp occurs on the year end.Examples>>>ts=pd.Timestamp(2022,1,1)>>>freq=pd.offsets.Hour(5)>>>freq.is_year_end(ts)False"
Pandas,Date offsets,pandas.tseries.offsets.BusinessMonthEnd,"pandas.tseries.offsets.BusinessMonthEnd#classpandas.tseries.offsets.BusinessMonthEnd#DateOffset increments between the last business day of the month.BusinessMonthEnd goes to the next date which is the last business day of the month.Parameters:nint, default 1The number of months represented.normalizebool, default FalseNormalize start/end dates to midnight before generating date range.See alsoDateOffsetStandard kind of date increment.Examples>>>ts=pd.Timestamp(2022,11,29)>>>ts+pd.offsets.BMonthEnd()Timestamp('2022-11-30 00:00:00')>>>ts=pd.Timestamp(2022,11,30)>>>ts+pd.offsets.BMonthEnd()Timestamp('2022-12-30 00:00:00')If you want to get the end of the current business month:>>>ts=pd.Timestamp(2022,11,30)>>>pd.offsets.BMonthEnd().rollforward(ts)Timestamp('2022-11-30 00:00:00')AttributesbaseReturns a copy of the calling offset object with n=1 and all other attributes equal.freqstrReturn a string representing the frequency.kwdsReturn a dict of extra parameters for the offset.nameReturn a string representing the base frequency.nnanosnormalizerule_codeMethodscopyReturn a copy of the frequency.is_anchoredReturn boolean whether the frequency is a unit frequency (n=1).is_month_endReturn boolean whether a timestamp occurs on the month end.is_month_startReturn boolean whether a timestamp occurs on the month start.is_on_offsetReturn boolean whether a timestamp intersects with this frequency.is_quarter_endReturn boolean whether a timestamp occurs on the quarter end.is_quarter_startReturn boolean whether a timestamp occurs on the quarter start.is_year_endReturn boolean whether a timestamp occurs on the year end.is_year_startReturn boolean whether a timestamp occurs on the year start.rollbackRoll provided date backward to next offset only if not on offset.rollforwardRoll provided date forward to next offset only if not on offset."
Pandas,Date offsets,pandas.tseries.offsets.BMonthEnd,pandas.tseries.offsets.BMonthEnd#pandas.tseries.offsets.BMonthEnd#alias ofBusinessMonthEnd
Pandas,Date offsets,pandas.tseries.offsets.BusinessMonthEnd.freqstr,pandas.tseries.offsets.BusinessMonthEnd.freqstr#BusinessMonthEnd.freqstr#Return a string representing the frequency.Examples>>>pd.DateOffset(5).freqstr'<5 * DateOffsets>'>>>pd.offsets.BusinessHour(2).freqstr'2BH'>>>pd.offsets.Nano().freqstr'N'>>>pd.offsets.Nano(-3).freqstr'-3N'
Pandas,Date offsets,pandas.tseries.offsets.BusinessMonthEnd.kwds,"pandas.tseries.offsets.BusinessMonthEnd.kwds#BusinessMonthEnd.kwds#Return a dict of extra parameters for the offset.Examples>>>pd.DateOffset(5).kwds{}>>>pd.offsets.FY5253Quarter().kwds{'weekday': 0,'startingMonth': 1,'qtr_with_extra_week': 1,'variation': 'nearest'}"
Pandas,Date offsets,pandas.tseries.offsets.BusinessMonthEnd.name,pandas.tseries.offsets.BusinessMonthEnd.name#BusinessMonthEnd.name#Return a string representing the base frequency.Examples>>>pd.offsets.Hour().name'H'>>>pd.offsets.Hour(5).name'H'
Pandas,Date offsets,pandas.tseries.offsets.BusinessMonthEnd.nanos,pandas.tseries.offsets.BusinessMonthEnd.nanos#BusinessMonthEnd.nanos#
Pandas,Date offsets,pandas.tseries.offsets.BusinessMonthEnd.normalize,pandas.tseries.offsets.BusinessMonthEnd.normalize#BusinessMonthEnd.normalize#
Pandas,Date offsets,pandas.tseries.offsets.BusinessMonthEnd.rule_code,pandas.tseries.offsets.BusinessMonthEnd.rule_code#BusinessMonthEnd.rule_code#
Pandas,Date offsets,pandas.tseries.offsets.BusinessMonthEnd.n,pandas.tseries.offsets.BusinessMonthEnd.n#BusinessMonthEnd.n#
Pandas,Date offsets,pandas.tseries.offsets.BusinessMonthEnd.copy,pandas.tseries.offsets.BusinessMonthEnd.copy#BusinessMonthEnd.copy()#Return a copy of the frequency.Examples>>>freq=pd.DateOffset(1)>>>freq_copy=freq.copy()>>>freqisfreq_copyFalse
Pandas,Date offsets,pandas.tseries.offsets.BusinessMonthEnd.is_anchored,pandas.tseries.offsets.BusinessMonthEnd.is_anchored#BusinessMonthEnd.is_anchored()#Return boolean whether the frequency is a unit frequency (n=1).Examples>>>pd.DateOffset().is_anchored()True>>>pd.DateOffset(2).is_anchored()False
Pandas,Date offsets,pandas.tseries.offsets.BusinessMonthEnd.is_on_offset,"pandas.tseries.offsets.BusinessMonthEnd.is_on_offset#BusinessMonthEnd.is_on_offset()#Return boolean whether a timestamp intersects with this frequency.Parameters:dtdatetime.datetimeTimestamp to check intersections with frequency.Examples>>>ts=pd.Timestamp(2022,1,1)>>>freq=pd.offsets.Day(1)>>>freq.is_on_offset(ts)True>>>ts=pd.Timestamp(2022,8,6)>>>ts.day_name()'Saturday'>>>freq=pd.offsets.BusinessDay(1)>>>freq.is_on_offset(ts)False"
Pandas,Date offsets,pandas.tseries.offsets.BusinessMonthEnd.is_month_start,"pandas.tseries.offsets.BusinessMonthEnd.is_month_start#BusinessMonthEnd.is_month_start()#Return boolean whether a timestamp occurs on the month start.Examples>>>ts=pd.Timestamp(2022,1,1)>>>freq=pd.offsets.Hour(5)>>>freq.is_month_start(ts)True"
Pandas,Date offsets,pandas.tseries.offsets.BusinessMonthEnd.is_month_end,"pandas.tseries.offsets.BusinessMonthEnd.is_month_end#BusinessMonthEnd.is_month_end()#Return boolean whether a timestamp occurs on the month end.Examples>>>ts=pd.Timestamp(2022,1,1)>>>freq=pd.offsets.Hour(5)>>>freq.is_month_end(ts)False"
Pandas,Date offsets,pandas.tseries.offsets.BusinessMonthEnd.is_quarter_start,"pandas.tseries.offsets.BusinessMonthEnd.is_quarter_start#BusinessMonthEnd.is_quarter_start()#Return boolean whether a timestamp occurs on the quarter start.Examples>>>ts=pd.Timestamp(2022,1,1)>>>freq=pd.offsets.Hour(5)>>>freq.is_quarter_start(ts)True"
Pandas,Date offsets,pandas.tseries.offsets.BusinessMonthEnd.is_quarter_end,"pandas.tseries.offsets.BusinessMonthEnd.is_quarter_end#BusinessMonthEnd.is_quarter_end()#Return boolean whether a timestamp occurs on the quarter end.Examples>>>ts=pd.Timestamp(2022,1,1)>>>freq=pd.offsets.Hour(5)>>>freq.is_quarter_end(ts)False"
Pandas,Date offsets,pandas.tseries.offsets.BusinessMonthEnd.is_year_start,"pandas.tseries.offsets.BusinessMonthEnd.is_year_start#BusinessMonthEnd.is_year_start()#Return boolean whether a timestamp occurs on the year start.Examples>>>ts=pd.Timestamp(2022,1,1)>>>freq=pd.offsets.Hour(5)>>>freq.is_year_start(ts)True"
Pandas,Date offsets,pandas.tseries.offsets.BusinessMonthEnd.is_year_end,"pandas.tseries.offsets.BusinessMonthEnd.is_year_end#BusinessMonthEnd.is_year_end()#Return boolean whether a timestamp occurs on the year end.Examples>>>ts=pd.Timestamp(2022,1,1)>>>freq=pd.offsets.Hour(5)>>>freq.is_year_end(ts)False"
Pandas,Date offsets,pandas.tseries.offsets.BusinessMonthBegin,"pandas.tseries.offsets.BusinessMonthBegin#classpandas.tseries.offsets.BusinessMonthBegin#DateOffset of one month at the first business day.BusinessMonthBegin goes to the next date which is the first business day
of the month.Parameters:nint, default 1The number of months represented.normalizebool, default FalseNormalize start/end dates to midnight before generating date range.See alsoDateOffsetStandard kind of date increment.Examples>>>ts=pd.Timestamp(2022,11,30)>>>ts+pd.offsets.BMonthBegin()Timestamp('2022-12-01 00:00:00')>>>ts=pd.Timestamp(2022,12,1)>>>ts+pd.offsets.BMonthBegin()Timestamp('2023-01-02 00:00:00')If you want to get the start of the current business month:>>>ts=pd.Timestamp(2022,12,1)>>>pd.offsets.BMonthBegin().rollback(ts)Timestamp('2022-12-01 00:00:00')AttributesbaseReturns a copy of the calling offset object with n=1 and all other attributes equal.freqstrReturn a string representing the frequency.kwdsReturn a dict of extra parameters for the offset.nameReturn a string representing the base frequency.nnanosnormalizerule_codeMethodscopyReturn a copy of the frequency.is_anchoredReturn boolean whether the frequency is a unit frequency (n=1).is_month_endReturn boolean whether a timestamp occurs on the month end.is_month_startReturn boolean whether a timestamp occurs on the month start.is_on_offsetReturn boolean whether a timestamp intersects with this frequency.is_quarter_endReturn boolean whether a timestamp occurs on the quarter end.is_quarter_startReturn boolean whether a timestamp occurs on the quarter start.is_year_endReturn boolean whether a timestamp occurs on the year end.is_year_startReturn boolean whether a timestamp occurs on the year start.rollbackRoll provided date backward to next offset only if not on offset.rollforwardRoll provided date forward to next offset only if not on offset."
Pandas,Date offsets,pandas.tseries.offsets.BMonthBegin,pandas.tseries.offsets.BMonthBegin#pandas.tseries.offsets.BMonthBegin#alias ofBusinessMonthBegin
Pandas,Date offsets,pandas.tseries.offsets.BusinessMonthBegin.freqstr,pandas.tseries.offsets.BusinessMonthBegin.freqstr#BusinessMonthBegin.freqstr#Return a string representing the frequency.Examples>>>pd.DateOffset(5).freqstr'<5 * DateOffsets>'>>>pd.offsets.BusinessHour(2).freqstr'2BH'>>>pd.offsets.Nano().freqstr'N'>>>pd.offsets.Nano(-3).freqstr'-3N'
Pandas,Date offsets,pandas.tseries.offsets.BusinessMonthBegin.kwds,"pandas.tseries.offsets.BusinessMonthBegin.kwds#BusinessMonthBegin.kwds#Return a dict of extra parameters for the offset.Examples>>>pd.DateOffset(5).kwds{}>>>pd.offsets.FY5253Quarter().kwds{'weekday': 0,'startingMonth': 1,'qtr_with_extra_week': 1,'variation': 'nearest'}"
Pandas,Date offsets,pandas.tseries.offsets.BusinessMonthBegin.name,pandas.tseries.offsets.BusinessMonthBegin.name#BusinessMonthBegin.name#Return a string representing the base frequency.Examples>>>pd.offsets.Hour().name'H'>>>pd.offsets.Hour(5).name'H'
Pandas,Date offsets,pandas.tseries.offsets.BusinessMonthBegin.nanos,pandas.tseries.offsets.BusinessMonthBegin.nanos#BusinessMonthBegin.nanos#
Pandas,Date offsets,pandas.tseries.offsets.BusinessMonthBegin.normalize,pandas.tseries.offsets.BusinessMonthBegin.normalize#BusinessMonthBegin.normalize#
Pandas,Date offsets,pandas.tseries.offsets.BusinessMonthBegin.rule_code,pandas.tseries.offsets.BusinessMonthBegin.rule_code#BusinessMonthBegin.rule_code#
Pandas,Date offsets,pandas.tseries.offsets.BusinessMonthBegin.n,pandas.tseries.offsets.BusinessMonthBegin.n#BusinessMonthBegin.n#
Pandas,Date offsets,pandas.tseries.offsets.BusinessMonthBegin.copy,pandas.tseries.offsets.BusinessMonthBegin.copy#BusinessMonthBegin.copy()#Return a copy of the frequency.Examples>>>freq=pd.DateOffset(1)>>>freq_copy=freq.copy()>>>freqisfreq_copyFalse
Pandas,Date offsets,pandas.tseries.offsets.BusinessMonthBegin.is_anchored,pandas.tseries.offsets.BusinessMonthBegin.is_anchored#BusinessMonthBegin.is_anchored()#Return boolean whether the frequency is a unit frequency (n=1).Examples>>>pd.DateOffset().is_anchored()True>>>pd.DateOffset(2).is_anchored()False
Pandas,Date offsets,pandas.tseries.offsets.BusinessMonthBegin.is_on_offset,"pandas.tseries.offsets.BusinessMonthBegin.is_on_offset#BusinessMonthBegin.is_on_offset()#Return boolean whether a timestamp intersects with this frequency.Parameters:dtdatetime.datetimeTimestamp to check intersections with frequency.Examples>>>ts=pd.Timestamp(2022,1,1)>>>freq=pd.offsets.Day(1)>>>freq.is_on_offset(ts)True>>>ts=pd.Timestamp(2022,8,6)>>>ts.day_name()'Saturday'>>>freq=pd.offsets.BusinessDay(1)>>>freq.is_on_offset(ts)False"
Pandas,Date offsets,pandas.tseries.offsets.BusinessMonthBegin.is_month_start,"pandas.tseries.offsets.BusinessMonthBegin.is_month_start#BusinessMonthBegin.is_month_start()#Return boolean whether a timestamp occurs on the month start.Examples>>>ts=pd.Timestamp(2022,1,1)>>>freq=pd.offsets.Hour(5)>>>freq.is_month_start(ts)True"
Pandas,Date offsets,pandas.tseries.offsets.BusinessMonthBegin.is_month_end,"pandas.tseries.offsets.BusinessMonthBegin.is_month_end#BusinessMonthBegin.is_month_end()#Return boolean whether a timestamp occurs on the month end.Examples>>>ts=pd.Timestamp(2022,1,1)>>>freq=pd.offsets.Hour(5)>>>freq.is_month_end(ts)False"
Pandas,Date offsets,pandas.tseries.offsets.BusinessMonthBegin.is_quarter_start,"pandas.tseries.offsets.BusinessMonthBegin.is_quarter_start#BusinessMonthBegin.is_quarter_start()#Return boolean whether a timestamp occurs on the quarter start.Examples>>>ts=pd.Timestamp(2022,1,1)>>>freq=pd.offsets.Hour(5)>>>freq.is_quarter_start(ts)True"
Pandas,Date offsets,pandas.tseries.offsets.BusinessMonthBegin.is_quarter_end,"pandas.tseries.offsets.BusinessMonthBegin.is_quarter_end#BusinessMonthBegin.is_quarter_end()#Return boolean whether a timestamp occurs on the quarter end.Examples>>>ts=pd.Timestamp(2022,1,1)>>>freq=pd.offsets.Hour(5)>>>freq.is_quarter_end(ts)False"
Pandas,Date offsets,pandas.tseries.offsets.BusinessMonthBegin.is_year_start,"pandas.tseries.offsets.BusinessMonthBegin.is_year_start#BusinessMonthBegin.is_year_start()#Return boolean whether a timestamp occurs on the year start.Examples>>>ts=pd.Timestamp(2022,1,1)>>>freq=pd.offsets.Hour(5)>>>freq.is_year_start(ts)True"
Pandas,Date offsets,pandas.tseries.offsets.BusinessMonthBegin.is_year_end,"pandas.tseries.offsets.BusinessMonthBegin.is_year_end#BusinessMonthBegin.is_year_end()#Return boolean whether a timestamp occurs on the year end.Examples>>>ts=pd.Timestamp(2022,1,1)>>>freq=pd.offsets.Hour(5)>>>freq.is_year_end(ts)False"
Pandas,Date offsets,pandas.tseries.offsets.CustomBusinessMonthEnd,pandas.tseries.offsets.CustomBusinessMonthEnd#classpandas.tseries.offsets.CustomBusinessMonthEnd#AttributesbaseReturns a copy of the calling offset object with n=1 and all other attributes equal.cbday_rollDefine default roll function to be called in apply method.freqstrReturn a string representing the frequency.kwdsReturn a dict of extra parameters for the offset.month_rollDefine default roll function to be called in apply method.nameReturn a string representing the base frequency.offsetAlias for self._offset.calendarholidaysm_offsetnnanosnormalizerule_codeweekmaskMethodscopyReturn a copy of the frequency.is_anchoredReturn boolean whether the frequency is a unit frequency (n=1).is_month_endReturn boolean whether a timestamp occurs on the month end.is_month_startReturn boolean whether a timestamp occurs on the month start.is_on_offsetReturn boolean whether a timestamp intersects with this frequency.is_quarter_endReturn boolean whether a timestamp occurs on the quarter end.is_quarter_startReturn boolean whether a timestamp occurs on the quarter start.is_year_endReturn boolean whether a timestamp occurs on the year end.is_year_startReturn boolean whether a timestamp occurs on the year start.rollbackRoll provided date backward to next offset only if not on offset.rollforwardRoll provided date forward to next offset only if not on offset.
Pandas,Date offsets,pandas.tseries.offsets.CBMonthEnd,pandas.tseries.offsets.CBMonthEnd#pandas.tseries.offsets.CBMonthEnd#alias ofCustomBusinessMonthEnd
Pandas,Date offsets,pandas.tseries.offsets.CustomBusinessMonthEnd.freqstr,pandas.tseries.offsets.CustomBusinessMonthEnd.freqstr#CustomBusinessMonthEnd.freqstr#Return a string representing the frequency.Examples>>>pd.DateOffset(5).freqstr'<5 * DateOffsets>'>>>pd.offsets.BusinessHour(2).freqstr'2BH'>>>pd.offsets.Nano().freqstr'N'>>>pd.offsets.Nano(-3).freqstr'-3N'
Pandas,Date offsets,pandas.tseries.offsets.CustomBusinessMonthEnd.kwds,"pandas.tseries.offsets.CustomBusinessMonthEnd.kwds#CustomBusinessMonthEnd.kwds#Return a dict of extra parameters for the offset.Examples>>>pd.DateOffset(5).kwds{}>>>pd.offsets.FY5253Quarter().kwds{'weekday': 0,'startingMonth': 1,'qtr_with_extra_week': 1,'variation': 'nearest'}"
Pandas,Date offsets,pandas.tseries.offsets.CustomBusinessMonthEnd.m_offset,pandas.tseries.offsets.CustomBusinessMonthEnd.m_offset#CustomBusinessMonthEnd.m_offset#
Pandas,Date offsets,pandas.tseries.offsets.CustomBusinessMonthEnd.name,pandas.tseries.offsets.CustomBusinessMonthEnd.name#CustomBusinessMonthEnd.name#Return a string representing the base frequency.Examples>>>pd.offsets.Hour().name'H'>>>pd.offsets.Hour(5).name'H'
Pandas,Date offsets,pandas.tseries.offsets.CustomBusinessMonthEnd.nanos,pandas.tseries.offsets.CustomBusinessMonthEnd.nanos#CustomBusinessMonthEnd.nanos#
Pandas,Date offsets,pandas.tseries.offsets.CustomBusinessMonthEnd.normalize,pandas.tseries.offsets.CustomBusinessMonthEnd.normalize#CustomBusinessMonthEnd.normalize#
Pandas,Date offsets,pandas.tseries.offsets.CustomBusinessMonthEnd.rule_code,pandas.tseries.offsets.CustomBusinessMonthEnd.rule_code#CustomBusinessMonthEnd.rule_code#
Pandas,Date offsets,pandas.tseries.offsets.CustomBusinessMonthEnd.n,pandas.tseries.offsets.CustomBusinessMonthEnd.n#CustomBusinessMonthEnd.n#
Pandas,Date offsets,pandas.tseries.offsets.CustomBusinessMonthEnd.weekmask,pandas.tseries.offsets.CustomBusinessMonthEnd.weekmask#CustomBusinessMonthEnd.weekmask#
Pandas,Date offsets,pandas.tseries.offsets.CustomBusinessMonthEnd.calendar,pandas.tseries.offsets.CustomBusinessMonthEnd.calendar#CustomBusinessMonthEnd.calendar#
Pandas,Date offsets,pandas.tseries.offsets.CustomBusinessMonthEnd.holidays,pandas.tseries.offsets.CustomBusinessMonthEnd.holidays#CustomBusinessMonthEnd.holidays#
Pandas,Date offsets,pandas.tseries.offsets.CustomBusinessMonthEnd.copy,pandas.tseries.offsets.CustomBusinessMonthEnd.copy#CustomBusinessMonthEnd.copy()#Return a copy of the frequency.Examples>>>freq=pd.DateOffset(1)>>>freq_copy=freq.copy()>>>freqisfreq_copyFalse
Pandas,Date offsets,pandas.tseries.offsets.CustomBusinessMonthEnd.is_anchored,pandas.tseries.offsets.CustomBusinessMonthEnd.is_anchored#CustomBusinessMonthEnd.is_anchored()#Return boolean whether the frequency is a unit frequency (n=1).Examples>>>pd.DateOffset().is_anchored()True>>>pd.DateOffset(2).is_anchored()False
Pandas,Date offsets,pandas.tseries.offsets.CustomBusinessMonthEnd.is_on_offset,"pandas.tseries.offsets.CustomBusinessMonthEnd.is_on_offset#CustomBusinessMonthEnd.is_on_offset()#Return boolean whether a timestamp intersects with this frequency.Parameters:dtdatetime.datetimeTimestamp to check intersections with frequency.Examples>>>ts=pd.Timestamp(2022,1,1)>>>freq=pd.offsets.Day(1)>>>freq.is_on_offset(ts)True>>>ts=pd.Timestamp(2022,8,6)>>>ts.day_name()'Saturday'>>>freq=pd.offsets.BusinessDay(1)>>>freq.is_on_offset(ts)False"
Pandas,Date offsets,pandas.tseries.offsets.CustomBusinessMonthEnd.is_month_start,"pandas.tseries.offsets.CustomBusinessMonthEnd.is_month_start#CustomBusinessMonthEnd.is_month_start()#Return boolean whether a timestamp occurs on the month start.Examples>>>ts=pd.Timestamp(2022,1,1)>>>freq=pd.offsets.Hour(5)>>>freq.is_month_start(ts)True"
Pandas,Date offsets,pandas.tseries.offsets.CustomBusinessMonthEnd.is_month_end,"pandas.tseries.offsets.CustomBusinessMonthEnd.is_month_end#CustomBusinessMonthEnd.is_month_end()#Return boolean whether a timestamp occurs on the month end.Examples>>>ts=pd.Timestamp(2022,1,1)>>>freq=pd.offsets.Hour(5)>>>freq.is_month_end(ts)False"
Pandas,Date offsets,pandas.tseries.offsets.CustomBusinessMonthEnd.is_quarter_start,"pandas.tseries.offsets.CustomBusinessMonthEnd.is_quarter_start#CustomBusinessMonthEnd.is_quarter_start()#Return boolean whether a timestamp occurs on the quarter start.Examples>>>ts=pd.Timestamp(2022,1,1)>>>freq=pd.offsets.Hour(5)>>>freq.is_quarter_start(ts)True"
Pandas,Date offsets,pandas.tseries.offsets.CustomBusinessMonthEnd.is_quarter_end,"pandas.tseries.offsets.CustomBusinessMonthEnd.is_quarter_end#CustomBusinessMonthEnd.is_quarter_end()#Return boolean whether a timestamp occurs on the quarter end.Examples>>>ts=pd.Timestamp(2022,1,1)>>>freq=pd.offsets.Hour(5)>>>freq.is_quarter_end(ts)False"
Pandas,Date offsets,pandas.tseries.offsets.CustomBusinessMonthEnd.is_year_start,"pandas.tseries.offsets.CustomBusinessMonthEnd.is_year_start#CustomBusinessMonthEnd.is_year_start()#Return boolean whether a timestamp occurs on the year start.Examples>>>ts=pd.Timestamp(2022,1,1)>>>freq=pd.offsets.Hour(5)>>>freq.is_year_start(ts)True"
Pandas,Date offsets,pandas.tseries.offsets.CustomBusinessMonthEnd.is_year_end,"pandas.tseries.offsets.CustomBusinessMonthEnd.is_year_end#CustomBusinessMonthEnd.is_year_end()#Return boolean whether a timestamp occurs on the year end.Examples>>>ts=pd.Timestamp(2022,1,1)>>>freq=pd.offsets.Hour(5)>>>freq.is_year_end(ts)False"
Pandas,Date offsets,pandas.tseries.offsets.CustomBusinessMonthBegin,pandas.tseries.offsets.CustomBusinessMonthBegin#classpandas.tseries.offsets.CustomBusinessMonthBegin#AttributesbaseReturns a copy of the calling offset object with n=1 and all other attributes equal.cbday_rollDefine default roll function to be called in apply method.freqstrReturn a string representing the frequency.kwdsReturn a dict of extra parameters for the offset.month_rollDefine default roll function to be called in apply method.nameReturn a string representing the base frequency.offsetAlias for self._offset.calendarholidaysm_offsetnnanosnormalizerule_codeweekmaskMethodscopyReturn a copy of the frequency.is_anchoredReturn boolean whether the frequency is a unit frequency (n=1).is_month_endReturn boolean whether a timestamp occurs on the month end.is_month_startReturn boolean whether a timestamp occurs on the month start.is_on_offsetReturn boolean whether a timestamp intersects with this frequency.is_quarter_endReturn boolean whether a timestamp occurs on the quarter end.is_quarter_startReturn boolean whether a timestamp occurs on the quarter start.is_year_endReturn boolean whether a timestamp occurs on the year end.is_year_startReturn boolean whether a timestamp occurs on the year start.rollbackRoll provided date backward to next offset only if not on offset.rollforwardRoll provided date forward to next offset only if not on offset.
Pandas,Date offsets,pandas.tseries.offsets.CBMonthBegin,pandas.tseries.offsets.CBMonthBegin#pandas.tseries.offsets.CBMonthBegin#alias ofCustomBusinessMonthBegin
Pandas,Date offsets,pandas.tseries.offsets.CustomBusinessMonthBegin.freqstr,pandas.tseries.offsets.CustomBusinessMonthBegin.freqstr#CustomBusinessMonthBegin.freqstr#Return a string representing the frequency.Examples>>>pd.DateOffset(5).freqstr'<5 * DateOffsets>'>>>pd.offsets.BusinessHour(2).freqstr'2BH'>>>pd.offsets.Nano().freqstr'N'>>>pd.offsets.Nano(-3).freqstr'-3N'
Pandas,Date offsets,pandas.tseries.offsets.CustomBusinessMonthBegin.kwds,"pandas.tseries.offsets.CustomBusinessMonthBegin.kwds#CustomBusinessMonthBegin.kwds#Return a dict of extra parameters for the offset.Examples>>>pd.DateOffset(5).kwds{}>>>pd.offsets.FY5253Quarter().kwds{'weekday': 0,'startingMonth': 1,'qtr_with_extra_week': 1,'variation': 'nearest'}"
Pandas,Date offsets,pandas.tseries.offsets.CustomBusinessMonthBegin.m_offset,pandas.tseries.offsets.CustomBusinessMonthBegin.m_offset#CustomBusinessMonthBegin.m_offset#
Pandas,Date offsets,pandas.tseries.offsets.CustomBusinessMonthBegin.name,pandas.tseries.offsets.CustomBusinessMonthBegin.name#CustomBusinessMonthBegin.name#Return a string representing the base frequency.Examples>>>pd.offsets.Hour().name'H'>>>pd.offsets.Hour(5).name'H'
Pandas,Date offsets,pandas.tseries.offsets.CustomBusinessMonthBegin.nanos,pandas.tseries.offsets.CustomBusinessMonthBegin.nanos#CustomBusinessMonthBegin.nanos#
Pandas,Date offsets,pandas.tseries.offsets.CustomBusinessMonthBegin.normalize,pandas.tseries.offsets.CustomBusinessMonthBegin.normalize#CustomBusinessMonthBegin.normalize#
Pandas,Date offsets,pandas.tseries.offsets.CustomBusinessMonthBegin.rule_code,pandas.tseries.offsets.CustomBusinessMonthBegin.rule_code#CustomBusinessMonthBegin.rule_code#
Pandas,Date offsets,pandas.tseries.offsets.CustomBusinessMonthBegin.n,pandas.tseries.offsets.CustomBusinessMonthBegin.n#CustomBusinessMonthBegin.n#
Pandas,Date offsets,pandas.tseries.offsets.CustomBusinessMonthBegin.weekmask,pandas.tseries.offsets.CustomBusinessMonthBegin.weekmask#CustomBusinessMonthBegin.weekmask#
Pandas,Date offsets,pandas.tseries.offsets.CustomBusinessMonthBegin.calendar,pandas.tseries.offsets.CustomBusinessMonthBegin.calendar#CustomBusinessMonthBegin.calendar#
Pandas,Date offsets,pandas.tseries.offsets.CustomBusinessMonthBegin.holidays,pandas.tseries.offsets.CustomBusinessMonthBegin.holidays#CustomBusinessMonthBegin.holidays#
Pandas,Date offsets,pandas.tseries.offsets.CustomBusinessMonthBegin.copy,pandas.tseries.offsets.CustomBusinessMonthBegin.copy#CustomBusinessMonthBegin.copy()#Return a copy of the frequency.Examples>>>freq=pd.DateOffset(1)>>>freq_copy=freq.copy()>>>freqisfreq_copyFalse
Pandas,Date offsets,pandas.tseries.offsets.CustomBusinessMonthBegin.is_anchored,pandas.tseries.offsets.CustomBusinessMonthBegin.is_anchored#CustomBusinessMonthBegin.is_anchored()#Return boolean whether the frequency is a unit frequency (n=1).Examples>>>pd.DateOffset().is_anchored()True>>>pd.DateOffset(2).is_anchored()False
Pandas,Date offsets,pandas.tseries.offsets.CustomBusinessMonthBegin.is_on_offset,"pandas.tseries.offsets.CustomBusinessMonthBegin.is_on_offset#CustomBusinessMonthBegin.is_on_offset()#Return boolean whether a timestamp intersects with this frequency.Parameters:dtdatetime.datetimeTimestamp to check intersections with frequency.Examples>>>ts=pd.Timestamp(2022,1,1)>>>freq=pd.offsets.Day(1)>>>freq.is_on_offset(ts)True>>>ts=pd.Timestamp(2022,8,6)>>>ts.day_name()'Saturday'>>>freq=pd.offsets.BusinessDay(1)>>>freq.is_on_offset(ts)False"
Pandas,Date offsets,pandas.tseries.offsets.CustomBusinessMonthBegin.is_month_start,"pandas.tseries.offsets.CustomBusinessMonthBegin.is_month_start#CustomBusinessMonthBegin.is_month_start()#Return boolean whether a timestamp occurs on the month start.Examples>>>ts=pd.Timestamp(2022,1,1)>>>freq=pd.offsets.Hour(5)>>>freq.is_month_start(ts)True"
Pandas,Date offsets,pandas.tseries.offsets.CustomBusinessMonthBegin.is_month_end,"pandas.tseries.offsets.CustomBusinessMonthBegin.is_month_end#CustomBusinessMonthBegin.is_month_end()#Return boolean whether a timestamp occurs on the month end.Examples>>>ts=pd.Timestamp(2022,1,1)>>>freq=pd.offsets.Hour(5)>>>freq.is_month_end(ts)False"
Pandas,Date offsets,pandas.tseries.offsets.CustomBusinessMonthBegin.is_quarter_start,"pandas.tseries.offsets.CustomBusinessMonthBegin.is_quarter_start#CustomBusinessMonthBegin.is_quarter_start()#Return boolean whether a timestamp occurs on the quarter start.Examples>>>ts=pd.Timestamp(2022,1,1)>>>freq=pd.offsets.Hour(5)>>>freq.is_quarter_start(ts)True"
Pandas,Date offsets,pandas.tseries.offsets.CustomBusinessMonthBegin.is_quarter_end,"pandas.tseries.offsets.CustomBusinessMonthBegin.is_quarter_end#CustomBusinessMonthBegin.is_quarter_end()#Return boolean whether a timestamp occurs on the quarter end.Examples>>>ts=pd.Timestamp(2022,1,1)>>>freq=pd.offsets.Hour(5)>>>freq.is_quarter_end(ts)False"
Pandas,Date offsets,pandas.tseries.offsets.CustomBusinessMonthBegin.is_year_start,"pandas.tseries.offsets.CustomBusinessMonthBegin.is_year_start#CustomBusinessMonthBegin.is_year_start()#Return boolean whether a timestamp occurs on the year start.Examples>>>ts=pd.Timestamp(2022,1,1)>>>freq=pd.offsets.Hour(5)>>>freq.is_year_start(ts)True"
Pandas,Date offsets,pandas.tseries.offsets.CustomBusinessMonthBegin.is_year_end,"pandas.tseries.offsets.CustomBusinessMonthBegin.is_year_end#CustomBusinessMonthBegin.is_year_end()#Return boolean whether a timestamp occurs on the year end.Examples>>>ts=pd.Timestamp(2022,1,1)>>>freq=pd.offsets.Hour(5)>>>freq.is_year_end(ts)False"
Pandas,Date offsets,pandas.tseries.offsets.SemiMonthEnd,"pandas.tseries.offsets.SemiMonthEnd#classpandas.tseries.offsets.SemiMonthEnd#Two DateOffset’s per month repeating on the last day of the month & day_of_month.Parameters:nintnormalizebool, default Falseday_of_monthint, {1, 3,…,27}, default 15Examples>>>ts=pd.Timestamp(2022,1,14)>>>ts+pd.offsets.SemiMonthEnd()Timestamp('2022-01-15 00:00:00')>>>ts=pd.Timestamp(2022,1,15)>>>ts+pd.offsets.SemiMonthEnd()Timestamp('2022-01-31 00:00:00')>>>ts=pd.Timestamp(2022,1,31)>>>ts+pd.offsets.SemiMonthEnd()Timestamp('2022-02-15 00:00:00')If you want to get the result for the current month:>>>ts=pd.Timestamp(2022,1,15)>>>pd.offsets.SemiMonthEnd().rollforward(ts)Timestamp('2022-01-15 00:00:00')AttributesbaseReturns a copy of the calling offset object with n=1 and all other attributes equal.freqstrReturn a string representing the frequency.kwdsReturn a dict of extra parameters for the offset.nameReturn a string representing the base frequency.day_of_monthnnanosnormalizerule_codeMethodscopyReturn a copy of the frequency.is_anchoredReturn boolean whether the frequency is a unit frequency (n=1).is_month_endReturn boolean whether a timestamp occurs on the month end.is_month_startReturn boolean whether a timestamp occurs on the month start.is_on_offsetReturn boolean whether a timestamp intersects with this frequency.is_quarter_endReturn boolean whether a timestamp occurs on the quarter end.is_quarter_startReturn boolean whether a timestamp occurs on the quarter start.is_year_endReturn boolean whether a timestamp occurs on the year end.is_year_startReturn boolean whether a timestamp occurs on the year start.rollbackRoll provided date backward to next offset only if not on offset.rollforwardRoll provided date forward to next offset only if not on offset."
Pandas,Date offsets,pandas.tseries.offsets.SemiMonthEnd.freqstr,pandas.tseries.offsets.SemiMonthEnd.freqstr#SemiMonthEnd.freqstr#Return a string representing the frequency.Examples>>>pd.DateOffset(5).freqstr'<5 * DateOffsets>'>>>pd.offsets.BusinessHour(2).freqstr'2BH'>>>pd.offsets.Nano().freqstr'N'>>>pd.offsets.Nano(-3).freqstr'-3N'
Pandas,Date offsets,pandas.tseries.offsets.SemiMonthEnd.kwds,"pandas.tseries.offsets.SemiMonthEnd.kwds#SemiMonthEnd.kwds#Return a dict of extra parameters for the offset.Examples>>>pd.DateOffset(5).kwds{}>>>pd.offsets.FY5253Quarter().kwds{'weekday': 0,'startingMonth': 1,'qtr_with_extra_week': 1,'variation': 'nearest'}"
Pandas,Date offsets,pandas.tseries.offsets.SemiMonthEnd.name,pandas.tseries.offsets.SemiMonthEnd.name#SemiMonthEnd.name#Return a string representing the base frequency.Examples>>>pd.offsets.Hour().name'H'>>>pd.offsets.Hour(5).name'H'
Pandas,Date offsets,pandas.tseries.offsets.SemiMonthEnd.nanos,pandas.tseries.offsets.SemiMonthEnd.nanos#SemiMonthEnd.nanos#
Pandas,Date offsets,pandas.tseries.offsets.SemiMonthEnd.normalize,pandas.tseries.offsets.SemiMonthEnd.normalize#SemiMonthEnd.normalize#
Pandas,Date offsets,pandas.tseries.offsets.SemiMonthEnd.rule_code,pandas.tseries.offsets.SemiMonthEnd.rule_code#SemiMonthEnd.rule_code#
Pandas,Date offsets,pandas.tseries.offsets.SemiMonthEnd.n,pandas.tseries.offsets.SemiMonthEnd.n#SemiMonthEnd.n#
Pandas,Date offsets,pandas.tseries.offsets.SemiMonthEnd.day_of_month,pandas.tseries.offsets.SemiMonthEnd.day_of_month#SemiMonthEnd.day_of_month#
Pandas,Date offsets,pandas.tseries.offsets.SemiMonthEnd.copy,pandas.tseries.offsets.SemiMonthEnd.copy#SemiMonthEnd.copy()#Return a copy of the frequency.Examples>>>freq=pd.DateOffset(1)>>>freq_copy=freq.copy()>>>freqisfreq_copyFalse
Pandas,Date offsets,pandas.tseries.offsets.SemiMonthEnd.is_anchored,pandas.tseries.offsets.SemiMonthEnd.is_anchored#SemiMonthEnd.is_anchored()#Return boolean whether the frequency is a unit frequency (n=1).Examples>>>pd.DateOffset().is_anchored()True>>>pd.DateOffset(2).is_anchored()False
Pandas,Date offsets,pandas.tseries.offsets.SemiMonthEnd.is_on_offset,"pandas.tseries.offsets.SemiMonthEnd.is_on_offset#SemiMonthEnd.is_on_offset()#Return boolean whether a timestamp intersects with this frequency.Parameters:dtdatetime.datetimeTimestamp to check intersections with frequency.Examples>>>ts=pd.Timestamp(2022,1,1)>>>freq=pd.offsets.Day(1)>>>freq.is_on_offset(ts)True>>>ts=pd.Timestamp(2022,8,6)>>>ts.day_name()'Saturday'>>>freq=pd.offsets.BusinessDay(1)>>>freq.is_on_offset(ts)False"
Pandas,Date offsets,pandas.tseries.offsets.SemiMonthEnd.is_month_start,"pandas.tseries.offsets.SemiMonthEnd.is_month_start#SemiMonthEnd.is_month_start()#Return boolean whether a timestamp occurs on the month start.Examples>>>ts=pd.Timestamp(2022,1,1)>>>freq=pd.offsets.Hour(5)>>>freq.is_month_start(ts)True"
Pandas,Date offsets,pandas.tseries.offsets.SemiMonthEnd.is_month_end,"pandas.tseries.offsets.SemiMonthEnd.is_month_end#SemiMonthEnd.is_month_end()#Return boolean whether a timestamp occurs on the month end.Examples>>>ts=pd.Timestamp(2022,1,1)>>>freq=pd.offsets.Hour(5)>>>freq.is_month_end(ts)False"
Pandas,Date offsets,pandas.tseries.offsets.SemiMonthEnd.is_quarter_start,"pandas.tseries.offsets.SemiMonthEnd.is_quarter_start#SemiMonthEnd.is_quarter_start()#Return boolean whether a timestamp occurs on the quarter start.Examples>>>ts=pd.Timestamp(2022,1,1)>>>freq=pd.offsets.Hour(5)>>>freq.is_quarter_start(ts)True"
Pandas,Date offsets,pandas.tseries.offsets.SemiMonthEnd.is_quarter_end,"pandas.tseries.offsets.SemiMonthEnd.is_quarter_end#SemiMonthEnd.is_quarter_end()#Return boolean whether a timestamp occurs on the quarter end.Examples>>>ts=pd.Timestamp(2022,1,1)>>>freq=pd.offsets.Hour(5)>>>freq.is_quarter_end(ts)False"
Pandas,Date offsets,pandas.tseries.offsets.SemiMonthEnd.is_year_start,"pandas.tseries.offsets.SemiMonthEnd.is_year_start#SemiMonthEnd.is_year_start()#Return boolean whether a timestamp occurs on the year start.Examples>>>ts=pd.Timestamp(2022,1,1)>>>freq=pd.offsets.Hour(5)>>>freq.is_year_start(ts)True"
Pandas,Date offsets,pandas.tseries.offsets.SemiMonthEnd.is_year_end,"pandas.tseries.offsets.SemiMonthEnd.is_year_end#SemiMonthEnd.is_year_end()#Return boolean whether a timestamp occurs on the year end.Examples>>>ts=pd.Timestamp(2022,1,1)>>>freq=pd.offsets.Hour(5)>>>freq.is_year_end(ts)False"
Pandas,Date offsets,pandas.tseries.offsets.SemiMonthBegin,"pandas.tseries.offsets.SemiMonthBegin#classpandas.tseries.offsets.SemiMonthBegin#Two DateOffset’s per month repeating on the first day of the month & day_of_month.Parameters:nintnormalizebool, default Falseday_of_monthint, {2, 3,…,27}, default 15Examples>>>ts=pd.Timestamp(2022,1,1)>>>ts+pd.offsets.SemiMonthBegin()Timestamp('2022-01-15 00:00:00')AttributesbaseReturns a copy of the calling offset object with n=1 and all other attributes equal.freqstrReturn a string representing the frequency.kwdsReturn a dict of extra parameters for the offset.nameReturn a string representing the base frequency.day_of_monthnnanosnormalizerule_codeMethodscopyReturn a copy of the frequency.is_anchoredReturn boolean whether the frequency is a unit frequency (n=1).is_month_endReturn boolean whether a timestamp occurs on the month end.is_month_startReturn boolean whether a timestamp occurs on the month start.is_on_offsetReturn boolean whether a timestamp intersects with this frequency.is_quarter_endReturn boolean whether a timestamp occurs on the quarter end.is_quarter_startReturn boolean whether a timestamp occurs on the quarter start.is_year_endReturn boolean whether a timestamp occurs on the year end.is_year_startReturn boolean whether a timestamp occurs on the year start.rollbackRoll provided date backward to next offset only if not on offset.rollforwardRoll provided date forward to next offset only if not on offset."
Pandas,Date offsets,pandas.tseries.offsets.SemiMonthBegin.freqstr,pandas.tseries.offsets.SemiMonthBegin.freqstr#SemiMonthBegin.freqstr#Return a string representing the frequency.Examples>>>pd.DateOffset(5).freqstr'<5 * DateOffsets>'>>>pd.offsets.BusinessHour(2).freqstr'2BH'>>>pd.offsets.Nano().freqstr'N'>>>pd.offsets.Nano(-3).freqstr'-3N'
Pandas,Date offsets,pandas.tseries.offsets.SemiMonthBegin.kwds,"pandas.tseries.offsets.SemiMonthBegin.kwds#SemiMonthBegin.kwds#Return a dict of extra parameters for the offset.Examples>>>pd.DateOffset(5).kwds{}>>>pd.offsets.FY5253Quarter().kwds{'weekday': 0,'startingMonth': 1,'qtr_with_extra_week': 1,'variation': 'nearest'}"
Pandas,Date offsets,pandas.tseries.offsets.SemiMonthBegin.name,pandas.tseries.offsets.SemiMonthBegin.name#SemiMonthBegin.name#Return a string representing the base frequency.Examples>>>pd.offsets.Hour().name'H'>>>pd.offsets.Hour(5).name'H'
Pandas,Date offsets,pandas.tseries.offsets.SemiMonthBegin.nanos,pandas.tseries.offsets.SemiMonthBegin.nanos#SemiMonthBegin.nanos#
Pandas,Date offsets,pandas.tseries.offsets.SemiMonthBegin.normalize,pandas.tseries.offsets.SemiMonthBegin.normalize#SemiMonthBegin.normalize#
Pandas,Date offsets,pandas.tseries.offsets.SemiMonthBegin.rule_code,pandas.tseries.offsets.SemiMonthBegin.rule_code#SemiMonthBegin.rule_code#
Pandas,Date offsets,pandas.tseries.offsets.SemiMonthBegin.n,pandas.tseries.offsets.SemiMonthBegin.n#SemiMonthBegin.n#
Pandas,Date offsets,pandas.tseries.offsets.SemiMonthBegin.day_of_month,pandas.tseries.offsets.SemiMonthBegin.day_of_month#SemiMonthBegin.day_of_month#
Pandas,Date offsets,pandas.tseries.offsets.SemiMonthBegin.copy,pandas.tseries.offsets.SemiMonthBegin.copy#SemiMonthBegin.copy()#Return a copy of the frequency.Examples>>>freq=pd.DateOffset(1)>>>freq_copy=freq.copy()>>>freqisfreq_copyFalse
Pandas,Date offsets,pandas.tseries.offsets.SemiMonthBegin.is_anchored,pandas.tseries.offsets.SemiMonthBegin.is_anchored#SemiMonthBegin.is_anchored()#Return boolean whether the frequency is a unit frequency (n=1).Examples>>>pd.DateOffset().is_anchored()True>>>pd.DateOffset(2).is_anchored()False
Pandas,Date offsets,pandas.tseries.offsets.SemiMonthBegin.is_on_offset,"pandas.tseries.offsets.SemiMonthBegin.is_on_offset#SemiMonthBegin.is_on_offset()#Return boolean whether a timestamp intersects with this frequency.Parameters:dtdatetime.datetimeTimestamp to check intersections with frequency.Examples>>>ts=pd.Timestamp(2022,1,1)>>>freq=pd.offsets.Day(1)>>>freq.is_on_offset(ts)True>>>ts=pd.Timestamp(2022,8,6)>>>ts.day_name()'Saturday'>>>freq=pd.offsets.BusinessDay(1)>>>freq.is_on_offset(ts)False"
Pandas,Date offsets,pandas.tseries.offsets.SemiMonthBegin.is_month_start,"pandas.tseries.offsets.SemiMonthBegin.is_month_start#SemiMonthBegin.is_month_start()#Return boolean whether a timestamp occurs on the month start.Examples>>>ts=pd.Timestamp(2022,1,1)>>>freq=pd.offsets.Hour(5)>>>freq.is_month_start(ts)True"
Pandas,Date offsets,pandas.tseries.offsets.SemiMonthBegin.is_month_end,"pandas.tseries.offsets.SemiMonthBegin.is_month_end#SemiMonthBegin.is_month_end()#Return boolean whether a timestamp occurs on the month end.Examples>>>ts=pd.Timestamp(2022,1,1)>>>freq=pd.offsets.Hour(5)>>>freq.is_month_end(ts)False"
Pandas,Date offsets,pandas.tseries.offsets.SemiMonthBegin.is_quarter_start,"pandas.tseries.offsets.SemiMonthBegin.is_quarter_start#SemiMonthBegin.is_quarter_start()#Return boolean whether a timestamp occurs on the quarter start.Examples>>>ts=pd.Timestamp(2022,1,1)>>>freq=pd.offsets.Hour(5)>>>freq.is_quarter_start(ts)True"
Pandas,Date offsets,pandas.tseries.offsets.SemiMonthBegin.is_quarter_end,"pandas.tseries.offsets.SemiMonthBegin.is_quarter_end#SemiMonthBegin.is_quarter_end()#Return boolean whether a timestamp occurs on the quarter end.Examples>>>ts=pd.Timestamp(2022,1,1)>>>freq=pd.offsets.Hour(5)>>>freq.is_quarter_end(ts)False"
Pandas,Date offsets,pandas.tseries.offsets.SemiMonthBegin.is_year_start,"pandas.tseries.offsets.SemiMonthBegin.is_year_start#SemiMonthBegin.is_year_start()#Return boolean whether a timestamp occurs on the year start.Examples>>>ts=pd.Timestamp(2022,1,1)>>>freq=pd.offsets.Hour(5)>>>freq.is_year_start(ts)True"
Pandas,Date offsets,pandas.tseries.offsets.SemiMonthBegin.is_year_end,"pandas.tseries.offsets.SemiMonthBegin.is_year_end#SemiMonthBegin.is_year_end()#Return boolean whether a timestamp occurs on the year end.Examples>>>ts=pd.Timestamp(2022,1,1)>>>freq=pd.offsets.Hour(5)>>>freq.is_year_end(ts)False"
Pandas,Date offsets,pandas.tseries.offsets.Week,"pandas.tseries.offsets.Week#classpandas.tseries.offsets.Week#Weekly offset.Parameters:weekdayint or None, default NoneAlways generate specific day of week.
0 for Monday and 6 for Sunday.See alsopd.tseries.offsets.WeekOfMonthDescribes monthly dates like, the Tuesday of the 2nd week of each month.Examples>>>date_object=pd.Timestamp(""2023-01-13"")>>>date_objectTimestamp('2023-01-13 00:00:00')>>>date_plus_one_week=date_object+pd.tseries.offsets.Week(n=1)>>>date_plus_one_weekTimestamp('2023-01-20 00:00:00')>>>date_next_monday=date_object+pd.tseries.offsets.Week(weekday=0)>>>date_next_mondayTimestamp('2023-01-16 00:00:00')>>>date_next_sunday=date_object+pd.tseries.offsets.Week(weekday=6)>>>date_next_sundayTimestamp('2023-01-15 00:00:00')AttributesbaseReturns a copy of the calling offset object with n=1 and all other attributes equal.freqstrReturn a string representing the frequency.kwdsReturn a dict of extra parameters for the offset.nameReturn a string representing the base frequency.nnanosnormalizerule_codeweekdayMethodscopyReturn a copy of the frequency.is_anchoredReturn boolean whether the frequency is a unit frequency (n=1).is_month_endReturn boolean whether a timestamp occurs on the month end.is_month_startReturn boolean whether a timestamp occurs on the month start.is_on_offsetReturn boolean whether a timestamp intersects with this frequency.is_quarter_endReturn boolean whether a timestamp occurs on the quarter end.is_quarter_startReturn boolean whether a timestamp occurs on the quarter start.is_year_endReturn boolean whether a timestamp occurs on the year end.is_year_startReturn boolean whether a timestamp occurs on the year start.rollbackRoll provided date backward to next offset only if not on offset.rollforwardRoll provided date forward to next offset only if not on offset."
Pandas,Date offsets,pandas.tseries.offsets.Week.freqstr,pandas.tseries.offsets.Week.freqstr#Week.freqstr#Return a string representing the frequency.Examples>>>pd.DateOffset(5).freqstr'<5 * DateOffsets>'>>>pd.offsets.BusinessHour(2).freqstr'2BH'>>>pd.offsets.Nano().freqstr'N'>>>pd.offsets.Nano(-3).freqstr'-3N'
Pandas,Date offsets,pandas.tseries.offsets.Week.kwds,"pandas.tseries.offsets.Week.kwds#Week.kwds#Return a dict of extra parameters for the offset.Examples>>>pd.DateOffset(5).kwds{}>>>pd.offsets.FY5253Quarter().kwds{'weekday': 0,'startingMonth': 1,'qtr_with_extra_week': 1,'variation': 'nearest'}"
Pandas,Date offsets,pandas.tseries.offsets.Week.name,pandas.tseries.offsets.Week.name#Week.name#Return a string representing the base frequency.Examples>>>pd.offsets.Hour().name'H'>>>pd.offsets.Hour(5).name'H'
Pandas,Date offsets,pandas.tseries.offsets.Week.nanos,pandas.tseries.offsets.Week.nanos#Week.nanos#
Pandas,Date offsets,pandas.tseries.offsets.Week.normalize,pandas.tseries.offsets.Week.normalize#Week.normalize#
Pandas,Date offsets,pandas.tseries.offsets.Week.rule_code,pandas.tseries.offsets.Week.rule_code#Week.rule_code#
Pandas,Date offsets,pandas.tseries.offsets.Week.n,pandas.tseries.offsets.Week.n#Week.n#
Pandas,Date offsets,pandas.tseries.offsets.Week.weekday,pandas.tseries.offsets.Week.weekday#Week.weekday#
Pandas,Date offsets,pandas.tseries.offsets.Week.copy,pandas.tseries.offsets.Week.copy#Week.copy()#Return a copy of the frequency.Examples>>>freq=pd.DateOffset(1)>>>freq_copy=freq.copy()>>>freqisfreq_copyFalse
Pandas,Date offsets,pandas.tseries.offsets.Week.is_anchored,pandas.tseries.offsets.Week.is_anchored#Week.is_anchored()#Return boolean whether the frequency is a unit frequency (n=1).Examples>>>pd.DateOffset().is_anchored()True>>>pd.DateOffset(2).is_anchored()False
Pandas,Date offsets,pandas.tseries.offsets.Week.is_on_offset,"pandas.tseries.offsets.Week.is_on_offset#Week.is_on_offset()#Return boolean whether a timestamp intersects with this frequency.Parameters:dtdatetime.datetimeTimestamp to check intersections with frequency.Examples>>>ts=pd.Timestamp(2022,1,1)>>>freq=pd.offsets.Day(1)>>>freq.is_on_offset(ts)True>>>ts=pd.Timestamp(2022,8,6)>>>ts.day_name()'Saturday'>>>freq=pd.offsets.BusinessDay(1)>>>freq.is_on_offset(ts)False"
Pandas,Date offsets,pandas.tseries.offsets.Week.is_month_start,"pandas.tseries.offsets.Week.is_month_start#Week.is_month_start()#Return boolean whether a timestamp occurs on the month start.Examples>>>ts=pd.Timestamp(2022,1,1)>>>freq=pd.offsets.Hour(5)>>>freq.is_month_start(ts)True"
Pandas,Date offsets,pandas.tseries.offsets.Week.is_month_end,"pandas.tseries.offsets.Week.is_month_end#Week.is_month_end()#Return boolean whether a timestamp occurs on the month end.Examples>>>ts=pd.Timestamp(2022,1,1)>>>freq=pd.offsets.Hour(5)>>>freq.is_month_end(ts)False"
Pandas,Date offsets,pandas.tseries.offsets.Week.is_quarter_start,"pandas.tseries.offsets.Week.is_quarter_start#Week.is_quarter_start()#Return boolean whether a timestamp occurs on the quarter start.Examples>>>ts=pd.Timestamp(2022,1,1)>>>freq=pd.offsets.Hour(5)>>>freq.is_quarter_start(ts)True"
Pandas,Date offsets,pandas.tseries.offsets.Week.is_quarter_end,"pandas.tseries.offsets.Week.is_quarter_end#Week.is_quarter_end()#Return boolean whether a timestamp occurs on the quarter end.Examples>>>ts=pd.Timestamp(2022,1,1)>>>freq=pd.offsets.Hour(5)>>>freq.is_quarter_end(ts)False"
Pandas,Date offsets,pandas.tseries.offsets.Week.is_year_start,"pandas.tseries.offsets.Week.is_year_start#Week.is_year_start()#Return boolean whether a timestamp occurs on the year start.Examples>>>ts=pd.Timestamp(2022,1,1)>>>freq=pd.offsets.Hour(5)>>>freq.is_year_start(ts)True"
Pandas,Date offsets,pandas.tseries.offsets.Week.is_year_end,"pandas.tseries.offsets.Week.is_year_end#Week.is_year_end()#Return boolean whether a timestamp occurs on the year end.Examples>>>ts=pd.Timestamp(2022,1,1)>>>freq=pd.offsets.Hour(5)>>>freq.is_year_end(ts)False"
Pandas,Date offsets,pandas.tseries.offsets.WeekOfMonth,"pandas.tseries.offsets.WeekOfMonth#classpandas.tseries.offsets.WeekOfMonth#Describes monthly dates like “the Tuesday of the 2nd week of each month”.Parameters:nint, default 1The number of months represented.normalizebool, default FalseNormalize start/end dates to midnight before generating date range.weekint {0, 1, 2, 3, …}, default 0A specific integer for the week of the month.
e.g. 0 is 1st week of month, 1 is the 2nd week, etc.weekdayint {0, 1, …, 6}, default 0A specific integer for the day of the week.0 is Monday1 is Tuesday2 is Wednesday3 is Thursday4 is Friday5 is Saturday6 is Sunday.Examples>>>ts=pd.Timestamp(2022,1,1)>>>ts+pd.offsets.WeekOfMonth()Timestamp('2022-01-03 00:00:00')AttributesbaseReturns a copy of the calling offset object with n=1 and all other attributes equal.freqstrReturn a string representing the frequency.kwdsReturn a dict of extra parameters for the offset.nameReturn a string representing the base frequency.nnanosnormalizerule_codeweekweekdayMethodscopyReturn a copy of the frequency.is_anchoredReturn boolean whether the frequency is a unit frequency (n=1).is_month_endReturn boolean whether a timestamp occurs on the month end.is_month_startReturn boolean whether a timestamp occurs on the month start.is_on_offsetReturn boolean whether a timestamp intersects with this frequency.is_quarter_endReturn boolean whether a timestamp occurs on the quarter end.is_quarter_startReturn boolean whether a timestamp occurs on the quarter start.is_year_endReturn boolean whether a timestamp occurs on the year end.is_year_startReturn boolean whether a timestamp occurs on the year start.rollbackRoll provided date backward to next offset only if not on offset.rollforwardRoll provided date forward to next offset only if not on offset."
Pandas,Date offsets,pandas.tseries.offsets.WeekOfMonth.freqstr,pandas.tseries.offsets.WeekOfMonth.freqstr#WeekOfMonth.freqstr#Return a string representing the frequency.Examples>>>pd.DateOffset(5).freqstr'<5 * DateOffsets>'>>>pd.offsets.BusinessHour(2).freqstr'2BH'>>>pd.offsets.Nano().freqstr'N'>>>pd.offsets.Nano(-3).freqstr'-3N'
Pandas,Date offsets,pandas.tseries.offsets.WeekOfMonth.kwds,"pandas.tseries.offsets.WeekOfMonth.kwds#WeekOfMonth.kwds#Return a dict of extra parameters for the offset.Examples>>>pd.DateOffset(5).kwds{}>>>pd.offsets.FY5253Quarter().kwds{'weekday': 0,'startingMonth': 1,'qtr_with_extra_week': 1,'variation': 'nearest'}"
Pandas,Date offsets,pandas.tseries.offsets.WeekOfMonth.name,pandas.tseries.offsets.WeekOfMonth.name#WeekOfMonth.name#Return a string representing the base frequency.Examples>>>pd.offsets.Hour().name'H'>>>pd.offsets.Hour(5).name'H'
Pandas,Date offsets,pandas.tseries.offsets.WeekOfMonth.nanos,pandas.tseries.offsets.WeekOfMonth.nanos#WeekOfMonth.nanos#
Pandas,Date offsets,pandas.tseries.offsets.WeekOfMonth.normalize,pandas.tseries.offsets.WeekOfMonth.normalize#WeekOfMonth.normalize#
Pandas,Date offsets,pandas.tseries.offsets.WeekOfMonth.rule_code,pandas.tseries.offsets.WeekOfMonth.rule_code#WeekOfMonth.rule_code#
Pandas,Date offsets,pandas.tseries.offsets.WeekOfMonth.n,pandas.tseries.offsets.WeekOfMonth.n#WeekOfMonth.n#
Pandas,Date offsets,pandas.tseries.offsets.WeekOfMonth.week,pandas.tseries.offsets.WeekOfMonth.week#WeekOfMonth.week#
Pandas,Date offsets,pandas.tseries.offsets.WeekOfMonth.copy,pandas.tseries.offsets.WeekOfMonth.copy#WeekOfMonth.copy()#Return a copy of the frequency.Examples>>>freq=pd.DateOffset(1)>>>freq_copy=freq.copy()>>>freqisfreq_copyFalse
Pandas,Date offsets,pandas.tseries.offsets.WeekOfMonth.is_anchored,pandas.tseries.offsets.WeekOfMonth.is_anchored#WeekOfMonth.is_anchored()#Return boolean whether the frequency is a unit frequency (n=1).Examples>>>pd.DateOffset().is_anchored()True>>>pd.DateOffset(2).is_anchored()False
Pandas,Date offsets,pandas.tseries.offsets.WeekOfMonth.is_on_offset,"pandas.tseries.offsets.WeekOfMonth.is_on_offset#WeekOfMonth.is_on_offset()#Return boolean whether a timestamp intersects with this frequency.Parameters:dtdatetime.datetimeTimestamp to check intersections with frequency.Examples>>>ts=pd.Timestamp(2022,1,1)>>>freq=pd.offsets.Day(1)>>>freq.is_on_offset(ts)True>>>ts=pd.Timestamp(2022,8,6)>>>ts.day_name()'Saturday'>>>freq=pd.offsets.BusinessDay(1)>>>freq.is_on_offset(ts)False"
Pandas,Date offsets,pandas.tseries.offsets.WeekOfMonth.weekday,pandas.tseries.offsets.WeekOfMonth.weekday#WeekOfMonth.weekday#
Pandas,Date offsets,pandas.tseries.offsets.WeekOfMonth.is_month_start,"pandas.tseries.offsets.WeekOfMonth.is_month_start#WeekOfMonth.is_month_start()#Return boolean whether a timestamp occurs on the month start.Examples>>>ts=pd.Timestamp(2022,1,1)>>>freq=pd.offsets.Hour(5)>>>freq.is_month_start(ts)True"
Pandas,Date offsets,pandas.tseries.offsets.WeekOfMonth.is_month_end,"pandas.tseries.offsets.WeekOfMonth.is_month_end#WeekOfMonth.is_month_end()#Return boolean whether a timestamp occurs on the month end.Examples>>>ts=pd.Timestamp(2022,1,1)>>>freq=pd.offsets.Hour(5)>>>freq.is_month_end(ts)False"
Pandas,Date offsets,pandas.tseries.offsets.WeekOfMonth.is_quarter_start,"pandas.tseries.offsets.WeekOfMonth.is_quarter_start#WeekOfMonth.is_quarter_start()#Return boolean whether a timestamp occurs on the quarter start.Examples>>>ts=pd.Timestamp(2022,1,1)>>>freq=pd.offsets.Hour(5)>>>freq.is_quarter_start(ts)True"
Pandas,Date offsets,pandas.tseries.offsets.WeekOfMonth.is_quarter_end,"pandas.tseries.offsets.WeekOfMonth.is_quarter_end#WeekOfMonth.is_quarter_end()#Return boolean whether a timestamp occurs on the quarter end.Examples>>>ts=pd.Timestamp(2022,1,1)>>>freq=pd.offsets.Hour(5)>>>freq.is_quarter_end(ts)False"
Pandas,Date offsets,pandas.tseries.offsets.WeekOfMonth.is_year_start,"pandas.tseries.offsets.WeekOfMonth.is_year_start#WeekOfMonth.is_year_start()#Return boolean whether a timestamp occurs on the year start.Examples>>>ts=pd.Timestamp(2022,1,1)>>>freq=pd.offsets.Hour(5)>>>freq.is_year_start(ts)True"
Pandas,Date offsets,pandas.tseries.offsets.WeekOfMonth.is_year_end,"pandas.tseries.offsets.WeekOfMonth.is_year_end#WeekOfMonth.is_year_end()#Return boolean whether a timestamp occurs on the year end.Examples>>>ts=pd.Timestamp(2022,1,1)>>>freq=pd.offsets.Hour(5)>>>freq.is_year_end(ts)False"
Pandas,Date offsets,pandas.tseries.offsets.LastWeekOfMonth,"pandas.tseries.offsets.LastWeekOfMonth#classpandas.tseries.offsets.LastWeekOfMonth#Describes monthly dates in last week of month.For example “the last Tuesday of each month”.Parameters:nint, default 1weekdayint {0, 1, …, 6}, default 0A specific integer for the day of the week.0 is Monday1 is Tuesday2 is Wednesday3 is Thursday4 is Friday5 is Saturday6 is Sunday.Examples>>>ts=pd.Timestamp(2022,1,1)>>>ts+pd.offsets.LastWeekOfMonth()Timestamp('2022-01-31 00:00:00')AttributesbaseReturns a copy of the calling offset object with n=1 and all other attributes equal.freqstrReturn a string representing the frequency.kwdsReturn a dict of extra parameters for the offset.nameReturn a string representing the base frequency.nnanosnormalizerule_codeweekweekdayMethodscopyReturn a copy of the frequency.is_anchoredReturn boolean whether the frequency is a unit frequency (n=1).is_month_endReturn boolean whether a timestamp occurs on the month end.is_month_startReturn boolean whether a timestamp occurs on the month start.is_on_offsetReturn boolean whether a timestamp intersects with this frequency.is_quarter_endReturn boolean whether a timestamp occurs on the quarter end.is_quarter_startReturn boolean whether a timestamp occurs on the quarter start.is_year_endReturn boolean whether a timestamp occurs on the year end.is_year_startReturn boolean whether a timestamp occurs on the year start.rollbackRoll provided date backward to next offset only if not on offset.rollforwardRoll provided date forward to next offset only if not on offset."
Pandas,Date offsets,pandas.tseries.offsets.LastWeekOfMonth.freqstr,pandas.tseries.offsets.LastWeekOfMonth.freqstr#LastWeekOfMonth.freqstr#Return a string representing the frequency.Examples>>>pd.DateOffset(5).freqstr'<5 * DateOffsets>'>>>pd.offsets.BusinessHour(2).freqstr'2BH'>>>pd.offsets.Nano().freqstr'N'>>>pd.offsets.Nano(-3).freqstr'-3N'
Pandas,Date offsets,pandas.tseries.offsets.LastWeekOfMonth.kwds,"pandas.tseries.offsets.LastWeekOfMonth.kwds#LastWeekOfMonth.kwds#Return a dict of extra parameters for the offset.Examples>>>pd.DateOffset(5).kwds{}>>>pd.offsets.FY5253Quarter().kwds{'weekday': 0,'startingMonth': 1,'qtr_with_extra_week': 1,'variation': 'nearest'}"
Pandas,Date offsets,pandas.tseries.offsets.LastWeekOfMonth.name,pandas.tseries.offsets.LastWeekOfMonth.name#LastWeekOfMonth.name#Return a string representing the base frequency.Examples>>>pd.offsets.Hour().name'H'>>>pd.offsets.Hour(5).name'H'
Pandas,Date offsets,pandas.tseries.offsets.LastWeekOfMonth.nanos,pandas.tseries.offsets.LastWeekOfMonth.nanos#LastWeekOfMonth.nanos#
Pandas,Date offsets,pandas.tseries.offsets.LastWeekOfMonth.normalize,pandas.tseries.offsets.LastWeekOfMonth.normalize#LastWeekOfMonth.normalize#
Pandas,Date offsets,pandas.tseries.offsets.LastWeekOfMonth.rule_code,pandas.tseries.offsets.LastWeekOfMonth.rule_code#LastWeekOfMonth.rule_code#
Pandas,Date offsets,pandas.tseries.offsets.LastWeekOfMonth.n,pandas.tseries.offsets.LastWeekOfMonth.n#LastWeekOfMonth.n#
Pandas,Date offsets,pandas.tseries.offsets.LastWeekOfMonth.weekday,pandas.tseries.offsets.LastWeekOfMonth.weekday#LastWeekOfMonth.weekday#
Pandas,Date offsets,pandas.tseries.offsets.LastWeekOfMonth.week,pandas.tseries.offsets.LastWeekOfMonth.week#LastWeekOfMonth.week#
Pandas,Date offsets,pandas.tseries.offsets.LastWeekOfMonth.copy,pandas.tseries.offsets.LastWeekOfMonth.copy#LastWeekOfMonth.copy()#Return a copy of the frequency.Examples>>>freq=pd.DateOffset(1)>>>freq_copy=freq.copy()>>>freqisfreq_copyFalse
Pandas,Date offsets,pandas.tseries.offsets.LastWeekOfMonth.is_anchored,pandas.tseries.offsets.LastWeekOfMonth.is_anchored#LastWeekOfMonth.is_anchored()#Return boolean whether the frequency is a unit frequency (n=1).Examples>>>pd.DateOffset().is_anchored()True>>>pd.DateOffset(2).is_anchored()False
Pandas,Date offsets,pandas.tseries.offsets.LastWeekOfMonth.is_on_offset,"pandas.tseries.offsets.LastWeekOfMonth.is_on_offset#LastWeekOfMonth.is_on_offset()#Return boolean whether a timestamp intersects with this frequency.Parameters:dtdatetime.datetimeTimestamp to check intersections with frequency.Examples>>>ts=pd.Timestamp(2022,1,1)>>>freq=pd.offsets.Day(1)>>>freq.is_on_offset(ts)True>>>ts=pd.Timestamp(2022,8,6)>>>ts.day_name()'Saturday'>>>freq=pd.offsets.BusinessDay(1)>>>freq.is_on_offset(ts)False"
Pandas,Date offsets,pandas.tseries.offsets.LastWeekOfMonth.is_month_start,"pandas.tseries.offsets.LastWeekOfMonth.is_month_start#LastWeekOfMonth.is_month_start()#Return boolean whether a timestamp occurs on the month start.Examples>>>ts=pd.Timestamp(2022,1,1)>>>freq=pd.offsets.Hour(5)>>>freq.is_month_start(ts)True"
Pandas,Date offsets,pandas.tseries.offsets.LastWeekOfMonth.is_month_end,"pandas.tseries.offsets.LastWeekOfMonth.is_month_end#LastWeekOfMonth.is_month_end()#Return boolean whether a timestamp occurs on the month end.Examples>>>ts=pd.Timestamp(2022,1,1)>>>freq=pd.offsets.Hour(5)>>>freq.is_month_end(ts)False"
Pandas,Date offsets,pandas.tseries.offsets.LastWeekOfMonth.is_quarter_start,"pandas.tseries.offsets.LastWeekOfMonth.is_quarter_start#LastWeekOfMonth.is_quarter_start()#Return boolean whether a timestamp occurs on the quarter start.Examples>>>ts=pd.Timestamp(2022,1,1)>>>freq=pd.offsets.Hour(5)>>>freq.is_quarter_start(ts)True"
Pandas,Date offsets,pandas.tseries.offsets.LastWeekOfMonth.is_quarter_end,"pandas.tseries.offsets.LastWeekOfMonth.is_quarter_end#LastWeekOfMonth.is_quarter_end()#Return boolean whether a timestamp occurs on the quarter end.Examples>>>ts=pd.Timestamp(2022,1,1)>>>freq=pd.offsets.Hour(5)>>>freq.is_quarter_end(ts)False"
Pandas,Date offsets,pandas.tseries.offsets.LastWeekOfMonth.is_year_start,"pandas.tseries.offsets.LastWeekOfMonth.is_year_start#LastWeekOfMonth.is_year_start()#Return boolean whether a timestamp occurs on the year start.Examples>>>ts=pd.Timestamp(2022,1,1)>>>freq=pd.offsets.Hour(5)>>>freq.is_year_start(ts)True"
Pandas,Date offsets,pandas.tseries.offsets.LastWeekOfMonth.is_year_end,"pandas.tseries.offsets.LastWeekOfMonth.is_year_end#LastWeekOfMonth.is_year_end()#Return boolean whether a timestamp occurs on the year end.Examples>>>ts=pd.Timestamp(2022,1,1)>>>freq=pd.offsets.Hour(5)>>>freq.is_year_end(ts)False"
Pandas,Date offsets,pandas.tseries.offsets.BQuarterEnd,"pandas.tseries.offsets.BQuarterEnd#classpandas.tseries.offsets.BQuarterEnd#DateOffset increments between the last business day of each Quarter.startingMonth = 1 corresponds to dates like 1/31/2007, 4/30/2007, …
startingMonth = 2 corresponds to dates like 2/28/2007, 5/31/2007, …
startingMonth = 3 corresponds to dates like 3/30/2007, 6/29/2007, …Parameters:nint, default 1The number of quarters represented.normalizebool, default FalseNormalize start/end dates to midnight before generating date range.startingMonthint, default 3A specific integer for the month of the year from which we start quarters.See alsoDateOffsetStandard kind of date increment.Examples>>>frompandas.tseries.offsetsimportBQuarterEnd>>>ts=pd.Timestamp('2020-05-24 05:01:15')>>>ts+BQuarterEnd()Timestamp('2020-06-30 05:01:15')>>>ts+BQuarterEnd(2)Timestamp('2020-09-30 05:01:15')>>>ts+BQuarterEnd(1,startingMonth=2)Timestamp('2020-05-29 05:01:15')>>>ts+BQuarterEnd(startingMonth=2)Timestamp('2020-05-29 05:01:15')AttributesbaseReturns a copy of the calling offset object with n=1 and all other attributes equal.freqstrReturn a string representing the frequency.kwdsReturn a dict of extra parameters for the offset.nameReturn a string representing the base frequency.nnanosnormalizerule_codestartingMonthMethodscopyReturn a copy of the frequency.is_anchoredReturn boolean whether the frequency is a unit frequency (n=1).is_month_endReturn boolean whether a timestamp occurs on the month end.is_month_startReturn boolean whether a timestamp occurs on the month start.is_on_offsetReturn boolean whether a timestamp intersects with this frequency.is_quarter_endReturn boolean whether a timestamp occurs on the quarter end.is_quarter_startReturn boolean whether a timestamp occurs on the quarter start.is_year_endReturn boolean whether a timestamp occurs on the year end.is_year_startReturn boolean whether a timestamp occurs on the year start.rollbackRoll provided date backward to next offset only if not on offset.rollforwardRoll provided date forward to next offset only if not on offset."
Pandas,Date offsets,pandas.tseries.offsets.BQuarterEnd.freqstr,pandas.tseries.offsets.BQuarterEnd.freqstr#BQuarterEnd.freqstr#Return a string representing the frequency.Examples>>>pd.DateOffset(5).freqstr'<5 * DateOffsets>'>>>pd.offsets.BusinessHour(2).freqstr'2BH'>>>pd.offsets.Nano().freqstr'N'>>>pd.offsets.Nano(-3).freqstr'-3N'
Pandas,Date offsets,pandas.tseries.offsets.BQuarterEnd.kwds,"pandas.tseries.offsets.BQuarterEnd.kwds#BQuarterEnd.kwds#Return a dict of extra parameters for the offset.Examples>>>pd.DateOffset(5).kwds{}>>>pd.offsets.FY5253Quarter().kwds{'weekday': 0,'startingMonth': 1,'qtr_with_extra_week': 1,'variation': 'nearest'}"
Pandas,Date offsets,pandas.tseries.offsets.BQuarterEnd.name,pandas.tseries.offsets.BQuarterEnd.name#BQuarterEnd.name#Return a string representing the base frequency.Examples>>>pd.offsets.Hour().name'H'>>>pd.offsets.Hour(5).name'H'
Pandas,Date offsets,pandas.tseries.offsets.BQuarterEnd.nanos,pandas.tseries.offsets.BQuarterEnd.nanos#BQuarterEnd.nanos#
Pandas,Date offsets,pandas.tseries.offsets.BQuarterEnd.normalize,pandas.tseries.offsets.BQuarterEnd.normalize#BQuarterEnd.normalize#
Pandas,Date offsets,pandas.tseries.offsets.BQuarterEnd.rule_code,pandas.tseries.offsets.BQuarterEnd.rule_code#BQuarterEnd.rule_code#
Pandas,Date offsets,pandas.tseries.offsets.BQuarterEnd.n,pandas.tseries.offsets.BQuarterEnd.n#BQuarterEnd.n#
Pandas,Date offsets,pandas.tseries.offsets.BQuarterEnd.startingMonth,pandas.tseries.offsets.BQuarterEnd.startingMonth#BQuarterEnd.startingMonth#
Pandas,Date offsets,pandas.tseries.offsets.BQuarterEnd.copy,pandas.tseries.offsets.BQuarterEnd.copy#BQuarterEnd.copy()#Return a copy of the frequency.Examples>>>freq=pd.DateOffset(1)>>>freq_copy=freq.copy()>>>freqisfreq_copyFalse
Pandas,Date offsets,pandas.tseries.offsets.BQuarterEnd.is_anchored,pandas.tseries.offsets.BQuarterEnd.is_anchored#BQuarterEnd.is_anchored()#Return boolean whether the frequency is a unit frequency (n=1).Examples>>>pd.DateOffset().is_anchored()True>>>pd.DateOffset(2).is_anchored()False
Pandas,Date offsets,pandas.tseries.offsets.BQuarterEnd.is_on_offset,"pandas.tseries.offsets.BQuarterEnd.is_on_offset#BQuarterEnd.is_on_offset()#Return boolean whether a timestamp intersects with this frequency.Parameters:dtdatetime.datetimeTimestamp to check intersections with frequency.Examples>>>ts=pd.Timestamp(2022,1,1)>>>freq=pd.offsets.Day(1)>>>freq.is_on_offset(ts)True>>>ts=pd.Timestamp(2022,8,6)>>>ts.day_name()'Saturday'>>>freq=pd.offsets.BusinessDay(1)>>>freq.is_on_offset(ts)False"
Pandas,Date offsets,pandas.tseries.offsets.BQuarterEnd.is_month_start,"pandas.tseries.offsets.BQuarterEnd.is_month_start#BQuarterEnd.is_month_start()#Return boolean whether a timestamp occurs on the month start.Examples>>>ts=pd.Timestamp(2022,1,1)>>>freq=pd.offsets.Hour(5)>>>freq.is_month_start(ts)True"
Pandas,Date offsets,pandas.tseries.offsets.BQuarterEnd.is_month_end,"pandas.tseries.offsets.BQuarterEnd.is_month_end#BQuarterEnd.is_month_end()#Return boolean whether a timestamp occurs on the month end.Examples>>>ts=pd.Timestamp(2022,1,1)>>>freq=pd.offsets.Hour(5)>>>freq.is_month_end(ts)False"
Pandas,Date offsets,pandas.tseries.offsets.BQuarterEnd.is_quarter_start,"pandas.tseries.offsets.BQuarterEnd.is_quarter_start#BQuarterEnd.is_quarter_start()#Return boolean whether a timestamp occurs on the quarter start.Examples>>>ts=pd.Timestamp(2022,1,1)>>>freq=pd.offsets.Hour(5)>>>freq.is_quarter_start(ts)True"
Pandas,Date offsets,pandas.tseries.offsets.BQuarterEnd.is_quarter_end,"pandas.tseries.offsets.BQuarterEnd.is_quarter_end#BQuarterEnd.is_quarter_end()#Return boolean whether a timestamp occurs on the quarter end.Examples>>>ts=pd.Timestamp(2022,1,1)>>>freq=pd.offsets.Hour(5)>>>freq.is_quarter_end(ts)False"
Pandas,Date offsets,pandas.tseries.offsets.BQuarterEnd.is_year_start,"pandas.tseries.offsets.BQuarterEnd.is_year_start#BQuarterEnd.is_year_start()#Return boolean whether a timestamp occurs on the year start.Examples>>>ts=pd.Timestamp(2022,1,1)>>>freq=pd.offsets.Hour(5)>>>freq.is_year_start(ts)True"
Pandas,Date offsets,pandas.tseries.offsets.BQuarterEnd.is_year_end,"pandas.tseries.offsets.BQuarterEnd.is_year_end#BQuarterEnd.is_year_end()#Return boolean whether a timestamp occurs on the year end.Examples>>>ts=pd.Timestamp(2022,1,1)>>>freq=pd.offsets.Hour(5)>>>freq.is_year_end(ts)False"
Pandas,Date offsets,pandas.tseries.offsets.BQuarterBegin,"pandas.tseries.offsets.BQuarterBegin#classpandas.tseries.offsets.BQuarterBegin#DateOffset increments between the first business day of each Quarter.startingMonth = 1 corresponds to dates like 1/01/2007, 4/01/2007, …
startingMonth = 2 corresponds to dates like 2/01/2007, 5/01/2007, …
startingMonth = 3 corresponds to dates like 3/01/2007, 6/01/2007, …Parameters:nint, default 1The number of quarters represented.normalizebool, default FalseNormalize start/end dates to midnight before generating date range.startingMonthint, default 3A specific integer for the month of the year from which we start quarters.See alsoDateOffsetStandard kind of date increment.Examples>>>frompandas.tseries.offsetsimportBQuarterBegin>>>ts=pd.Timestamp('2020-05-24 05:01:15')>>>ts+BQuarterBegin()Timestamp('2020-06-01 05:01:15')>>>ts+BQuarterBegin(2)Timestamp('2020-09-01 05:01:15')>>>ts+BQuarterBegin(startingMonth=2)Timestamp('2020-08-03 05:01:15')>>>ts+BQuarterBegin(-1)Timestamp('2020-03-02 05:01:15')AttributesbaseReturns a copy of the calling offset object with n=1 and all other attributes equal.freqstrReturn a string representing the frequency.kwdsReturn a dict of extra parameters for the offset.nameReturn a string representing the base frequency.nnanosnormalizerule_codestartingMonthMethodscopyReturn a copy of the frequency.is_anchoredReturn boolean whether the frequency is a unit frequency (n=1).is_month_endReturn boolean whether a timestamp occurs on the month end.is_month_startReturn boolean whether a timestamp occurs on the month start.is_on_offsetReturn boolean whether a timestamp intersects with this frequency.is_quarter_endReturn boolean whether a timestamp occurs on the quarter end.is_quarter_startReturn boolean whether a timestamp occurs on the quarter start.is_year_endReturn boolean whether a timestamp occurs on the year end.is_year_startReturn boolean whether a timestamp occurs on the year start.rollbackRoll provided date backward to next offset only if not on offset.rollforwardRoll provided date forward to next offset only if not on offset."
Pandas,Date offsets,pandas.tseries.offsets.BQuarterBegin.freqstr,pandas.tseries.offsets.BQuarterBegin.freqstr#BQuarterBegin.freqstr#Return a string representing the frequency.Examples>>>pd.DateOffset(5).freqstr'<5 * DateOffsets>'>>>pd.offsets.BusinessHour(2).freqstr'2BH'>>>pd.offsets.Nano().freqstr'N'>>>pd.offsets.Nano(-3).freqstr'-3N'
Pandas,Date offsets,pandas.tseries.offsets.BQuarterBegin.kwds,"pandas.tseries.offsets.BQuarterBegin.kwds#BQuarterBegin.kwds#Return a dict of extra parameters for the offset.Examples>>>pd.DateOffset(5).kwds{}>>>pd.offsets.FY5253Quarter().kwds{'weekday': 0,'startingMonth': 1,'qtr_with_extra_week': 1,'variation': 'nearest'}"
Pandas,Date offsets,pandas.tseries.offsets.BQuarterBegin.name,pandas.tseries.offsets.BQuarterBegin.name#BQuarterBegin.name#Return a string representing the base frequency.Examples>>>pd.offsets.Hour().name'H'>>>pd.offsets.Hour(5).name'H'
Pandas,Date offsets,pandas.tseries.offsets.BQuarterBegin.nanos,pandas.tseries.offsets.BQuarterBegin.nanos#BQuarterBegin.nanos#
Pandas,Date offsets,pandas.tseries.offsets.BQuarterBegin.normalize,pandas.tseries.offsets.BQuarterBegin.normalize#BQuarterBegin.normalize#
Pandas,Date offsets,pandas.tseries.offsets.BQuarterBegin.rule_code,pandas.tseries.offsets.BQuarterBegin.rule_code#BQuarterBegin.rule_code#
Pandas,Date offsets,pandas.tseries.offsets.BQuarterBegin.n,pandas.tseries.offsets.BQuarterBegin.n#BQuarterBegin.n#
Pandas,Date offsets,pandas.tseries.offsets.BQuarterBegin.startingMonth,pandas.tseries.offsets.BQuarterBegin.startingMonth#BQuarterBegin.startingMonth#
Pandas,Date offsets,pandas.tseries.offsets.BQuarterBegin.copy,pandas.tseries.offsets.BQuarterBegin.copy#BQuarterBegin.copy()#Return a copy of the frequency.Examples>>>freq=pd.DateOffset(1)>>>freq_copy=freq.copy()>>>freqisfreq_copyFalse
Pandas,Date offsets,pandas.tseries.offsets.BQuarterBegin.is_anchored,pandas.tseries.offsets.BQuarterBegin.is_anchored#BQuarterBegin.is_anchored()#Return boolean whether the frequency is a unit frequency (n=1).Examples>>>pd.DateOffset().is_anchored()True>>>pd.DateOffset(2).is_anchored()False
Pandas,Date offsets,pandas.tseries.offsets.BQuarterBegin.is_on_offset,"pandas.tseries.offsets.BQuarterBegin.is_on_offset#BQuarterBegin.is_on_offset()#Return boolean whether a timestamp intersects with this frequency.Parameters:dtdatetime.datetimeTimestamp to check intersections with frequency.Examples>>>ts=pd.Timestamp(2022,1,1)>>>freq=pd.offsets.Day(1)>>>freq.is_on_offset(ts)True>>>ts=pd.Timestamp(2022,8,6)>>>ts.day_name()'Saturday'>>>freq=pd.offsets.BusinessDay(1)>>>freq.is_on_offset(ts)False"
Pandas,Date offsets,pandas.tseries.offsets.BQuarterBegin.is_month_start,"pandas.tseries.offsets.BQuarterBegin.is_month_start#BQuarterBegin.is_month_start()#Return boolean whether a timestamp occurs on the month start.Examples>>>ts=pd.Timestamp(2022,1,1)>>>freq=pd.offsets.Hour(5)>>>freq.is_month_start(ts)True"
Pandas,Date offsets,pandas.tseries.offsets.BQuarterBegin.is_month_end,"pandas.tseries.offsets.BQuarterBegin.is_month_end#BQuarterBegin.is_month_end()#Return boolean whether a timestamp occurs on the month end.Examples>>>ts=pd.Timestamp(2022,1,1)>>>freq=pd.offsets.Hour(5)>>>freq.is_month_end(ts)False"
Pandas,Date offsets,pandas.tseries.offsets.BQuarterBegin.is_quarter_start,"pandas.tseries.offsets.BQuarterBegin.is_quarter_start#BQuarterBegin.is_quarter_start()#Return boolean whether a timestamp occurs on the quarter start.Examples>>>ts=pd.Timestamp(2022,1,1)>>>freq=pd.offsets.Hour(5)>>>freq.is_quarter_start(ts)True"
Pandas,Date offsets,pandas.tseries.offsets.BQuarterBegin.is_quarter_end,"pandas.tseries.offsets.BQuarterBegin.is_quarter_end#BQuarterBegin.is_quarter_end()#Return boolean whether a timestamp occurs on the quarter end.Examples>>>ts=pd.Timestamp(2022,1,1)>>>freq=pd.offsets.Hour(5)>>>freq.is_quarter_end(ts)False"
Pandas,Date offsets,pandas.tseries.offsets.BQuarterBegin.is_year_start,"pandas.tseries.offsets.BQuarterBegin.is_year_start#BQuarterBegin.is_year_start()#Return boolean whether a timestamp occurs on the year start.Examples>>>ts=pd.Timestamp(2022,1,1)>>>freq=pd.offsets.Hour(5)>>>freq.is_year_start(ts)True"
Pandas,Date offsets,pandas.tseries.offsets.BQuarterBegin.is_year_end,"pandas.tseries.offsets.BQuarterBegin.is_year_end#BQuarterBegin.is_year_end()#Return boolean whether a timestamp occurs on the year end.Examples>>>ts=pd.Timestamp(2022,1,1)>>>freq=pd.offsets.Hour(5)>>>freq.is_year_end(ts)False"
Pandas,Date offsets,pandas.tseries.offsets.QuarterEnd,"pandas.tseries.offsets.QuarterEnd#classpandas.tseries.offsets.QuarterEnd#DateOffset increments between Quarter end dates.startingMonth = 1 corresponds to dates like 1/31/2007, 4/30/2007, …
startingMonth = 2 corresponds to dates like 2/28/2007, 5/31/2007, …
startingMonth = 3 corresponds to dates like 3/31/2007, 6/30/2007, …Parameters:nint, default 1The number of quarters represented.normalizebool, default FalseNormalize start/end dates to midnight before generating date range.startingMonthint, default 3A specific integer for the month of the year from which we start quarters.See alsoDateOffsetStandard kind of date increment.Examples>>>ts=pd.Timestamp(2022,1,1)>>>ts+pd.offsets.QuarterEnd()Timestamp('2022-03-31 00:00:00')AttributesbaseReturns a copy of the calling offset object with n=1 and all other attributes equal.freqstrReturn a string representing the frequency.kwdsReturn a dict of extra parameters for the offset.nameReturn a string representing the base frequency.nnanosnormalizerule_codestartingMonthMethodscopyReturn a copy of the frequency.is_anchoredReturn boolean whether the frequency is a unit frequency (n=1).is_month_endReturn boolean whether a timestamp occurs on the month end.is_month_startReturn boolean whether a timestamp occurs on the month start.is_on_offsetReturn boolean whether a timestamp intersects with this frequency.is_quarter_endReturn boolean whether a timestamp occurs on the quarter end.is_quarter_startReturn boolean whether a timestamp occurs on the quarter start.is_year_endReturn boolean whether a timestamp occurs on the year end.is_year_startReturn boolean whether a timestamp occurs on the year start.rollbackRoll provided date backward to next offset only if not on offset.rollforwardRoll provided date forward to next offset only if not on offset."
Pandas,Date offsets,pandas.tseries.offsets.QuarterEnd.freqstr,pandas.tseries.offsets.QuarterEnd.freqstr#QuarterEnd.freqstr#Return a string representing the frequency.Examples>>>pd.DateOffset(5).freqstr'<5 * DateOffsets>'>>>pd.offsets.BusinessHour(2).freqstr'2BH'>>>pd.offsets.Nano().freqstr'N'>>>pd.offsets.Nano(-3).freqstr'-3N'
Pandas,Date offsets,pandas.tseries.offsets.QuarterEnd.kwds,"pandas.tseries.offsets.QuarterEnd.kwds#QuarterEnd.kwds#Return a dict of extra parameters for the offset.Examples>>>pd.DateOffset(5).kwds{}>>>pd.offsets.FY5253Quarter().kwds{'weekday': 0,'startingMonth': 1,'qtr_with_extra_week': 1,'variation': 'nearest'}"
Pandas,Date offsets,pandas.tseries.offsets.QuarterEnd.name,pandas.tseries.offsets.QuarterEnd.name#QuarterEnd.name#Return a string representing the base frequency.Examples>>>pd.offsets.Hour().name'H'>>>pd.offsets.Hour(5).name'H'
Pandas,Date offsets,pandas.tseries.offsets.QuarterEnd.nanos,pandas.tseries.offsets.QuarterEnd.nanos#QuarterEnd.nanos#
Pandas,Date offsets,pandas.tseries.offsets.QuarterEnd.normalize,pandas.tseries.offsets.QuarterEnd.normalize#QuarterEnd.normalize#
Pandas,Date offsets,pandas.tseries.offsets.QuarterEnd.rule_code,pandas.tseries.offsets.QuarterEnd.rule_code#QuarterEnd.rule_code#
Pandas,Date offsets,pandas.tseries.offsets.QuarterEnd.n,pandas.tseries.offsets.QuarterEnd.n#QuarterEnd.n#
Pandas,Date offsets,pandas.tseries.offsets.QuarterEnd.startingMonth,pandas.tseries.offsets.QuarterEnd.startingMonth#QuarterEnd.startingMonth#
Pandas,Date offsets,pandas.tseries.offsets.QuarterEnd.copy,pandas.tseries.offsets.QuarterEnd.copy#QuarterEnd.copy()#Return a copy of the frequency.Examples>>>freq=pd.DateOffset(1)>>>freq_copy=freq.copy()>>>freqisfreq_copyFalse
Pandas,Date offsets,pandas.tseries.offsets.QuarterEnd.is_anchored,pandas.tseries.offsets.QuarterEnd.is_anchored#QuarterEnd.is_anchored()#Return boolean whether the frequency is a unit frequency (n=1).Examples>>>pd.DateOffset().is_anchored()True>>>pd.DateOffset(2).is_anchored()False
Pandas,Date offsets,pandas.tseries.offsets.QuarterEnd.is_on_offset,"pandas.tseries.offsets.QuarterEnd.is_on_offset#QuarterEnd.is_on_offset()#Return boolean whether a timestamp intersects with this frequency.Parameters:dtdatetime.datetimeTimestamp to check intersections with frequency.Examples>>>ts=pd.Timestamp(2022,1,1)>>>freq=pd.offsets.Day(1)>>>freq.is_on_offset(ts)True>>>ts=pd.Timestamp(2022,8,6)>>>ts.day_name()'Saturday'>>>freq=pd.offsets.BusinessDay(1)>>>freq.is_on_offset(ts)False"
Pandas,Date offsets,pandas.tseries.offsets.QuarterEnd.is_month_start,"pandas.tseries.offsets.QuarterEnd.is_month_start#QuarterEnd.is_month_start()#Return boolean whether a timestamp occurs on the month start.Examples>>>ts=pd.Timestamp(2022,1,1)>>>freq=pd.offsets.Hour(5)>>>freq.is_month_start(ts)True"
Pandas,Date offsets,pandas.tseries.offsets.QuarterEnd.is_month_end,"pandas.tseries.offsets.QuarterEnd.is_month_end#QuarterEnd.is_month_end()#Return boolean whether a timestamp occurs on the month end.Examples>>>ts=pd.Timestamp(2022,1,1)>>>freq=pd.offsets.Hour(5)>>>freq.is_month_end(ts)False"
Pandas,Date offsets,pandas.tseries.offsets.QuarterEnd.is_quarter_start,"pandas.tseries.offsets.QuarterEnd.is_quarter_start#QuarterEnd.is_quarter_start()#Return boolean whether a timestamp occurs on the quarter start.Examples>>>ts=pd.Timestamp(2022,1,1)>>>freq=pd.offsets.Hour(5)>>>freq.is_quarter_start(ts)True"
Pandas,Date offsets,pandas.tseries.offsets.QuarterEnd.is_quarter_end,"pandas.tseries.offsets.QuarterEnd.is_quarter_end#QuarterEnd.is_quarter_end()#Return boolean whether a timestamp occurs on the quarter end.Examples>>>ts=pd.Timestamp(2022,1,1)>>>freq=pd.offsets.Hour(5)>>>freq.is_quarter_end(ts)False"
Pandas,Date offsets,pandas.tseries.offsets.QuarterEnd.is_year_start,"pandas.tseries.offsets.QuarterEnd.is_year_start#QuarterEnd.is_year_start()#Return boolean whether a timestamp occurs on the year start.Examples>>>ts=pd.Timestamp(2022,1,1)>>>freq=pd.offsets.Hour(5)>>>freq.is_year_start(ts)True"
Pandas,Date offsets,pandas.tseries.offsets.QuarterEnd.is_year_end,"pandas.tseries.offsets.QuarterEnd.is_year_end#QuarterEnd.is_year_end()#Return boolean whether a timestamp occurs on the year end.Examples>>>ts=pd.Timestamp(2022,1,1)>>>freq=pd.offsets.Hour(5)>>>freq.is_year_end(ts)False"
Pandas,Date offsets,pandas.tseries.offsets.QuarterBegin,"pandas.tseries.offsets.QuarterBegin#classpandas.tseries.offsets.QuarterBegin#DateOffset increments between Quarter start dates.startingMonth = 1 corresponds to dates like 1/01/2007, 4/01/2007, …
startingMonth = 2 corresponds to dates like 2/01/2007, 5/01/2007, …
startingMonth = 3 corresponds to dates like 3/01/2007, 6/01/2007, …Parameters:nint, default 1The number of quarters represented.normalizebool, default FalseNormalize start/end dates to midnight before generating date range.startingMonthint, default 3A specific integer for the month of the year from which we start quarters.See alsoDateOffsetStandard kind of date increment.Examples>>>ts=pd.Timestamp(2022,1,1)>>>ts+pd.offsets.QuarterBegin()Timestamp('2022-03-01 00:00:00')AttributesbaseReturns a copy of the calling offset object with n=1 and all other attributes equal.freqstrReturn a string representing the frequency.kwdsReturn a dict of extra parameters for the offset.nameReturn a string representing the base frequency.nnanosnormalizerule_codestartingMonthMethodscopyReturn a copy of the frequency.is_anchoredReturn boolean whether the frequency is a unit frequency (n=1).is_month_endReturn boolean whether a timestamp occurs on the month end.is_month_startReturn boolean whether a timestamp occurs on the month start.is_on_offsetReturn boolean whether a timestamp intersects with this frequency.is_quarter_endReturn boolean whether a timestamp occurs on the quarter end.is_quarter_startReturn boolean whether a timestamp occurs on the quarter start.is_year_endReturn boolean whether a timestamp occurs on the year end.is_year_startReturn boolean whether a timestamp occurs on the year start.rollbackRoll provided date backward to next offset only if not on offset.rollforwardRoll provided date forward to next offset only if not on offset."
Pandas,Date offsets,pandas.tseries.offsets.QuarterBegin.freqstr,pandas.tseries.offsets.QuarterBegin.freqstr#QuarterBegin.freqstr#Return a string representing the frequency.Examples>>>pd.DateOffset(5).freqstr'<5 * DateOffsets>'>>>pd.offsets.BusinessHour(2).freqstr'2BH'>>>pd.offsets.Nano().freqstr'N'>>>pd.offsets.Nano(-3).freqstr'-3N'
Pandas,Date offsets,pandas.tseries.offsets.QuarterBegin.kwds,"pandas.tseries.offsets.QuarterBegin.kwds#QuarterBegin.kwds#Return a dict of extra parameters for the offset.Examples>>>pd.DateOffset(5).kwds{}>>>pd.offsets.FY5253Quarter().kwds{'weekday': 0,'startingMonth': 1,'qtr_with_extra_week': 1,'variation': 'nearest'}"
Pandas,Date offsets,pandas.tseries.offsets.QuarterBegin.name,pandas.tseries.offsets.QuarterBegin.name#QuarterBegin.name#Return a string representing the base frequency.Examples>>>pd.offsets.Hour().name'H'>>>pd.offsets.Hour(5).name'H'
Pandas,Date offsets,pandas.tseries.offsets.QuarterBegin.nanos,pandas.tseries.offsets.QuarterBegin.nanos#QuarterBegin.nanos#
Pandas,Date offsets,pandas.tseries.offsets.QuarterBegin.normalize,pandas.tseries.offsets.QuarterBegin.normalize#QuarterBegin.normalize#
Pandas,Date offsets,pandas.tseries.offsets.QuarterBegin.rule_code,pandas.tseries.offsets.QuarterBegin.rule_code#QuarterBegin.rule_code#
Pandas,Date offsets,pandas.tseries.offsets.QuarterBegin.n,pandas.tseries.offsets.QuarterBegin.n#QuarterBegin.n#
Pandas,Date offsets,pandas.tseries.offsets.QuarterBegin.startingMonth,pandas.tseries.offsets.QuarterBegin.startingMonth#QuarterBegin.startingMonth#
Pandas,Date offsets,pandas.tseries.offsets.QuarterBegin.copy,pandas.tseries.offsets.QuarterBegin.copy#QuarterBegin.copy()#Return a copy of the frequency.Examples>>>freq=pd.DateOffset(1)>>>freq_copy=freq.copy()>>>freqisfreq_copyFalse
Pandas,Date offsets,pandas.tseries.offsets.QuarterBegin.is_anchored,pandas.tseries.offsets.QuarterBegin.is_anchored#QuarterBegin.is_anchored()#Return boolean whether the frequency is a unit frequency (n=1).Examples>>>pd.DateOffset().is_anchored()True>>>pd.DateOffset(2).is_anchored()False
Pandas,Date offsets,pandas.tseries.offsets.QuarterBegin.is_on_offset,"pandas.tseries.offsets.QuarterBegin.is_on_offset#QuarterBegin.is_on_offset()#Return boolean whether a timestamp intersects with this frequency.Parameters:dtdatetime.datetimeTimestamp to check intersections with frequency.Examples>>>ts=pd.Timestamp(2022,1,1)>>>freq=pd.offsets.Day(1)>>>freq.is_on_offset(ts)True>>>ts=pd.Timestamp(2022,8,6)>>>ts.day_name()'Saturday'>>>freq=pd.offsets.BusinessDay(1)>>>freq.is_on_offset(ts)False"
Pandas,Date offsets,pandas.tseries.offsets.QuarterBegin.is_month_start,"pandas.tseries.offsets.QuarterBegin.is_month_start#QuarterBegin.is_month_start()#Return boolean whether a timestamp occurs on the month start.Examples>>>ts=pd.Timestamp(2022,1,1)>>>freq=pd.offsets.Hour(5)>>>freq.is_month_start(ts)True"
Pandas,Date offsets,pandas.tseries.offsets.QuarterBegin.is_month_end,"pandas.tseries.offsets.QuarterBegin.is_month_end#QuarterBegin.is_month_end()#Return boolean whether a timestamp occurs on the month end.Examples>>>ts=pd.Timestamp(2022,1,1)>>>freq=pd.offsets.Hour(5)>>>freq.is_month_end(ts)False"
Pandas,Date offsets,pandas.tseries.offsets.QuarterBegin.is_quarter_start,"pandas.tseries.offsets.QuarterBegin.is_quarter_start#QuarterBegin.is_quarter_start()#Return boolean whether a timestamp occurs on the quarter start.Examples>>>ts=pd.Timestamp(2022,1,1)>>>freq=pd.offsets.Hour(5)>>>freq.is_quarter_start(ts)True"
Pandas,Date offsets,pandas.tseries.offsets.QuarterBegin.is_quarter_end,"pandas.tseries.offsets.QuarterBegin.is_quarter_end#QuarterBegin.is_quarter_end()#Return boolean whether a timestamp occurs on the quarter end.Examples>>>ts=pd.Timestamp(2022,1,1)>>>freq=pd.offsets.Hour(5)>>>freq.is_quarter_end(ts)False"
Pandas,Date offsets,pandas.tseries.offsets.QuarterBegin.is_year_start,"pandas.tseries.offsets.QuarterBegin.is_year_start#QuarterBegin.is_year_start()#Return boolean whether a timestamp occurs on the year start.Examples>>>ts=pd.Timestamp(2022,1,1)>>>freq=pd.offsets.Hour(5)>>>freq.is_year_start(ts)True"
Pandas,Date offsets,pandas.tseries.offsets.QuarterBegin.is_year_end,"pandas.tseries.offsets.QuarterBegin.is_year_end#QuarterBegin.is_year_end()#Return boolean whether a timestamp occurs on the year end.Examples>>>ts=pd.Timestamp(2022,1,1)>>>freq=pd.offsets.Hour(5)>>>freq.is_year_end(ts)False"
Pandas,Date offsets,pandas.tseries.offsets.BYearEnd,"pandas.tseries.offsets.BYearEnd#classpandas.tseries.offsets.BYearEnd#DateOffset increments between the last business day of the year.Parameters:nint, default 1The number of years represented.normalizebool, default FalseNormalize start/end dates to midnight before generating date range.monthint, default 12A specific integer for the month of the year.See alsoDateOffsetStandard kind of date increment.Examples>>>frompandas.tseries.offsetsimportBYearEnd>>>ts=pd.Timestamp('2020-05-24 05:01:15')>>>ts-BYearEnd()Timestamp('2019-12-31 05:01:15')>>>ts+BYearEnd()Timestamp('2020-12-31 05:01:15')>>>ts+BYearEnd(3)Timestamp('2022-12-30 05:01:15')>>>ts+BYearEnd(-3)Timestamp('2017-12-29 05:01:15')>>>ts+BYearEnd(month=11)Timestamp('2020-11-30 05:01:15')AttributesbaseReturns a copy of the calling offset object with n=1 and all other attributes equal.freqstrReturn a string representing the frequency.kwdsReturn a dict of extra parameters for the offset.nameReturn a string representing the base frequency.monthnnanosnormalizerule_codeMethodscopyReturn a copy of the frequency.is_anchoredReturn boolean whether the frequency is a unit frequency (n=1).is_month_endReturn boolean whether a timestamp occurs on the month end.is_month_startReturn boolean whether a timestamp occurs on the month start.is_on_offsetReturn boolean whether a timestamp intersects with this frequency.is_quarter_endReturn boolean whether a timestamp occurs on the quarter end.is_quarter_startReturn boolean whether a timestamp occurs on the quarter start.is_year_endReturn boolean whether a timestamp occurs on the year end.is_year_startReturn boolean whether a timestamp occurs on the year start.rollbackRoll provided date backward to next offset only if not on offset.rollforwardRoll provided date forward to next offset only if not on offset."
Pandas,Date offsets,pandas.tseries.offsets.BYearEnd.freqstr,pandas.tseries.offsets.BYearEnd.freqstr#BYearEnd.freqstr#Return a string representing the frequency.Examples>>>pd.DateOffset(5).freqstr'<5 * DateOffsets>'>>>pd.offsets.BusinessHour(2).freqstr'2BH'>>>pd.offsets.Nano().freqstr'N'>>>pd.offsets.Nano(-3).freqstr'-3N'
Pandas,Date offsets,pandas.tseries.offsets.BYearEnd.kwds,"pandas.tseries.offsets.BYearEnd.kwds#BYearEnd.kwds#Return a dict of extra parameters for the offset.Examples>>>pd.DateOffset(5).kwds{}>>>pd.offsets.FY5253Quarter().kwds{'weekday': 0,'startingMonth': 1,'qtr_with_extra_week': 1,'variation': 'nearest'}"
Pandas,Date offsets,pandas.tseries.offsets.BYearEnd.name,pandas.tseries.offsets.BYearEnd.name#BYearEnd.name#Return a string representing the base frequency.Examples>>>pd.offsets.Hour().name'H'>>>pd.offsets.Hour(5).name'H'
Pandas,Date offsets,pandas.tseries.offsets.BYearEnd.nanos,pandas.tseries.offsets.BYearEnd.nanos#BYearEnd.nanos#
Pandas,Date offsets,pandas.tseries.offsets.BYearEnd.normalize,pandas.tseries.offsets.BYearEnd.normalize#BYearEnd.normalize#
Pandas,Date offsets,pandas.tseries.offsets.BYearEnd.rule_code,pandas.tseries.offsets.BYearEnd.rule_code#BYearEnd.rule_code#
Pandas,Date offsets,pandas.tseries.offsets.BYearEnd.n,pandas.tseries.offsets.BYearEnd.n#BYearEnd.n#
Pandas,Date offsets,pandas.tseries.offsets.BYearEnd.month,pandas.tseries.offsets.BYearEnd.month#BYearEnd.month#
Pandas,Date offsets,pandas.tseries.offsets.BYearEnd.copy,pandas.tseries.offsets.BYearEnd.copy#BYearEnd.copy()#Return a copy of the frequency.Examples>>>freq=pd.DateOffset(1)>>>freq_copy=freq.copy()>>>freqisfreq_copyFalse
Pandas,Date offsets,pandas.tseries.offsets.BYearEnd.is_anchored,pandas.tseries.offsets.BYearEnd.is_anchored#BYearEnd.is_anchored()#Return boolean whether the frequency is a unit frequency (n=1).Examples>>>pd.DateOffset().is_anchored()True>>>pd.DateOffset(2).is_anchored()False
Pandas,Date offsets,pandas.tseries.offsets.BYearEnd.is_on_offset,"pandas.tseries.offsets.BYearEnd.is_on_offset#BYearEnd.is_on_offset()#Return boolean whether a timestamp intersects with this frequency.Parameters:dtdatetime.datetimeTimestamp to check intersections with frequency.Examples>>>ts=pd.Timestamp(2022,1,1)>>>freq=pd.offsets.Day(1)>>>freq.is_on_offset(ts)True>>>ts=pd.Timestamp(2022,8,6)>>>ts.day_name()'Saturday'>>>freq=pd.offsets.BusinessDay(1)>>>freq.is_on_offset(ts)False"
Pandas,Date offsets,pandas.tseries.offsets.BYearEnd.is_month_start,"pandas.tseries.offsets.BYearEnd.is_month_start#BYearEnd.is_month_start()#Return boolean whether a timestamp occurs on the month start.Examples>>>ts=pd.Timestamp(2022,1,1)>>>freq=pd.offsets.Hour(5)>>>freq.is_month_start(ts)True"
Pandas,Date offsets,pandas.tseries.offsets.BYearEnd.is_month_end,"pandas.tseries.offsets.BYearEnd.is_month_end#BYearEnd.is_month_end()#Return boolean whether a timestamp occurs on the month end.Examples>>>ts=pd.Timestamp(2022,1,1)>>>freq=pd.offsets.Hour(5)>>>freq.is_month_end(ts)False"
Pandas,Date offsets,pandas.tseries.offsets.BYearEnd.is_quarter_start,"pandas.tseries.offsets.BYearEnd.is_quarter_start#BYearEnd.is_quarter_start()#Return boolean whether a timestamp occurs on the quarter start.Examples>>>ts=pd.Timestamp(2022,1,1)>>>freq=pd.offsets.Hour(5)>>>freq.is_quarter_start(ts)True"
Pandas,Date offsets,pandas.tseries.offsets.BYearEnd.is_quarter_end,"pandas.tseries.offsets.BYearEnd.is_quarter_end#BYearEnd.is_quarter_end()#Return boolean whether a timestamp occurs on the quarter end.Examples>>>ts=pd.Timestamp(2022,1,1)>>>freq=pd.offsets.Hour(5)>>>freq.is_quarter_end(ts)False"
Pandas,Date offsets,pandas.tseries.offsets.BYearEnd.is_year_start,"pandas.tseries.offsets.BYearEnd.is_year_start#BYearEnd.is_year_start()#Return boolean whether a timestamp occurs on the year start.Examples>>>ts=pd.Timestamp(2022,1,1)>>>freq=pd.offsets.Hour(5)>>>freq.is_year_start(ts)True"
Pandas,Date offsets,pandas.tseries.offsets.BYearEnd.is_year_end,"pandas.tseries.offsets.BYearEnd.is_year_end#BYearEnd.is_year_end()#Return boolean whether a timestamp occurs on the year end.Examples>>>ts=pd.Timestamp(2022,1,1)>>>freq=pd.offsets.Hour(5)>>>freq.is_year_end(ts)False"
Pandas,Date offsets,pandas.tseries.offsets.BYearBegin,"pandas.tseries.offsets.BYearBegin#classpandas.tseries.offsets.BYearBegin#DateOffset increments between the first business day of the year.Parameters:nint, default 1The number of years represented.normalizebool, default FalseNormalize start/end dates to midnight before generating date range.monthint, default 1A specific integer for the month of the year.See alsoDateOffsetStandard kind of date increment.Examples>>>frompandas.tseries.offsetsimportBYearBegin>>>ts=pd.Timestamp('2020-05-24 05:01:15')>>>ts+BYearBegin()Timestamp('2021-01-01 05:01:15')>>>ts-BYearBegin()Timestamp('2020-01-01 05:01:15')>>>ts+BYearBegin(-1)Timestamp('2020-01-01 05:01:15')>>>ts+BYearBegin(2)Timestamp('2022-01-03 05:01:15')>>>ts+BYearBegin(month=11)Timestamp('2020-11-02 05:01:15')AttributesbaseReturns a copy of the calling offset object with n=1 and all other attributes equal.freqstrReturn a string representing the frequency.kwdsReturn a dict of extra parameters for the offset.nameReturn a string representing the base frequency.monthnnanosnormalizerule_codeMethodscopyReturn a copy of the frequency.is_anchoredReturn boolean whether the frequency is a unit frequency (n=1).is_month_endReturn boolean whether a timestamp occurs on the month end.is_month_startReturn boolean whether a timestamp occurs on the month start.is_on_offsetReturn boolean whether a timestamp intersects with this frequency.is_quarter_endReturn boolean whether a timestamp occurs on the quarter end.is_quarter_startReturn boolean whether a timestamp occurs on the quarter start.is_year_endReturn boolean whether a timestamp occurs on the year end.is_year_startReturn boolean whether a timestamp occurs on the year start.rollbackRoll provided date backward to next offset only if not on offset.rollforwardRoll provided date forward to next offset only if not on offset."
Pandas,Date offsets,pandas.tseries.offsets.BYearBegin.freqstr,pandas.tseries.offsets.BYearBegin.freqstr#BYearBegin.freqstr#Return a string representing the frequency.Examples>>>pd.DateOffset(5).freqstr'<5 * DateOffsets>'>>>pd.offsets.BusinessHour(2).freqstr'2BH'>>>pd.offsets.Nano().freqstr'N'>>>pd.offsets.Nano(-3).freqstr'-3N'
Pandas,Date offsets,pandas.tseries.offsets.BYearBegin.kwds,"pandas.tseries.offsets.BYearBegin.kwds#BYearBegin.kwds#Return a dict of extra parameters for the offset.Examples>>>pd.DateOffset(5).kwds{}>>>pd.offsets.FY5253Quarter().kwds{'weekday': 0,'startingMonth': 1,'qtr_with_extra_week': 1,'variation': 'nearest'}"
Pandas,Date offsets,pandas.tseries.offsets.BYearBegin.name,pandas.tseries.offsets.BYearBegin.name#BYearBegin.name#Return a string representing the base frequency.Examples>>>pd.offsets.Hour().name'H'>>>pd.offsets.Hour(5).name'H'
Pandas,Date offsets,pandas.tseries.offsets.BYearBegin.nanos,pandas.tseries.offsets.BYearBegin.nanos#BYearBegin.nanos#
Pandas,Date offsets,pandas.tseries.offsets.BYearBegin.normalize,pandas.tseries.offsets.BYearBegin.normalize#BYearBegin.normalize#
Pandas,Date offsets,pandas.tseries.offsets.BYearBegin.rule_code,pandas.tseries.offsets.BYearBegin.rule_code#BYearBegin.rule_code#
Pandas,Date offsets,pandas.tseries.offsets.BYearBegin.n,pandas.tseries.offsets.BYearBegin.n#BYearBegin.n#
Pandas,Date offsets,pandas.tseries.offsets.BYearBegin.month,pandas.tseries.offsets.BYearBegin.month#BYearBegin.month#
Pandas,Date offsets,pandas.tseries.offsets.BYearBegin.copy,pandas.tseries.offsets.BYearBegin.copy#BYearBegin.copy()#Return a copy of the frequency.Examples>>>freq=pd.DateOffset(1)>>>freq_copy=freq.copy()>>>freqisfreq_copyFalse
Pandas,Date offsets,pandas.tseries.offsets.BYearBegin.is_anchored,pandas.tseries.offsets.BYearBegin.is_anchored#BYearBegin.is_anchored()#Return boolean whether the frequency is a unit frequency (n=1).Examples>>>pd.DateOffset().is_anchored()True>>>pd.DateOffset(2).is_anchored()False
Pandas,Date offsets,pandas.tseries.offsets.BYearBegin.is_on_offset,"pandas.tseries.offsets.BYearBegin.is_on_offset#BYearBegin.is_on_offset()#Return boolean whether a timestamp intersects with this frequency.Parameters:dtdatetime.datetimeTimestamp to check intersections with frequency.Examples>>>ts=pd.Timestamp(2022,1,1)>>>freq=pd.offsets.Day(1)>>>freq.is_on_offset(ts)True>>>ts=pd.Timestamp(2022,8,6)>>>ts.day_name()'Saturday'>>>freq=pd.offsets.BusinessDay(1)>>>freq.is_on_offset(ts)False"
Pandas,Date offsets,pandas.tseries.offsets.BYearBegin.is_month_start,"pandas.tseries.offsets.BYearBegin.is_month_start#BYearBegin.is_month_start()#Return boolean whether a timestamp occurs on the month start.Examples>>>ts=pd.Timestamp(2022,1,1)>>>freq=pd.offsets.Hour(5)>>>freq.is_month_start(ts)True"
Pandas,Date offsets,pandas.tseries.offsets.BYearBegin.is_month_end,"pandas.tseries.offsets.BYearBegin.is_month_end#BYearBegin.is_month_end()#Return boolean whether a timestamp occurs on the month end.Examples>>>ts=pd.Timestamp(2022,1,1)>>>freq=pd.offsets.Hour(5)>>>freq.is_month_end(ts)False"
Pandas,Date offsets,pandas.tseries.offsets.BYearBegin.is_quarter_start,"pandas.tseries.offsets.BYearBegin.is_quarter_start#BYearBegin.is_quarter_start()#Return boolean whether a timestamp occurs on the quarter start.Examples>>>ts=pd.Timestamp(2022,1,1)>>>freq=pd.offsets.Hour(5)>>>freq.is_quarter_start(ts)True"
Pandas,Date offsets,pandas.tseries.offsets.BYearBegin.is_quarter_end,"pandas.tseries.offsets.BYearBegin.is_quarter_end#BYearBegin.is_quarter_end()#Return boolean whether a timestamp occurs on the quarter end.Examples>>>ts=pd.Timestamp(2022,1,1)>>>freq=pd.offsets.Hour(5)>>>freq.is_quarter_end(ts)False"
Pandas,Date offsets,pandas.tseries.offsets.BYearBegin.is_year_start,"pandas.tseries.offsets.BYearBegin.is_year_start#BYearBegin.is_year_start()#Return boolean whether a timestamp occurs on the year start.Examples>>>ts=pd.Timestamp(2022,1,1)>>>freq=pd.offsets.Hour(5)>>>freq.is_year_start(ts)True"
Pandas,Date offsets,pandas.tseries.offsets.BYearBegin.is_year_end,"pandas.tseries.offsets.BYearBegin.is_year_end#BYearBegin.is_year_end()#Return boolean whether a timestamp occurs on the year end.Examples>>>ts=pd.Timestamp(2022,1,1)>>>freq=pd.offsets.Hour(5)>>>freq.is_year_end(ts)False"
Pandas,Date offsets,pandas.tseries.offsets.YearEnd,"pandas.tseries.offsets.YearEnd#classpandas.tseries.offsets.YearEnd#DateOffset increments between calendar year end dates.YearEnd goes to the next date which is the end of the year.Parameters:nint, default 1The number of years represented.normalizebool, default FalseNormalize start/end dates to midnight before generating date range.monthint, default 12A specific integer for the month of the year.See alsoDateOffsetStandard kind of date increment.Examples>>>ts=pd.Timestamp(2022,1,1)>>>ts+pd.offsets.YearEnd()Timestamp('2022-12-31 00:00:00')>>>ts=pd.Timestamp(2022,12,31)>>>ts+pd.offsets.YearEnd()Timestamp('2023-12-31 00:00:00')>>>ts=pd.Timestamp(2022,1,1)>>>ts+pd.offsets.YearEnd(month=2)Timestamp('2022-02-28 00:00:00')If you want to get the end of the current year:>>>ts=pd.Timestamp(2022,12,31)>>>pd.offsets.YearEnd().rollforward(ts)Timestamp('2022-12-31 00:00:00')AttributesbaseReturns a copy of the calling offset object with n=1 and all other attributes equal.freqstrReturn a string representing the frequency.kwdsReturn a dict of extra parameters for the offset.nameReturn a string representing the base frequency.monthnnanosnormalizerule_codeMethodscopyReturn a copy of the frequency.is_anchoredReturn boolean whether the frequency is a unit frequency (n=1).is_month_endReturn boolean whether a timestamp occurs on the month end.is_month_startReturn boolean whether a timestamp occurs on the month start.is_on_offsetReturn boolean whether a timestamp intersects with this frequency.is_quarter_endReturn boolean whether a timestamp occurs on the quarter end.is_quarter_startReturn boolean whether a timestamp occurs on the quarter start.is_year_endReturn boolean whether a timestamp occurs on the year end.is_year_startReturn boolean whether a timestamp occurs on the year start.rollbackRoll provided date backward to next offset only if not on offset.rollforwardRoll provided date forward to next offset only if not on offset."
Pandas,Date offsets,pandas.tseries.offsets.YearEnd.freqstr,pandas.tseries.offsets.YearEnd.freqstr#YearEnd.freqstr#Return a string representing the frequency.Examples>>>pd.DateOffset(5).freqstr'<5 * DateOffsets>'>>>pd.offsets.BusinessHour(2).freqstr'2BH'>>>pd.offsets.Nano().freqstr'N'>>>pd.offsets.Nano(-3).freqstr'-3N'
Pandas,Date offsets,pandas.tseries.offsets.YearEnd.kwds,"pandas.tseries.offsets.YearEnd.kwds#YearEnd.kwds#Return a dict of extra parameters for the offset.Examples>>>pd.DateOffset(5).kwds{}>>>pd.offsets.FY5253Quarter().kwds{'weekday': 0,'startingMonth': 1,'qtr_with_extra_week': 1,'variation': 'nearest'}"
Pandas,Date offsets,pandas.tseries.offsets.YearEnd.name,pandas.tseries.offsets.YearEnd.name#YearEnd.name#Return a string representing the base frequency.Examples>>>pd.offsets.Hour().name'H'>>>pd.offsets.Hour(5).name'H'
Pandas,Date offsets,pandas.tseries.offsets.YearEnd.nanos,pandas.tseries.offsets.YearEnd.nanos#YearEnd.nanos#
Pandas,Date offsets,pandas.tseries.offsets.YearEnd.normalize,pandas.tseries.offsets.YearEnd.normalize#YearEnd.normalize#
Pandas,Date offsets,pandas.tseries.offsets.YearEnd.rule_code,pandas.tseries.offsets.YearEnd.rule_code#YearEnd.rule_code#
Pandas,Date offsets,pandas.tseries.offsets.YearEnd.n,pandas.tseries.offsets.YearEnd.n#YearEnd.n#
Pandas,Date offsets,pandas.tseries.offsets.YearEnd.month,pandas.tseries.offsets.YearEnd.month#YearEnd.month#
Pandas,Date offsets,pandas.tseries.offsets.YearEnd.copy,pandas.tseries.offsets.YearEnd.copy#YearEnd.copy()#Return a copy of the frequency.Examples>>>freq=pd.DateOffset(1)>>>freq_copy=freq.copy()>>>freqisfreq_copyFalse
Pandas,Date offsets,pandas.tseries.offsets.YearEnd.is_anchored,pandas.tseries.offsets.YearEnd.is_anchored#YearEnd.is_anchored()#Return boolean whether the frequency is a unit frequency (n=1).Examples>>>pd.DateOffset().is_anchored()True>>>pd.DateOffset(2).is_anchored()False
Pandas,Date offsets,pandas.tseries.offsets.YearEnd.is_on_offset,"pandas.tseries.offsets.YearEnd.is_on_offset#YearEnd.is_on_offset()#Return boolean whether a timestamp intersects with this frequency.Parameters:dtdatetime.datetimeTimestamp to check intersections with frequency.Examples>>>ts=pd.Timestamp(2022,1,1)>>>freq=pd.offsets.Day(1)>>>freq.is_on_offset(ts)True>>>ts=pd.Timestamp(2022,8,6)>>>ts.day_name()'Saturday'>>>freq=pd.offsets.BusinessDay(1)>>>freq.is_on_offset(ts)False"
Pandas,Date offsets,pandas.tseries.offsets.YearEnd.is_month_start,"pandas.tseries.offsets.YearEnd.is_month_start#YearEnd.is_month_start()#Return boolean whether a timestamp occurs on the month start.Examples>>>ts=pd.Timestamp(2022,1,1)>>>freq=pd.offsets.Hour(5)>>>freq.is_month_start(ts)True"
Pandas,Date offsets,pandas.tseries.offsets.YearEnd.is_month_end,"pandas.tseries.offsets.YearEnd.is_month_end#YearEnd.is_month_end()#Return boolean whether a timestamp occurs on the month end.Examples>>>ts=pd.Timestamp(2022,1,1)>>>freq=pd.offsets.Hour(5)>>>freq.is_month_end(ts)False"
Pandas,Date offsets,pandas.tseries.offsets.YearEnd.is_quarter_start,"pandas.tseries.offsets.YearEnd.is_quarter_start#YearEnd.is_quarter_start()#Return boolean whether a timestamp occurs on the quarter start.Examples>>>ts=pd.Timestamp(2022,1,1)>>>freq=pd.offsets.Hour(5)>>>freq.is_quarter_start(ts)True"
Pandas,Date offsets,pandas.tseries.offsets.YearEnd.is_quarter_end,"pandas.tseries.offsets.YearEnd.is_quarter_end#YearEnd.is_quarter_end()#Return boolean whether a timestamp occurs on the quarter end.Examples>>>ts=pd.Timestamp(2022,1,1)>>>freq=pd.offsets.Hour(5)>>>freq.is_quarter_end(ts)False"
Pandas,Date offsets,pandas.tseries.offsets.YearEnd.is_year_start,"pandas.tseries.offsets.YearEnd.is_year_start#YearEnd.is_year_start()#Return boolean whether a timestamp occurs on the year start.Examples>>>ts=pd.Timestamp(2022,1,1)>>>freq=pd.offsets.Hour(5)>>>freq.is_year_start(ts)True"
Pandas,Date offsets,pandas.tseries.offsets.YearEnd.is_year_end,"pandas.tseries.offsets.YearEnd.is_year_end#YearEnd.is_year_end()#Return boolean whether a timestamp occurs on the year end.Examples>>>ts=pd.Timestamp(2022,1,1)>>>freq=pd.offsets.Hour(5)>>>freq.is_year_end(ts)False"
Pandas,Date offsets,pandas.tseries.offsets.YearBegin,"pandas.tseries.offsets.YearBegin#classpandas.tseries.offsets.YearBegin#DateOffset increments between calendar year begin dates.YearBegin goes to the next date which is the start of the year.Parameters:nint, default 1The number of years represented.normalizebool, default FalseNormalize start/end dates to midnight before generating date range.monthint, default 1A specific integer for the month of the year.See alsoDateOffsetStandard kind of date increment.Examples>>>ts=pd.Timestamp(2022,12,1)>>>ts+pd.offsets.YearBegin()Timestamp('2023-01-01 00:00:00')>>>ts=pd.Timestamp(2023,1,1)>>>ts+pd.offsets.YearBegin()Timestamp('2024-01-01 00:00:00')>>>ts=pd.Timestamp(2022,1,1)>>>ts+pd.offsets.YearBegin(month=2)Timestamp('2022-02-01 00:00:00')If you want to get the start of the current year:>>>ts=pd.Timestamp(2023,1,1)>>>pd.offsets.YearBegin().rollback(ts)Timestamp('2023-01-01 00:00:00')AttributesbaseReturns a copy of the calling offset object with n=1 and all other attributes equal.freqstrReturn a string representing the frequency.kwdsReturn a dict of extra parameters for the offset.nameReturn a string representing the base frequency.monthnnanosnormalizerule_codeMethodscopyReturn a copy of the frequency.is_anchoredReturn boolean whether the frequency is a unit frequency (n=1).is_month_endReturn boolean whether a timestamp occurs on the month end.is_month_startReturn boolean whether a timestamp occurs on the month start.is_on_offsetReturn boolean whether a timestamp intersects with this frequency.is_quarter_endReturn boolean whether a timestamp occurs on the quarter end.is_quarter_startReturn boolean whether a timestamp occurs on the quarter start.is_year_endReturn boolean whether a timestamp occurs on the year end.is_year_startReturn boolean whether a timestamp occurs on the year start.rollbackRoll provided date backward to next offset only if not on offset.rollforwardRoll provided date forward to next offset only if not on offset."
Pandas,Date offsets,pandas.tseries.offsets.YearBegin.freqstr,pandas.tseries.offsets.YearBegin.freqstr#YearBegin.freqstr#Return a string representing the frequency.Examples>>>pd.DateOffset(5).freqstr'<5 * DateOffsets>'>>>pd.offsets.BusinessHour(2).freqstr'2BH'>>>pd.offsets.Nano().freqstr'N'>>>pd.offsets.Nano(-3).freqstr'-3N'
Pandas,Date offsets,pandas.tseries.offsets.YearBegin.kwds,"pandas.tseries.offsets.YearBegin.kwds#YearBegin.kwds#Return a dict of extra parameters for the offset.Examples>>>pd.DateOffset(5).kwds{}>>>pd.offsets.FY5253Quarter().kwds{'weekday': 0,'startingMonth': 1,'qtr_with_extra_week': 1,'variation': 'nearest'}"
Pandas,Date offsets,pandas.tseries.offsets.YearBegin.name,pandas.tseries.offsets.YearBegin.name#YearBegin.name#Return a string representing the base frequency.Examples>>>pd.offsets.Hour().name'H'>>>pd.offsets.Hour(5).name'H'
Pandas,Date offsets,pandas.tseries.offsets.YearBegin.nanos,pandas.tseries.offsets.YearBegin.nanos#YearBegin.nanos#
Pandas,Date offsets,pandas.tseries.offsets.YearBegin.normalize,pandas.tseries.offsets.YearBegin.normalize#YearBegin.normalize#
Pandas,Date offsets,pandas.tseries.offsets.YearBegin.rule_code,pandas.tseries.offsets.YearBegin.rule_code#YearBegin.rule_code#
Pandas,Date offsets,pandas.tseries.offsets.YearBegin.n,pandas.tseries.offsets.YearBegin.n#YearBegin.n#
Pandas,Date offsets,pandas.tseries.offsets.YearBegin.month,pandas.tseries.offsets.YearBegin.month#YearBegin.month#
Pandas,Date offsets,pandas.tseries.offsets.YearBegin.copy,pandas.tseries.offsets.YearBegin.copy#YearBegin.copy()#Return a copy of the frequency.Examples>>>freq=pd.DateOffset(1)>>>freq_copy=freq.copy()>>>freqisfreq_copyFalse
Pandas,Date offsets,pandas.tseries.offsets.YearBegin.is_anchored,pandas.tseries.offsets.YearBegin.is_anchored#YearBegin.is_anchored()#Return boolean whether the frequency is a unit frequency (n=1).Examples>>>pd.DateOffset().is_anchored()True>>>pd.DateOffset(2).is_anchored()False
Pandas,Date offsets,pandas.tseries.offsets.YearBegin.is_on_offset,"pandas.tseries.offsets.YearBegin.is_on_offset#YearBegin.is_on_offset()#Return boolean whether a timestamp intersects with this frequency.Parameters:dtdatetime.datetimeTimestamp to check intersections with frequency.Examples>>>ts=pd.Timestamp(2022,1,1)>>>freq=pd.offsets.Day(1)>>>freq.is_on_offset(ts)True>>>ts=pd.Timestamp(2022,8,6)>>>ts.day_name()'Saturday'>>>freq=pd.offsets.BusinessDay(1)>>>freq.is_on_offset(ts)False"
Pandas,Date offsets,pandas.tseries.offsets.YearBegin.is_month_start,"pandas.tseries.offsets.YearBegin.is_month_start#YearBegin.is_month_start()#Return boolean whether a timestamp occurs on the month start.Examples>>>ts=pd.Timestamp(2022,1,1)>>>freq=pd.offsets.Hour(5)>>>freq.is_month_start(ts)True"
Pandas,Date offsets,pandas.tseries.offsets.YearBegin.is_month_end,"pandas.tseries.offsets.YearBegin.is_month_end#YearBegin.is_month_end()#Return boolean whether a timestamp occurs on the month end.Examples>>>ts=pd.Timestamp(2022,1,1)>>>freq=pd.offsets.Hour(5)>>>freq.is_month_end(ts)False"
Pandas,Date offsets,pandas.tseries.offsets.YearBegin.is_quarter_start,"pandas.tseries.offsets.YearBegin.is_quarter_start#YearBegin.is_quarter_start()#Return boolean whether a timestamp occurs on the quarter start.Examples>>>ts=pd.Timestamp(2022,1,1)>>>freq=pd.offsets.Hour(5)>>>freq.is_quarter_start(ts)True"
Pandas,Date offsets,pandas.tseries.offsets.YearBegin.is_quarter_end,"pandas.tseries.offsets.YearBegin.is_quarter_end#YearBegin.is_quarter_end()#Return boolean whether a timestamp occurs on the quarter end.Examples>>>ts=pd.Timestamp(2022,1,1)>>>freq=pd.offsets.Hour(5)>>>freq.is_quarter_end(ts)False"
Pandas,Date offsets,pandas.tseries.offsets.YearBegin.is_year_start,"pandas.tseries.offsets.YearBegin.is_year_start#YearBegin.is_year_start()#Return boolean whether a timestamp occurs on the year start.Examples>>>ts=pd.Timestamp(2022,1,1)>>>freq=pd.offsets.Hour(5)>>>freq.is_year_start(ts)True"
Pandas,Date offsets,pandas.tseries.offsets.YearBegin.is_year_end,"pandas.tseries.offsets.YearBegin.is_year_end#YearBegin.is_year_end()#Return boolean whether a timestamp occurs on the year end.Examples>>>ts=pd.Timestamp(2022,1,1)>>>freq=pd.offsets.Hour(5)>>>freq.is_year_end(ts)False"
Pandas,Date offsets,pandas.tseries.offsets.FY5253,"pandas.tseries.offsets.FY5253#classpandas.tseries.offsets.FY5253#Describes 52-53 week fiscal year. This is also known as a 4-4-5 calendar.It is used by companies that desire that their
fiscal year always end on the same day of the week.It is a method of managing accounting periods.
It is a common calendar structure for some industries,
such as retail, manufacturing and parking industry.For more information see:https://en.wikipedia.org/wiki/4-4-5_calendarThe year may either:end on the last X day of the Y month.end on the last X day closest to the last day of the Y month.X is a specific day of the week.
Y is a certain month of the yearParameters:nintweekdayint {0, 1, …, 6}, default 0A specific integer for the day of the week.0 is Monday1 is Tuesday2 is Wednesday3 is Thursday4 is Friday5 is Saturday6 is Sunday.startingMonthint {1, 2, … 12}, default 1The month in which the fiscal year ends.variationstr, default “nearest”Method of employing 4-4-5 calendar.There are two options:“nearest” means year end isweekdayclosest to last day of month in year.“last” means year end is finalweekdayof the final month in fiscal year.Examples>>>ts=pd.Timestamp(2022,1,1)>>>ts+pd.offsets.FY5253()Timestamp('2022-01-31 00:00:00')AttributesbaseReturns a copy of the calling offset object with n=1 and all other attributes equal.freqstrReturn a string representing the frequency.kwdsReturn a dict of extra parameters for the offset.nameReturn a string representing the base frequency.nnanosnormalizerule_codestartingMonthvariationweekdayMethodscopyReturn a copy of the frequency.is_anchoredReturn boolean whether the frequency is a unit frequency (n=1).is_month_endReturn boolean whether a timestamp occurs on the month end.is_month_startReturn boolean whether a timestamp occurs on the month start.is_on_offsetReturn boolean whether a timestamp intersects with this frequency.is_quarter_endReturn boolean whether a timestamp occurs on the quarter end.is_quarter_startReturn boolean whether a timestamp occurs on the quarter start.is_year_endReturn boolean whether a timestamp occurs on the year end.is_year_startReturn boolean whether a timestamp occurs on the year start.rollbackRoll provided date backward to next offset only if not on offset.rollforwardRoll provided date forward to next offset only if not on offset.get_rule_code_suffixget_year_end"
Pandas,Date offsets,pandas.tseries.offsets.FY5253.freqstr,pandas.tseries.offsets.FY5253.freqstr#FY5253.freqstr#Return a string representing the frequency.Examples>>>pd.DateOffset(5).freqstr'<5 * DateOffsets>'>>>pd.offsets.BusinessHour(2).freqstr'2BH'>>>pd.offsets.Nano().freqstr'N'>>>pd.offsets.Nano(-3).freqstr'-3N'
Pandas,Date offsets,pandas.tseries.offsets.FY5253.kwds,"pandas.tseries.offsets.FY5253.kwds#FY5253.kwds#Return a dict of extra parameters for the offset.Examples>>>pd.DateOffset(5).kwds{}>>>pd.offsets.FY5253Quarter().kwds{'weekday': 0,'startingMonth': 1,'qtr_with_extra_week': 1,'variation': 'nearest'}"
Pandas,Date offsets,pandas.tseries.offsets.FY5253.name,pandas.tseries.offsets.FY5253.name#FY5253.name#Return a string representing the base frequency.Examples>>>pd.offsets.Hour().name'H'>>>pd.offsets.Hour(5).name'H'
Pandas,Date offsets,pandas.tseries.offsets.FY5253.nanos,pandas.tseries.offsets.FY5253.nanos#FY5253.nanos#
Pandas,Date offsets,pandas.tseries.offsets.FY5253.normalize,pandas.tseries.offsets.FY5253.normalize#FY5253.normalize#
Pandas,Date offsets,pandas.tseries.offsets.FY5253.rule_code,pandas.tseries.offsets.FY5253.rule_code#FY5253.rule_code#
Pandas,Date offsets,pandas.tseries.offsets.FY5253.n,pandas.tseries.offsets.FY5253.n#FY5253.n#
Pandas,Date offsets,pandas.tseries.offsets.FY5253.startingMonth,pandas.tseries.offsets.FY5253.startingMonth#FY5253.startingMonth#
Pandas,Date offsets,pandas.tseries.offsets.FY5253.variation,pandas.tseries.offsets.FY5253.variation#FY5253.variation#
Pandas,Date offsets,pandas.tseries.offsets.FY5253.weekday,pandas.tseries.offsets.FY5253.weekday#FY5253.weekday#
Pandas,Date offsets,pandas.tseries.offsets.FY5253.copy,pandas.tseries.offsets.FY5253.copy#FY5253.copy()#Return a copy of the frequency.Examples>>>freq=pd.DateOffset(1)>>>freq_copy=freq.copy()>>>freqisfreq_copyFalse
Pandas,Date offsets,pandas.tseries.offsets.FY5253.get_rule_code_suffix,pandas.tseries.offsets.FY5253.get_rule_code_suffix#FY5253.get_rule_code_suffix()#
Pandas,Date offsets,pandas.tseries.offsets.FY5253.get_year_end,pandas.tseries.offsets.FY5253.get_year_end#FY5253.get_year_end()#
Pandas,Date offsets,pandas.tseries.offsets.FY5253.is_anchored,pandas.tseries.offsets.FY5253.is_anchored#FY5253.is_anchored()#Return boolean whether the frequency is a unit frequency (n=1).Examples>>>pd.DateOffset().is_anchored()True>>>pd.DateOffset(2).is_anchored()False
Pandas,Date offsets,pandas.tseries.offsets.FY5253.is_on_offset,"pandas.tseries.offsets.FY5253.is_on_offset#FY5253.is_on_offset()#Return boolean whether a timestamp intersects with this frequency.Parameters:dtdatetime.datetimeTimestamp to check intersections with frequency.Examples>>>ts=pd.Timestamp(2022,1,1)>>>freq=pd.offsets.Day(1)>>>freq.is_on_offset(ts)True>>>ts=pd.Timestamp(2022,8,6)>>>ts.day_name()'Saturday'>>>freq=pd.offsets.BusinessDay(1)>>>freq.is_on_offset(ts)False"
Pandas,Date offsets,pandas.tseries.offsets.FY5253.is_month_start,"pandas.tseries.offsets.FY5253.is_month_start#FY5253.is_month_start()#Return boolean whether a timestamp occurs on the month start.Examples>>>ts=pd.Timestamp(2022,1,1)>>>freq=pd.offsets.Hour(5)>>>freq.is_month_start(ts)True"
Pandas,Date offsets,pandas.tseries.offsets.FY5253.is_month_end,"pandas.tseries.offsets.FY5253.is_month_end#FY5253.is_month_end()#Return boolean whether a timestamp occurs on the month end.Examples>>>ts=pd.Timestamp(2022,1,1)>>>freq=pd.offsets.Hour(5)>>>freq.is_month_end(ts)False"
Pandas,Date offsets,pandas.tseries.offsets.FY5253.is_quarter_start,"pandas.tseries.offsets.FY5253.is_quarter_start#FY5253.is_quarter_start()#Return boolean whether a timestamp occurs on the quarter start.Examples>>>ts=pd.Timestamp(2022,1,1)>>>freq=pd.offsets.Hour(5)>>>freq.is_quarter_start(ts)True"
Pandas,Date offsets,pandas.tseries.offsets.FY5253.is_quarter_end,"pandas.tseries.offsets.FY5253.is_quarter_end#FY5253.is_quarter_end()#Return boolean whether a timestamp occurs on the quarter end.Examples>>>ts=pd.Timestamp(2022,1,1)>>>freq=pd.offsets.Hour(5)>>>freq.is_quarter_end(ts)False"
Pandas,Date offsets,pandas.tseries.offsets.FY5253.is_year_start,"pandas.tseries.offsets.FY5253.is_year_start#FY5253.is_year_start()#Return boolean whether a timestamp occurs on the year start.Examples>>>ts=pd.Timestamp(2022,1,1)>>>freq=pd.offsets.Hour(5)>>>freq.is_year_start(ts)True"
Pandas,Date offsets,pandas.tseries.offsets.FY5253.is_year_end,"pandas.tseries.offsets.FY5253.is_year_end#FY5253.is_year_end()#Return boolean whether a timestamp occurs on the year end.Examples>>>ts=pd.Timestamp(2022,1,1)>>>freq=pd.offsets.Hour(5)>>>freq.is_year_end(ts)False"
Pandas,Date offsets,pandas.tseries.offsets.FY5253Quarter,"pandas.tseries.offsets.FY5253Quarter#classpandas.tseries.offsets.FY5253Quarter#DateOffset increments between business quarter dates for 52-53 week fiscal year.Also known as a 4-4-5 calendar.It is used by companies that desire that their
fiscal year always end on the same day of the week.It is a method of managing accounting periods.
It is a common calendar structure for some industries,
such as retail, manufacturing and parking industry.For more information see:https://en.wikipedia.org/wiki/4-4-5_calendarThe year may either:end on the last X day of the Y month.end on the last X day closest to the last day of the Y month.X is a specific day of the week.
Y is a certain month of the yearstartingMonth = 1 corresponds to dates like 1/31/2007, 4/30/2007, …
startingMonth = 2 corresponds to dates like 2/28/2007, 5/31/2007, …
startingMonth = 3 corresponds to dates like 3/30/2007, 6/29/2007, …Parameters:nintweekdayint {0, 1, …, 6}, default 0A specific integer for the day of the week.0 is Monday1 is Tuesday2 is Wednesday3 is Thursday4 is Friday5 is Saturday6 is Sunday.startingMonthint {1, 2, …, 12}, default 1The month in which fiscal years end.qtr_with_extra_weekint {1, 2, 3, 4}, default 1The quarter number that has the leap or 14 week when needed.variationstr, default “nearest”Method of employing 4-4-5 calendar.There are two options:“nearest” means year end isweekdayclosest to last day of month in year.“last” means year end is finalweekdayof the final month in fiscal year.Examples>>>ts=pd.Timestamp(2022,1,1)>>>ts+pd.offsets.FY5253Quarter()Timestamp('2022-01-31 00:00:00')AttributesbaseReturns a copy of the calling offset object with n=1 and all other attributes equal.freqstrReturn a string representing the frequency.kwdsReturn a dict of extra parameters for the offset.nameReturn a string representing the base frequency.nnanosnormalizeqtr_with_extra_weekrule_codestartingMonthvariationweekdayMethodscopyReturn a copy of the frequency.is_anchoredReturn boolean whether the frequency is a unit frequency (n=1).is_month_endReturn boolean whether a timestamp occurs on the month end.is_month_startReturn boolean whether a timestamp occurs on the month start.is_on_offsetReturn boolean whether a timestamp intersects with this frequency.is_quarter_endReturn boolean whether a timestamp occurs on the quarter end.is_quarter_startReturn boolean whether a timestamp occurs on the quarter start.is_year_endReturn boolean whether a timestamp occurs on the year end.is_year_startReturn boolean whether a timestamp occurs on the year start.rollbackRoll provided date backward to next offset only if not on offset.rollforwardRoll provided date forward to next offset only if not on offset.get_rule_code_suffixget_weeksyear_has_extra_week"
Pandas,Date offsets,pandas.tseries.offsets.FY5253Quarter.freqstr,pandas.tseries.offsets.FY5253Quarter.freqstr#FY5253Quarter.freqstr#Return a string representing the frequency.Examples>>>pd.DateOffset(5).freqstr'<5 * DateOffsets>'>>>pd.offsets.BusinessHour(2).freqstr'2BH'>>>pd.offsets.Nano().freqstr'N'>>>pd.offsets.Nano(-3).freqstr'-3N'
Pandas,Date offsets,pandas.tseries.offsets.FY5253Quarter.kwds,"pandas.tseries.offsets.FY5253Quarter.kwds#FY5253Quarter.kwds#Return a dict of extra parameters for the offset.Examples>>>pd.DateOffset(5).kwds{}>>>pd.offsets.FY5253Quarter().kwds{'weekday': 0,'startingMonth': 1,'qtr_with_extra_week': 1,'variation': 'nearest'}"
Pandas,Date offsets,pandas.tseries.offsets.FY5253Quarter.name,pandas.tseries.offsets.FY5253Quarter.name#FY5253Quarter.name#Return a string representing the base frequency.Examples>>>pd.offsets.Hour().name'H'>>>pd.offsets.Hour(5).name'H'
Pandas,Date offsets,pandas.tseries.offsets.FY5253Quarter.nanos,pandas.tseries.offsets.FY5253Quarter.nanos#FY5253Quarter.nanos#
Pandas,Date offsets,pandas.tseries.offsets.FY5253Quarter.normalize,pandas.tseries.offsets.FY5253Quarter.normalize#FY5253Quarter.normalize#
Pandas,Date offsets,pandas.tseries.offsets.FY5253Quarter.rule_code,pandas.tseries.offsets.FY5253Quarter.rule_code#FY5253Quarter.rule_code#
Pandas,Date offsets,pandas.tseries.offsets.FY5253Quarter.n,pandas.tseries.offsets.FY5253Quarter.n#FY5253Quarter.n#
Pandas,Date offsets,pandas.tseries.offsets.FY5253Quarter.qtr_with_extra_week,pandas.tseries.offsets.FY5253Quarter.qtr_with_extra_week#FY5253Quarter.qtr_with_extra_week#
Pandas,Date offsets,pandas.tseries.offsets.FY5253Quarter.startingMonth,pandas.tseries.offsets.FY5253Quarter.startingMonth#FY5253Quarter.startingMonth#
Pandas,Date offsets,pandas.tseries.offsets.FY5253Quarter.variation,pandas.tseries.offsets.FY5253Quarter.variation#FY5253Quarter.variation#
Pandas,Date offsets,pandas.tseries.offsets.FY5253Quarter.weekday,pandas.tseries.offsets.FY5253Quarter.weekday#FY5253Quarter.weekday#
Pandas,Date offsets,pandas.tseries.offsets.FY5253Quarter.copy,pandas.tseries.offsets.FY5253Quarter.copy#FY5253Quarter.copy()#Return a copy of the frequency.Examples>>>freq=pd.DateOffset(1)>>>freq_copy=freq.copy()>>>freqisfreq_copyFalse
Pandas,Date offsets,pandas.tseries.offsets.FY5253Quarter.get_rule_code_suffix,pandas.tseries.offsets.FY5253Quarter.get_rule_code_suffix#FY5253Quarter.get_rule_code_suffix()#
Pandas,Date offsets,pandas.tseries.offsets.FY5253Quarter.get_weeks,pandas.tseries.offsets.FY5253Quarter.get_weeks#FY5253Quarter.get_weeks()#
Pandas,Date offsets,pandas.tseries.offsets.FY5253Quarter.is_anchored,pandas.tseries.offsets.FY5253Quarter.is_anchored#FY5253Quarter.is_anchored()#Return boolean whether the frequency is a unit frequency (n=1).Examples>>>pd.DateOffset().is_anchored()True>>>pd.DateOffset(2).is_anchored()False
Pandas,Date offsets,pandas.tseries.offsets.FY5253Quarter.is_on_offset,"pandas.tseries.offsets.FY5253Quarter.is_on_offset#FY5253Quarter.is_on_offset()#Return boolean whether a timestamp intersects with this frequency.Parameters:dtdatetime.datetimeTimestamp to check intersections with frequency.Examples>>>ts=pd.Timestamp(2022,1,1)>>>freq=pd.offsets.Day(1)>>>freq.is_on_offset(ts)True>>>ts=pd.Timestamp(2022,8,6)>>>ts.day_name()'Saturday'>>>freq=pd.offsets.BusinessDay(1)>>>freq.is_on_offset(ts)False"
Pandas,Date offsets,pandas.tseries.offsets.FY5253Quarter.year_has_extra_week,pandas.tseries.offsets.FY5253Quarter.year_has_extra_week#FY5253Quarter.year_has_extra_week()#
Pandas,Date offsets,pandas.tseries.offsets.FY5253Quarter.is_month_start,"pandas.tseries.offsets.FY5253Quarter.is_month_start#FY5253Quarter.is_month_start()#Return boolean whether a timestamp occurs on the month start.Examples>>>ts=pd.Timestamp(2022,1,1)>>>freq=pd.offsets.Hour(5)>>>freq.is_month_start(ts)True"
Pandas,Date offsets,pandas.tseries.offsets.FY5253Quarter.is_month_end,"pandas.tseries.offsets.FY5253Quarter.is_month_end#FY5253Quarter.is_month_end()#Return boolean whether a timestamp occurs on the month end.Examples>>>ts=pd.Timestamp(2022,1,1)>>>freq=pd.offsets.Hour(5)>>>freq.is_month_end(ts)False"
Pandas,Date offsets,pandas.tseries.offsets.FY5253Quarter.is_quarter_start,"pandas.tseries.offsets.FY5253Quarter.is_quarter_start#FY5253Quarter.is_quarter_start()#Return boolean whether a timestamp occurs on the quarter start.Examples>>>ts=pd.Timestamp(2022,1,1)>>>freq=pd.offsets.Hour(5)>>>freq.is_quarter_start(ts)True"
Pandas,Date offsets,pandas.tseries.offsets.FY5253Quarter.is_quarter_end,"pandas.tseries.offsets.FY5253Quarter.is_quarter_end#FY5253Quarter.is_quarter_end()#Return boolean whether a timestamp occurs on the quarter end.Examples>>>ts=pd.Timestamp(2022,1,1)>>>freq=pd.offsets.Hour(5)>>>freq.is_quarter_end(ts)False"
Pandas,Date offsets,pandas.tseries.offsets.FY5253Quarter.is_year_start,"pandas.tseries.offsets.FY5253Quarter.is_year_start#FY5253Quarter.is_year_start()#Return boolean whether a timestamp occurs on the year start.Examples>>>ts=pd.Timestamp(2022,1,1)>>>freq=pd.offsets.Hour(5)>>>freq.is_year_start(ts)True"
Pandas,Date offsets,pandas.tseries.offsets.FY5253Quarter.is_year_end,"pandas.tseries.offsets.FY5253Quarter.is_year_end#FY5253Quarter.is_year_end()#Return boolean whether a timestamp occurs on the year end.Examples>>>ts=pd.Timestamp(2022,1,1)>>>freq=pd.offsets.Hour(5)>>>freq.is_year_end(ts)False"
Pandas,Date offsets,pandas.tseries.offsets.Easter,"pandas.tseries.offsets.Easter#classpandas.tseries.offsets.Easter#DateOffset for the Easter holiday using logic defined in dateutil.Right now uses the revised method which is valid in years 1583-4099.Parameters:nint, default 1The number of years represented.normalizebool, default FalseNormalize start/end dates to midnight before generating date range.See alsoDateOffsetStandard kind of date increment.Examples>>>ts=pd.Timestamp(2022,1,1)>>>ts+pd.offsets.Easter()Timestamp('2022-04-17 00:00:00')AttributesbaseReturns a copy of the calling offset object with n=1 and all other attributes equal.freqstrReturn a string representing the frequency.kwdsReturn a dict of extra parameters for the offset.nameReturn a string representing the base frequency.nnanosnormalizerule_codeMethodscopyReturn a copy of the frequency.is_anchoredReturn boolean whether the frequency is a unit frequency (n=1).is_month_endReturn boolean whether a timestamp occurs on the month end.is_month_startReturn boolean whether a timestamp occurs on the month start.is_on_offsetReturn boolean whether a timestamp intersects with this frequency.is_quarter_endReturn boolean whether a timestamp occurs on the quarter end.is_quarter_startReturn boolean whether a timestamp occurs on the quarter start.is_year_endReturn boolean whether a timestamp occurs on the year end.is_year_startReturn boolean whether a timestamp occurs on the year start.rollbackRoll provided date backward to next offset only if not on offset.rollforwardRoll provided date forward to next offset only if not on offset."
Pandas,Date offsets,pandas.tseries.offsets.Easter.freqstr,pandas.tseries.offsets.Easter.freqstr#Easter.freqstr#Return a string representing the frequency.Examples>>>pd.DateOffset(5).freqstr'<5 * DateOffsets>'>>>pd.offsets.BusinessHour(2).freqstr'2BH'>>>pd.offsets.Nano().freqstr'N'>>>pd.offsets.Nano(-3).freqstr'-3N'
Pandas,Date offsets,pandas.tseries.offsets.Easter.kwds,"pandas.tseries.offsets.Easter.kwds#Easter.kwds#Return a dict of extra parameters for the offset.Examples>>>pd.DateOffset(5).kwds{}>>>pd.offsets.FY5253Quarter().kwds{'weekday': 0,'startingMonth': 1,'qtr_with_extra_week': 1,'variation': 'nearest'}"
Pandas,Date offsets,pandas.tseries.offsets.Easter.name,pandas.tseries.offsets.Easter.name#Easter.name#Return a string representing the base frequency.Examples>>>pd.offsets.Hour().name'H'>>>pd.offsets.Hour(5).name'H'
Pandas,Date offsets,pandas.tseries.offsets.Easter.nanos,pandas.tseries.offsets.Easter.nanos#Easter.nanos#
Pandas,Date offsets,pandas.tseries.offsets.Easter.normalize,pandas.tseries.offsets.Easter.normalize#Easter.normalize#
Pandas,Date offsets,pandas.tseries.offsets.Easter.rule_code,pandas.tseries.offsets.Easter.rule_code#Easter.rule_code#
Pandas,Date offsets,pandas.tseries.offsets.Easter.n,pandas.tseries.offsets.Easter.n#Easter.n#
Pandas,Date offsets,pandas.tseries.offsets.Easter.copy,pandas.tseries.offsets.Easter.copy#Easter.copy()#Return a copy of the frequency.Examples>>>freq=pd.DateOffset(1)>>>freq_copy=freq.copy()>>>freqisfreq_copyFalse
Pandas,Date offsets,pandas.tseries.offsets.Easter.is_anchored,pandas.tseries.offsets.Easter.is_anchored#Easter.is_anchored()#Return boolean whether the frequency is a unit frequency (n=1).Examples>>>pd.DateOffset().is_anchored()True>>>pd.DateOffset(2).is_anchored()False
Pandas,Date offsets,pandas.tseries.offsets.Easter.is_on_offset,"pandas.tseries.offsets.Easter.is_on_offset#Easter.is_on_offset()#Return boolean whether a timestamp intersects with this frequency.Parameters:dtdatetime.datetimeTimestamp to check intersections with frequency.Examples>>>ts=pd.Timestamp(2022,1,1)>>>freq=pd.offsets.Day(1)>>>freq.is_on_offset(ts)True>>>ts=pd.Timestamp(2022,8,6)>>>ts.day_name()'Saturday'>>>freq=pd.offsets.BusinessDay(1)>>>freq.is_on_offset(ts)False"
Pandas,Date offsets,pandas.tseries.offsets.Easter.is_month_start,"pandas.tseries.offsets.Easter.is_month_start#Easter.is_month_start()#Return boolean whether a timestamp occurs on the month start.Examples>>>ts=pd.Timestamp(2022,1,1)>>>freq=pd.offsets.Hour(5)>>>freq.is_month_start(ts)True"
Pandas,Date offsets,pandas.tseries.offsets.Easter.is_month_end,"pandas.tseries.offsets.Easter.is_month_end#Easter.is_month_end()#Return boolean whether a timestamp occurs on the month end.Examples>>>ts=pd.Timestamp(2022,1,1)>>>freq=pd.offsets.Hour(5)>>>freq.is_month_end(ts)False"
Pandas,Date offsets,pandas.tseries.offsets.Easter.is_quarter_start,"pandas.tseries.offsets.Easter.is_quarter_start#Easter.is_quarter_start()#Return boolean whether a timestamp occurs on the quarter start.Examples>>>ts=pd.Timestamp(2022,1,1)>>>freq=pd.offsets.Hour(5)>>>freq.is_quarter_start(ts)True"
Pandas,Date offsets,pandas.tseries.offsets.Easter.is_quarter_end,"pandas.tseries.offsets.Easter.is_quarter_end#Easter.is_quarter_end()#Return boolean whether a timestamp occurs on the quarter end.Examples>>>ts=pd.Timestamp(2022,1,1)>>>freq=pd.offsets.Hour(5)>>>freq.is_quarter_end(ts)False"
Pandas,Date offsets,pandas.tseries.offsets.Easter.is_year_start,"pandas.tseries.offsets.Easter.is_year_start#Easter.is_year_start()#Return boolean whether a timestamp occurs on the year start.Examples>>>ts=pd.Timestamp(2022,1,1)>>>freq=pd.offsets.Hour(5)>>>freq.is_year_start(ts)True"
Pandas,Date offsets,pandas.tseries.offsets.Easter.is_year_end,"pandas.tseries.offsets.Easter.is_year_end#Easter.is_year_end()#Return boolean whether a timestamp occurs on the year end.Examples>>>ts=pd.Timestamp(2022,1,1)>>>freq=pd.offsets.Hour(5)>>>freq.is_year_end(ts)False"
Pandas,Date offsets,pandas.tseries.offsets.Tick,pandas.tseries.offsets.Tick#classpandas.tseries.offsets.Tick#AttributesbaseReturns a copy of the calling offset object with n=1 and all other attributes equal.freqstrReturn a string representing the frequency.kwdsReturn a dict of extra parameters for the offset.nameReturn a string representing the base frequency.nanosReturn an integer of the total number of nanoseconds.deltannormalizerule_codeMethodscopyReturn a copy of the frequency.is_anchoredReturn boolean whether the frequency is a unit frequency (n=1).is_month_endReturn boolean whether a timestamp occurs on the month end.is_month_startReturn boolean whether a timestamp occurs on the month start.is_on_offsetReturn boolean whether a timestamp intersects with this frequency.is_quarter_endReturn boolean whether a timestamp occurs on the quarter end.is_quarter_startReturn boolean whether a timestamp occurs on the quarter start.is_year_endReturn boolean whether a timestamp occurs on the year end.is_year_startReturn boolean whether a timestamp occurs on the year start.rollbackRoll provided date backward to next offset only if not on offset.rollforwardRoll provided date forward to next offset only if not on offset.
Pandas,Date offsets,pandas.tseries.offsets.Tick.delta,pandas.tseries.offsets.Tick.delta#Tick.delta#
Pandas,Date offsets,pandas.tseries.offsets.Tick.freqstr,pandas.tseries.offsets.Tick.freqstr#Tick.freqstr#Return a string representing the frequency.Examples>>>pd.DateOffset(5).freqstr'<5 * DateOffsets>'>>>pd.offsets.BusinessHour(2).freqstr'2BH'>>>pd.offsets.Nano().freqstr'N'>>>pd.offsets.Nano(-3).freqstr'-3N'
Pandas,Date offsets,pandas.tseries.offsets.Tick.kwds,"pandas.tseries.offsets.Tick.kwds#Tick.kwds#Return a dict of extra parameters for the offset.Examples>>>pd.DateOffset(5).kwds{}>>>pd.offsets.FY5253Quarter().kwds{'weekday': 0,'startingMonth': 1,'qtr_with_extra_week': 1,'variation': 'nearest'}"
Pandas,Date offsets,pandas.tseries.offsets.Tick.name,pandas.tseries.offsets.Tick.name#Tick.name#Return a string representing the base frequency.Examples>>>pd.offsets.Hour().name'H'>>>pd.offsets.Hour(5).name'H'
Pandas,Date offsets,pandas.tseries.offsets.Tick.nanos,pandas.tseries.offsets.Tick.nanos#Tick.nanos#Return an integer of the total number of nanoseconds.Raises:ValueErrorIf the frequency is non-fixed.Examples>>>pd.offsets.Hour(5).nanos18000000000000
Pandas,Date offsets,pandas.tseries.offsets.Tick.normalize,pandas.tseries.offsets.Tick.normalize#Tick.normalize#
Pandas,Date offsets,pandas.tseries.offsets.Tick.rule_code,pandas.tseries.offsets.Tick.rule_code#Tick.rule_code#
Pandas,Date offsets,pandas.tseries.offsets.Tick.n,pandas.tseries.offsets.Tick.n#Tick.n#
Pandas,Date offsets,pandas.tseries.offsets.Tick.copy,pandas.tseries.offsets.Tick.copy#Tick.copy()#Return a copy of the frequency.Examples>>>freq=pd.DateOffset(1)>>>freq_copy=freq.copy()>>>freqisfreq_copyFalse
Pandas,Date offsets,pandas.tseries.offsets.Tick.is_anchored,pandas.tseries.offsets.Tick.is_anchored#Tick.is_anchored()#Return boolean whether the frequency is a unit frequency (n=1).Examples>>>pd.DateOffset().is_anchored()True>>>pd.DateOffset(2).is_anchored()False
Pandas,Date offsets,pandas.tseries.offsets.Tick.is_on_offset,"pandas.tseries.offsets.Tick.is_on_offset#Tick.is_on_offset()#Return boolean whether a timestamp intersects with this frequency.Parameters:dtdatetime.datetimeTimestamp to check intersections with frequency.Examples>>>ts=pd.Timestamp(2022,1,1)>>>freq=pd.offsets.Day(1)>>>freq.is_on_offset(ts)True>>>ts=pd.Timestamp(2022,8,6)>>>ts.day_name()'Saturday'>>>freq=pd.offsets.BusinessDay(1)>>>freq.is_on_offset(ts)False"
Pandas,Date offsets,pandas.tseries.offsets.Tick.is_month_start,"pandas.tseries.offsets.Tick.is_month_start#Tick.is_month_start()#Return boolean whether a timestamp occurs on the month start.Examples>>>ts=pd.Timestamp(2022,1,1)>>>freq=pd.offsets.Hour(5)>>>freq.is_month_start(ts)True"
Pandas,Date offsets,pandas.tseries.offsets.Tick.is_month_end,"pandas.tseries.offsets.Tick.is_month_end#Tick.is_month_end()#Return boolean whether a timestamp occurs on the month end.Examples>>>ts=pd.Timestamp(2022,1,1)>>>freq=pd.offsets.Hour(5)>>>freq.is_month_end(ts)False"
Pandas,Date offsets,pandas.tseries.offsets.Tick.is_quarter_start,"pandas.tseries.offsets.Tick.is_quarter_start#Tick.is_quarter_start()#Return boolean whether a timestamp occurs on the quarter start.Examples>>>ts=pd.Timestamp(2022,1,1)>>>freq=pd.offsets.Hour(5)>>>freq.is_quarter_start(ts)True"
Pandas,Date offsets,pandas.tseries.offsets.Tick.is_quarter_end,"pandas.tseries.offsets.Tick.is_quarter_end#Tick.is_quarter_end()#Return boolean whether a timestamp occurs on the quarter end.Examples>>>ts=pd.Timestamp(2022,1,1)>>>freq=pd.offsets.Hour(5)>>>freq.is_quarter_end(ts)False"
Pandas,Date offsets,pandas.tseries.offsets.Tick.is_year_start,"pandas.tseries.offsets.Tick.is_year_start#Tick.is_year_start()#Return boolean whether a timestamp occurs on the year start.Examples>>>ts=pd.Timestamp(2022,1,1)>>>freq=pd.offsets.Hour(5)>>>freq.is_year_start(ts)True"
Pandas,Date offsets,pandas.tseries.offsets.Tick.is_year_end,"pandas.tseries.offsets.Tick.is_year_end#Tick.is_year_end()#Return boolean whether a timestamp occurs on the year end.Examples>>>ts=pd.Timestamp(2022,1,1)>>>freq=pd.offsets.Hour(5)>>>freq.is_year_end(ts)False"
Pandas,Date offsets,pandas.tseries.offsets.Day,"pandas.tseries.offsets.Day#classpandas.tseries.offsets.Day#Offsetndays.Parameters:nint, default 1The number of days represented.See alsoDateOffsetStandard kind of date increment.ExamplesYou can use the parameternto represent a shift of n days.>>>frompandas.tseries.offsetsimportDay>>>ts=pd.Timestamp(2022,12,9,15)>>>tsTimestamp('2022-12-09 15:00:00')>>>ts+Day()Timestamp('2022-12-10 15:00:00')>>>ts-Day(4)Timestamp('2022-12-05 15:00:00')>>>ts+Day(-4)Timestamp('2022-12-05 15:00:00')AttributesbaseReturns a copy of the calling offset object with n=1 and all other attributes equal.freqstrReturn a string representing the frequency.kwdsReturn a dict of extra parameters for the offset.nameReturn a string representing the base frequency.nanosReturn an integer of the total number of nanoseconds.deltannormalizerule_codeMethodscopyReturn a copy of the frequency.is_anchoredReturn boolean whether the frequency is a unit frequency (n=1).is_month_endReturn boolean whether a timestamp occurs on the month end.is_month_startReturn boolean whether a timestamp occurs on the month start.is_on_offsetReturn boolean whether a timestamp intersects with this frequency.is_quarter_endReturn boolean whether a timestamp occurs on the quarter end.is_quarter_startReturn boolean whether a timestamp occurs on the quarter start.is_year_endReturn boolean whether a timestamp occurs on the year end.is_year_startReturn boolean whether a timestamp occurs on the year start.rollbackRoll provided date backward to next offset only if not on offset.rollforwardRoll provided date forward to next offset only if not on offset."
Pandas,Date offsets,pandas.tseries.offsets.Day.delta,pandas.tseries.offsets.Day.delta#Day.delta#
Pandas,Date offsets,pandas.tseries.offsets.Day.freqstr,pandas.tseries.offsets.Day.freqstr#Day.freqstr#Return a string representing the frequency.Examples>>>pd.DateOffset(5).freqstr'<5 * DateOffsets>'>>>pd.offsets.BusinessHour(2).freqstr'2BH'>>>pd.offsets.Nano().freqstr'N'>>>pd.offsets.Nano(-3).freqstr'-3N'
Pandas,Date offsets,pandas.tseries.offsets.Day.kwds,"pandas.tseries.offsets.Day.kwds#Day.kwds#Return a dict of extra parameters for the offset.Examples>>>pd.DateOffset(5).kwds{}>>>pd.offsets.FY5253Quarter().kwds{'weekday': 0,'startingMonth': 1,'qtr_with_extra_week': 1,'variation': 'nearest'}"
Pandas,Date offsets,pandas.tseries.offsets.Day.name,pandas.tseries.offsets.Day.name#Day.name#Return a string representing the base frequency.Examples>>>pd.offsets.Hour().name'H'>>>pd.offsets.Hour(5).name'H'
Pandas,Date offsets,pandas.tseries.offsets.Day.nanos,pandas.tseries.offsets.Day.nanos#Day.nanos#Return an integer of the total number of nanoseconds.Raises:ValueErrorIf the frequency is non-fixed.Examples>>>pd.offsets.Hour(5).nanos18000000000000
Pandas,Date offsets,pandas.tseries.offsets.Day.normalize,pandas.tseries.offsets.Day.normalize#Day.normalize#
Pandas,Date offsets,pandas.tseries.offsets.Day.rule_code,pandas.tseries.offsets.Day.rule_code#Day.rule_code#
Pandas,Date offsets,pandas.tseries.offsets.Day.n,pandas.tseries.offsets.Day.n#Day.n#
Pandas,Date offsets,pandas.tseries.offsets.Day.copy,pandas.tseries.offsets.Day.copy#Day.copy()#Return a copy of the frequency.Examples>>>freq=pd.DateOffset(1)>>>freq_copy=freq.copy()>>>freqisfreq_copyFalse
Pandas,Date offsets,pandas.tseries.offsets.Day.is_anchored,pandas.tseries.offsets.Day.is_anchored#Day.is_anchored()#Return boolean whether the frequency is a unit frequency (n=1).Examples>>>pd.DateOffset().is_anchored()True>>>pd.DateOffset(2).is_anchored()False
Pandas,Date offsets,pandas.tseries.offsets.Day.is_on_offset,"pandas.tseries.offsets.Day.is_on_offset#Day.is_on_offset()#Return boolean whether a timestamp intersects with this frequency.Parameters:dtdatetime.datetimeTimestamp to check intersections with frequency.Examples>>>ts=pd.Timestamp(2022,1,1)>>>freq=pd.offsets.Day(1)>>>freq.is_on_offset(ts)True>>>ts=pd.Timestamp(2022,8,6)>>>ts.day_name()'Saturday'>>>freq=pd.offsets.BusinessDay(1)>>>freq.is_on_offset(ts)False"
Pandas,Date offsets,pandas.tseries.offsets.Day.is_month_start,"pandas.tseries.offsets.Day.is_month_start#Day.is_month_start()#Return boolean whether a timestamp occurs on the month start.Examples>>>ts=pd.Timestamp(2022,1,1)>>>freq=pd.offsets.Hour(5)>>>freq.is_month_start(ts)True"
Pandas,Date offsets,pandas.tseries.offsets.Day.is_month_end,"pandas.tseries.offsets.Day.is_month_end#Day.is_month_end()#Return boolean whether a timestamp occurs on the month end.Examples>>>ts=pd.Timestamp(2022,1,1)>>>freq=pd.offsets.Hour(5)>>>freq.is_month_end(ts)False"
Pandas,Date offsets,pandas.tseries.offsets.Day.is_quarter_start,"pandas.tseries.offsets.Day.is_quarter_start#Day.is_quarter_start()#Return boolean whether a timestamp occurs on the quarter start.Examples>>>ts=pd.Timestamp(2022,1,1)>>>freq=pd.offsets.Hour(5)>>>freq.is_quarter_start(ts)True"
Pandas,Date offsets,pandas.tseries.offsets.Day.is_quarter_end,"pandas.tseries.offsets.Day.is_quarter_end#Day.is_quarter_end()#Return boolean whether a timestamp occurs on the quarter end.Examples>>>ts=pd.Timestamp(2022,1,1)>>>freq=pd.offsets.Hour(5)>>>freq.is_quarter_end(ts)False"
Pandas,Date offsets,pandas.tseries.offsets.Day.is_year_start,"pandas.tseries.offsets.Day.is_year_start#Day.is_year_start()#Return boolean whether a timestamp occurs on the year start.Examples>>>ts=pd.Timestamp(2022,1,1)>>>freq=pd.offsets.Hour(5)>>>freq.is_year_start(ts)True"
Pandas,Date offsets,pandas.tseries.offsets.Day.is_year_end,"pandas.tseries.offsets.Day.is_year_end#Day.is_year_end()#Return boolean whether a timestamp occurs on the year end.Examples>>>ts=pd.Timestamp(2022,1,1)>>>freq=pd.offsets.Hour(5)>>>freq.is_year_end(ts)False"
Pandas,Date offsets,pandas.tseries.offsets.Hour,"pandas.tseries.offsets.Hour#classpandas.tseries.offsets.Hour#Offsetnhours.Parameters:nint, default 1The number of hours represented.See alsoDateOffsetStandard kind of date increment.ExamplesYou can use the parameternto represent a shift of n hours.>>>frompandas.tseries.offsetsimportHour>>>ts=pd.Timestamp(2022,12,9,15)>>>tsTimestamp('2022-12-09 15:00:00')>>>ts+Hour()Timestamp('2022-12-09 16:00:00')>>>ts-Hour(4)Timestamp('2022-12-09 11:00:00')>>>ts+Hour(-4)Timestamp('2022-12-09 11:00:00')AttributesbaseReturns a copy of the calling offset object with n=1 and all other attributes equal.freqstrReturn a string representing the frequency.kwdsReturn a dict of extra parameters for the offset.nameReturn a string representing the base frequency.nanosReturn an integer of the total number of nanoseconds.deltannormalizerule_codeMethodscopyReturn a copy of the frequency.is_anchoredReturn boolean whether the frequency is a unit frequency (n=1).is_month_endReturn boolean whether a timestamp occurs on the month end.is_month_startReturn boolean whether a timestamp occurs on the month start.is_on_offsetReturn boolean whether a timestamp intersects with this frequency.is_quarter_endReturn boolean whether a timestamp occurs on the quarter end.is_quarter_startReturn boolean whether a timestamp occurs on the quarter start.is_year_endReturn boolean whether a timestamp occurs on the year end.is_year_startReturn boolean whether a timestamp occurs on the year start.rollbackRoll provided date backward to next offset only if not on offset.rollforwardRoll provided date forward to next offset only if not on offset."
Pandas,Date offsets,pandas.tseries.offsets.Hour.delta,pandas.tseries.offsets.Hour.delta#Hour.delta#
Pandas,Date offsets,pandas.tseries.offsets.Hour.freqstr,pandas.tseries.offsets.Hour.freqstr#Hour.freqstr#Return a string representing the frequency.Examples>>>pd.DateOffset(5).freqstr'<5 * DateOffsets>'>>>pd.offsets.BusinessHour(2).freqstr'2BH'>>>pd.offsets.Nano().freqstr'N'>>>pd.offsets.Nano(-3).freqstr'-3N'
Pandas,Date offsets,pandas.tseries.offsets.Hour.kwds,"pandas.tseries.offsets.Hour.kwds#Hour.kwds#Return a dict of extra parameters for the offset.Examples>>>pd.DateOffset(5).kwds{}>>>pd.offsets.FY5253Quarter().kwds{'weekday': 0,'startingMonth': 1,'qtr_with_extra_week': 1,'variation': 'nearest'}"
Pandas,Date offsets,pandas.tseries.offsets.Hour.name,pandas.tseries.offsets.Hour.name#Hour.name#Return a string representing the base frequency.Examples>>>pd.offsets.Hour().name'H'>>>pd.offsets.Hour(5).name'H'
Pandas,Date offsets,pandas.tseries.offsets.Hour.nanos,pandas.tseries.offsets.Hour.nanos#Hour.nanos#Return an integer of the total number of nanoseconds.Raises:ValueErrorIf the frequency is non-fixed.Examples>>>pd.offsets.Hour(5).nanos18000000000000
Pandas,Date offsets,pandas.tseries.offsets.Hour.normalize,pandas.tseries.offsets.Hour.normalize#Hour.normalize#
Pandas,Date offsets,pandas.tseries.offsets.Hour.rule_code,pandas.tseries.offsets.Hour.rule_code#Hour.rule_code#
Pandas,Date offsets,pandas.tseries.offsets.Hour.n,pandas.tseries.offsets.Hour.n#Hour.n#
Pandas,Date offsets,pandas.tseries.offsets.Hour.copy,pandas.tseries.offsets.Hour.copy#Hour.copy()#Return a copy of the frequency.Examples>>>freq=pd.DateOffset(1)>>>freq_copy=freq.copy()>>>freqisfreq_copyFalse
Pandas,Date offsets,pandas.tseries.offsets.Hour.is_anchored,pandas.tseries.offsets.Hour.is_anchored#Hour.is_anchored()#Return boolean whether the frequency is a unit frequency (n=1).Examples>>>pd.DateOffset().is_anchored()True>>>pd.DateOffset(2).is_anchored()False
Pandas,Date offsets,pandas.tseries.offsets.Hour.is_on_offset,"pandas.tseries.offsets.Hour.is_on_offset#Hour.is_on_offset()#Return boolean whether a timestamp intersects with this frequency.Parameters:dtdatetime.datetimeTimestamp to check intersections with frequency.Examples>>>ts=pd.Timestamp(2022,1,1)>>>freq=pd.offsets.Day(1)>>>freq.is_on_offset(ts)True>>>ts=pd.Timestamp(2022,8,6)>>>ts.day_name()'Saturday'>>>freq=pd.offsets.BusinessDay(1)>>>freq.is_on_offset(ts)False"
Pandas,Date offsets,pandas.tseries.offsets.Hour.is_month_start,"pandas.tseries.offsets.Hour.is_month_start#Hour.is_month_start()#Return boolean whether a timestamp occurs on the month start.Examples>>>ts=pd.Timestamp(2022,1,1)>>>freq=pd.offsets.Hour(5)>>>freq.is_month_start(ts)True"
Pandas,Date offsets,pandas.tseries.offsets.Hour.is_month_end,"pandas.tseries.offsets.Hour.is_month_end#Hour.is_month_end()#Return boolean whether a timestamp occurs on the month end.Examples>>>ts=pd.Timestamp(2022,1,1)>>>freq=pd.offsets.Hour(5)>>>freq.is_month_end(ts)False"
Pandas,Date offsets,pandas.tseries.offsets.Hour.is_quarter_start,"pandas.tseries.offsets.Hour.is_quarter_start#Hour.is_quarter_start()#Return boolean whether a timestamp occurs on the quarter start.Examples>>>ts=pd.Timestamp(2022,1,1)>>>freq=pd.offsets.Hour(5)>>>freq.is_quarter_start(ts)True"
Pandas,Date offsets,pandas.tseries.offsets.Hour.is_quarter_end,"pandas.tseries.offsets.Hour.is_quarter_end#Hour.is_quarter_end()#Return boolean whether a timestamp occurs on the quarter end.Examples>>>ts=pd.Timestamp(2022,1,1)>>>freq=pd.offsets.Hour(5)>>>freq.is_quarter_end(ts)False"
Pandas,Date offsets,pandas.tseries.offsets.Hour.is_year_start,"pandas.tseries.offsets.Hour.is_year_start#Hour.is_year_start()#Return boolean whether a timestamp occurs on the year start.Examples>>>ts=pd.Timestamp(2022,1,1)>>>freq=pd.offsets.Hour(5)>>>freq.is_year_start(ts)True"
Pandas,Date offsets,pandas.tseries.offsets.Hour.is_year_end,"pandas.tseries.offsets.Hour.is_year_end#Hour.is_year_end()#Return boolean whether a timestamp occurs on the year end.Examples>>>ts=pd.Timestamp(2022,1,1)>>>freq=pd.offsets.Hour(5)>>>freq.is_year_end(ts)False"
Pandas,Date offsets,pandas.tseries.offsets.Minute,"pandas.tseries.offsets.Minute#classpandas.tseries.offsets.Minute#Offsetnminutes.Parameters:nint, default 1The number of minutes represented.See alsoDateOffsetStandard kind of date increment.ExamplesYou can use the parameternto represent a shift of n minutes.>>>frompandas.tseries.offsetsimportMinute>>>ts=pd.Timestamp(2022,12,9,15)>>>tsTimestamp('2022-12-09 15:00:00')>>>ts+Minute(n=10)Timestamp('2022-12-09 15:10:00')>>>ts-Minute(n=10)Timestamp('2022-12-09 14:50:00')>>>ts+Minute(n=-10)Timestamp('2022-12-09 14:50:00')AttributesbaseReturns a copy of the calling offset object with n=1 and all other attributes equal.freqstrReturn a string representing the frequency.kwdsReturn a dict of extra parameters for the offset.nameReturn a string representing the base frequency.nanosReturn an integer of the total number of nanoseconds.deltannormalizerule_codeMethodscopyReturn a copy of the frequency.is_anchoredReturn boolean whether the frequency is a unit frequency (n=1).is_month_endReturn boolean whether a timestamp occurs on the month end.is_month_startReturn boolean whether a timestamp occurs on the month start.is_on_offsetReturn boolean whether a timestamp intersects with this frequency.is_quarter_endReturn boolean whether a timestamp occurs on the quarter end.is_quarter_startReturn boolean whether a timestamp occurs on the quarter start.is_year_endReturn boolean whether a timestamp occurs on the year end.is_year_startReturn boolean whether a timestamp occurs on the year start.rollbackRoll provided date backward to next offset only if not on offset.rollforwardRoll provided date forward to next offset only if not on offset."
Pandas,Date offsets,pandas.tseries.offsets.Minute.delta,pandas.tseries.offsets.Minute.delta#Minute.delta#
Pandas,Date offsets,pandas.tseries.offsets.Minute.freqstr,pandas.tseries.offsets.Minute.freqstr#Minute.freqstr#Return a string representing the frequency.Examples>>>pd.DateOffset(5).freqstr'<5 * DateOffsets>'>>>pd.offsets.BusinessHour(2).freqstr'2BH'>>>pd.offsets.Nano().freqstr'N'>>>pd.offsets.Nano(-3).freqstr'-3N'
Pandas,Date offsets,pandas.tseries.offsets.Minute.kwds,"pandas.tseries.offsets.Minute.kwds#Minute.kwds#Return a dict of extra parameters for the offset.Examples>>>pd.DateOffset(5).kwds{}>>>pd.offsets.FY5253Quarter().kwds{'weekday': 0,'startingMonth': 1,'qtr_with_extra_week': 1,'variation': 'nearest'}"
Pandas,Date offsets,pandas.tseries.offsets.Minute.name,pandas.tseries.offsets.Minute.name#Minute.name#Return a string representing the base frequency.Examples>>>pd.offsets.Hour().name'H'>>>pd.offsets.Hour(5).name'H'
Pandas,Date offsets,pandas.tseries.offsets.Minute.nanos,pandas.tseries.offsets.Minute.nanos#Minute.nanos#Return an integer of the total number of nanoseconds.Raises:ValueErrorIf the frequency is non-fixed.Examples>>>pd.offsets.Hour(5).nanos18000000000000
Pandas,Date offsets,pandas.tseries.offsets.Minute.normalize,pandas.tseries.offsets.Minute.normalize#Minute.normalize#
Pandas,Date offsets,pandas.tseries.offsets.Minute.rule_code,pandas.tseries.offsets.Minute.rule_code#Minute.rule_code#
Pandas,Date offsets,pandas.tseries.offsets.Minute.n,pandas.tseries.offsets.Minute.n#Minute.n#
Pandas,Date offsets,pandas.tseries.offsets.Minute.copy,pandas.tseries.offsets.Minute.copy#Minute.copy()#Return a copy of the frequency.Examples>>>freq=pd.DateOffset(1)>>>freq_copy=freq.copy()>>>freqisfreq_copyFalse
Pandas,Date offsets,pandas.tseries.offsets.Minute.is_anchored,pandas.tseries.offsets.Minute.is_anchored#Minute.is_anchored()#Return boolean whether the frequency is a unit frequency (n=1).Examples>>>pd.DateOffset().is_anchored()True>>>pd.DateOffset(2).is_anchored()False
Pandas,Date offsets,pandas.tseries.offsets.Minute.is_on_offset,"pandas.tseries.offsets.Minute.is_on_offset#Minute.is_on_offset()#Return boolean whether a timestamp intersects with this frequency.Parameters:dtdatetime.datetimeTimestamp to check intersections with frequency.Examples>>>ts=pd.Timestamp(2022,1,1)>>>freq=pd.offsets.Day(1)>>>freq.is_on_offset(ts)True>>>ts=pd.Timestamp(2022,8,6)>>>ts.day_name()'Saturday'>>>freq=pd.offsets.BusinessDay(1)>>>freq.is_on_offset(ts)False"
Pandas,Date offsets,pandas.tseries.offsets.Minute.is_month_start,"pandas.tseries.offsets.Minute.is_month_start#Minute.is_month_start()#Return boolean whether a timestamp occurs on the month start.Examples>>>ts=pd.Timestamp(2022,1,1)>>>freq=pd.offsets.Hour(5)>>>freq.is_month_start(ts)True"
Pandas,Date offsets,pandas.tseries.offsets.Minute.is_month_end,"pandas.tseries.offsets.Minute.is_month_end#Minute.is_month_end()#Return boolean whether a timestamp occurs on the month end.Examples>>>ts=pd.Timestamp(2022,1,1)>>>freq=pd.offsets.Hour(5)>>>freq.is_month_end(ts)False"
Pandas,Date offsets,pandas.tseries.offsets.Minute.is_quarter_start,"pandas.tseries.offsets.Minute.is_quarter_start#Minute.is_quarter_start()#Return boolean whether a timestamp occurs on the quarter start.Examples>>>ts=pd.Timestamp(2022,1,1)>>>freq=pd.offsets.Hour(5)>>>freq.is_quarter_start(ts)True"
Pandas,Date offsets,pandas.tseries.offsets.Minute.is_quarter_end,"pandas.tseries.offsets.Minute.is_quarter_end#Minute.is_quarter_end()#Return boolean whether a timestamp occurs on the quarter end.Examples>>>ts=pd.Timestamp(2022,1,1)>>>freq=pd.offsets.Hour(5)>>>freq.is_quarter_end(ts)False"
Pandas,Date offsets,pandas.tseries.offsets.Minute.is_year_start,"pandas.tseries.offsets.Minute.is_year_start#Minute.is_year_start()#Return boolean whether a timestamp occurs on the year start.Examples>>>ts=pd.Timestamp(2022,1,1)>>>freq=pd.offsets.Hour(5)>>>freq.is_year_start(ts)True"
Pandas,Date offsets,pandas.tseries.offsets.Minute.is_year_end,"pandas.tseries.offsets.Minute.is_year_end#Minute.is_year_end()#Return boolean whether a timestamp occurs on the year end.Examples>>>ts=pd.Timestamp(2022,1,1)>>>freq=pd.offsets.Hour(5)>>>freq.is_year_end(ts)False"
Pandas,Date offsets,pandas.tseries.offsets.Second,"pandas.tseries.offsets.Second#classpandas.tseries.offsets.Second#Offsetnseconds.Parameters:nint, default 1The number of seconds represented.See alsoDateOffsetStandard kind of date increment.ExamplesYou can use the parameternto represent a shift of n seconds.>>>frompandas.tseries.offsetsimportSecond>>>ts=pd.Timestamp(2022,12,9,15)>>>tsTimestamp('2022-12-09 15:00:00')>>>ts+Second(n=10)Timestamp('2022-12-09 15:00:10')>>>ts-Second(n=10)Timestamp('2022-12-09 14:59:50')>>>ts+Second(n=-10)Timestamp('2022-12-09 14:59:50')AttributesbaseReturns a copy of the calling offset object with n=1 and all other attributes equal.freqstrReturn a string representing the frequency.kwdsReturn a dict of extra parameters for the offset.nameReturn a string representing the base frequency.nanosReturn an integer of the total number of nanoseconds.deltannormalizerule_codeMethodscopyReturn a copy of the frequency.is_anchoredReturn boolean whether the frequency is a unit frequency (n=1).is_month_endReturn boolean whether a timestamp occurs on the month end.is_month_startReturn boolean whether a timestamp occurs on the month start.is_on_offsetReturn boolean whether a timestamp intersects with this frequency.is_quarter_endReturn boolean whether a timestamp occurs on the quarter end.is_quarter_startReturn boolean whether a timestamp occurs on the quarter start.is_year_endReturn boolean whether a timestamp occurs on the year end.is_year_startReturn boolean whether a timestamp occurs on the year start.rollbackRoll provided date backward to next offset only if not on offset.rollforwardRoll provided date forward to next offset only if not on offset."
Pandas,Date offsets,pandas.tseries.offsets.Second.delta,pandas.tseries.offsets.Second.delta#Second.delta#
Pandas,Date offsets,pandas.tseries.offsets.Second.freqstr,pandas.tseries.offsets.Second.freqstr#Second.freqstr#Return a string representing the frequency.Examples>>>pd.DateOffset(5).freqstr'<5 * DateOffsets>'>>>pd.offsets.BusinessHour(2).freqstr'2BH'>>>pd.offsets.Nano().freqstr'N'>>>pd.offsets.Nano(-3).freqstr'-3N'
Pandas,Date offsets,pandas.tseries.offsets.Second.kwds,"pandas.tseries.offsets.Second.kwds#Second.kwds#Return a dict of extra parameters for the offset.Examples>>>pd.DateOffset(5).kwds{}>>>pd.offsets.FY5253Quarter().kwds{'weekday': 0,'startingMonth': 1,'qtr_with_extra_week': 1,'variation': 'nearest'}"
Pandas,Date offsets,pandas.tseries.offsets.Second.name,pandas.tseries.offsets.Second.name#Second.name#Return a string representing the base frequency.Examples>>>pd.offsets.Hour().name'H'>>>pd.offsets.Hour(5).name'H'
Pandas,Date offsets,pandas.tseries.offsets.Second.nanos,pandas.tseries.offsets.Second.nanos#Second.nanos#Return an integer of the total number of nanoseconds.Raises:ValueErrorIf the frequency is non-fixed.Examples>>>pd.offsets.Hour(5).nanos18000000000000
Pandas,Date offsets,pandas.tseries.offsets.Second.normalize,pandas.tseries.offsets.Second.normalize#Second.normalize#
Pandas,Date offsets,pandas.tseries.offsets.Second.rule_code,pandas.tseries.offsets.Second.rule_code#Second.rule_code#
Pandas,Date offsets,pandas.tseries.offsets.Second.n,pandas.tseries.offsets.Second.n#Second.n#
Pandas,Date offsets,pandas.tseries.offsets.Second.copy,pandas.tseries.offsets.Second.copy#Second.copy()#Return a copy of the frequency.Examples>>>freq=pd.DateOffset(1)>>>freq_copy=freq.copy()>>>freqisfreq_copyFalse
Pandas,Date offsets,pandas.tseries.offsets.Second.is_anchored,pandas.tseries.offsets.Second.is_anchored#Second.is_anchored()#Return boolean whether the frequency is a unit frequency (n=1).Examples>>>pd.DateOffset().is_anchored()True>>>pd.DateOffset(2).is_anchored()False
Pandas,Date offsets,pandas.tseries.offsets.Second.is_on_offset,"pandas.tseries.offsets.Second.is_on_offset#Second.is_on_offset()#Return boolean whether a timestamp intersects with this frequency.Parameters:dtdatetime.datetimeTimestamp to check intersections with frequency.Examples>>>ts=pd.Timestamp(2022,1,1)>>>freq=pd.offsets.Day(1)>>>freq.is_on_offset(ts)True>>>ts=pd.Timestamp(2022,8,6)>>>ts.day_name()'Saturday'>>>freq=pd.offsets.BusinessDay(1)>>>freq.is_on_offset(ts)False"
Pandas,Date offsets,pandas.tseries.offsets.Second.is_month_start,"pandas.tseries.offsets.Second.is_month_start#Second.is_month_start()#Return boolean whether a timestamp occurs on the month start.Examples>>>ts=pd.Timestamp(2022,1,1)>>>freq=pd.offsets.Hour(5)>>>freq.is_month_start(ts)True"
Pandas,Date offsets,pandas.tseries.offsets.Second.is_month_end,"pandas.tseries.offsets.Second.is_month_end#Second.is_month_end()#Return boolean whether a timestamp occurs on the month end.Examples>>>ts=pd.Timestamp(2022,1,1)>>>freq=pd.offsets.Hour(5)>>>freq.is_month_end(ts)False"
Pandas,Date offsets,pandas.tseries.offsets.Second.is_quarter_start,"pandas.tseries.offsets.Second.is_quarter_start#Second.is_quarter_start()#Return boolean whether a timestamp occurs on the quarter start.Examples>>>ts=pd.Timestamp(2022,1,1)>>>freq=pd.offsets.Hour(5)>>>freq.is_quarter_start(ts)True"
Pandas,Date offsets,pandas.tseries.offsets.Second.is_quarter_end,"pandas.tseries.offsets.Second.is_quarter_end#Second.is_quarter_end()#Return boolean whether a timestamp occurs on the quarter end.Examples>>>ts=pd.Timestamp(2022,1,1)>>>freq=pd.offsets.Hour(5)>>>freq.is_quarter_end(ts)False"
Pandas,Date offsets,pandas.tseries.offsets.Second.is_year_start,"pandas.tseries.offsets.Second.is_year_start#Second.is_year_start()#Return boolean whether a timestamp occurs on the year start.Examples>>>ts=pd.Timestamp(2022,1,1)>>>freq=pd.offsets.Hour(5)>>>freq.is_year_start(ts)True"
Pandas,Date offsets,pandas.tseries.offsets.Second.is_year_end,"pandas.tseries.offsets.Second.is_year_end#Second.is_year_end()#Return boolean whether a timestamp occurs on the year end.Examples>>>ts=pd.Timestamp(2022,1,1)>>>freq=pd.offsets.Hour(5)>>>freq.is_year_end(ts)False"
Pandas,Date offsets,pandas.tseries.offsets.Milli,pandas.tseries.offsets.Milli#classpandas.tseries.offsets.Milli#AttributesbaseReturns a copy of the calling offset object with n=1 and all other attributes equal.freqstrReturn a string representing the frequency.kwdsReturn a dict of extra parameters for the offset.nameReturn a string representing the base frequency.nanosReturn an integer of the total number of nanoseconds.deltannormalizerule_codeMethodscopyReturn a copy of the frequency.is_anchoredReturn boolean whether the frequency is a unit frequency (n=1).is_month_endReturn boolean whether a timestamp occurs on the month end.is_month_startReturn boolean whether a timestamp occurs on the month start.is_on_offsetReturn boolean whether a timestamp intersects with this frequency.is_quarter_endReturn boolean whether a timestamp occurs on the quarter end.is_quarter_startReturn boolean whether a timestamp occurs on the quarter start.is_year_endReturn boolean whether a timestamp occurs on the year end.is_year_startReturn boolean whether a timestamp occurs on the year start.rollbackRoll provided date backward to next offset only if not on offset.rollforwardRoll provided date forward to next offset only if not on offset.
Pandas,Date offsets,pandas.tseries.offsets.Milli.delta,pandas.tseries.offsets.Milli.delta#Milli.delta#
Pandas,Date offsets,pandas.tseries.offsets.Milli.freqstr,pandas.tseries.offsets.Milli.freqstr#Milli.freqstr#Return a string representing the frequency.Examples>>>pd.DateOffset(5).freqstr'<5 * DateOffsets>'>>>pd.offsets.BusinessHour(2).freqstr'2BH'>>>pd.offsets.Nano().freqstr'N'>>>pd.offsets.Nano(-3).freqstr'-3N'
Pandas,Date offsets,pandas.tseries.offsets.Milli.kwds,"pandas.tseries.offsets.Milli.kwds#Milli.kwds#Return a dict of extra parameters for the offset.Examples>>>pd.DateOffset(5).kwds{}>>>pd.offsets.FY5253Quarter().kwds{'weekday': 0,'startingMonth': 1,'qtr_with_extra_week': 1,'variation': 'nearest'}"
Pandas,Date offsets,pandas.tseries.offsets.Milli.name,pandas.tseries.offsets.Milli.name#Milli.name#Return a string representing the base frequency.Examples>>>pd.offsets.Hour().name'H'>>>pd.offsets.Hour(5).name'H'
Pandas,Date offsets,pandas.tseries.offsets.Milli.nanos,pandas.tseries.offsets.Milli.nanos#Milli.nanos#Return an integer of the total number of nanoseconds.Raises:ValueErrorIf the frequency is non-fixed.Examples>>>pd.offsets.Hour(5).nanos18000000000000
Pandas,Date offsets,pandas.tseries.offsets.Milli.normalize,pandas.tseries.offsets.Milli.normalize#Milli.normalize#
Pandas,Date offsets,pandas.tseries.offsets.Milli.rule_code,pandas.tseries.offsets.Milli.rule_code#Milli.rule_code#
Pandas,Date offsets,pandas.tseries.offsets.Milli.n,pandas.tseries.offsets.Milli.n#Milli.n#
Pandas,Date offsets,pandas.tseries.offsets.Milli.copy,pandas.tseries.offsets.Milli.copy#Milli.copy()#Return a copy of the frequency.Examples>>>freq=pd.DateOffset(1)>>>freq_copy=freq.copy()>>>freqisfreq_copyFalse
Pandas,Date offsets,pandas.tseries.offsets.Milli.is_anchored,pandas.tseries.offsets.Milli.is_anchored#Milli.is_anchored()#Return boolean whether the frequency is a unit frequency (n=1).Examples>>>pd.DateOffset().is_anchored()True>>>pd.DateOffset(2).is_anchored()False
Pandas,Date offsets,pandas.tseries.offsets.Milli.is_on_offset,"pandas.tseries.offsets.Milli.is_on_offset#Milli.is_on_offset()#Return boolean whether a timestamp intersects with this frequency.Parameters:dtdatetime.datetimeTimestamp to check intersections with frequency.Examples>>>ts=pd.Timestamp(2022,1,1)>>>freq=pd.offsets.Day(1)>>>freq.is_on_offset(ts)True>>>ts=pd.Timestamp(2022,8,6)>>>ts.day_name()'Saturday'>>>freq=pd.offsets.BusinessDay(1)>>>freq.is_on_offset(ts)False"
Pandas,Date offsets,pandas.tseries.offsets.Milli.is_month_start,"pandas.tseries.offsets.Milli.is_month_start#Milli.is_month_start()#Return boolean whether a timestamp occurs on the month start.Examples>>>ts=pd.Timestamp(2022,1,1)>>>freq=pd.offsets.Hour(5)>>>freq.is_month_start(ts)True"
Pandas,Date offsets,pandas.tseries.offsets.Milli.is_month_end,"pandas.tseries.offsets.Milli.is_month_end#Milli.is_month_end()#Return boolean whether a timestamp occurs on the month end.Examples>>>ts=pd.Timestamp(2022,1,1)>>>freq=pd.offsets.Hour(5)>>>freq.is_month_end(ts)False"
Pandas,Date offsets,pandas.tseries.offsets.Milli.is_quarter_start,"pandas.tseries.offsets.Milli.is_quarter_start#Milli.is_quarter_start()#Return boolean whether a timestamp occurs on the quarter start.Examples>>>ts=pd.Timestamp(2022,1,1)>>>freq=pd.offsets.Hour(5)>>>freq.is_quarter_start(ts)True"
Pandas,Date offsets,pandas.tseries.offsets.Milli.is_quarter_end,"pandas.tseries.offsets.Milli.is_quarter_end#Milli.is_quarter_end()#Return boolean whether a timestamp occurs on the quarter end.Examples>>>ts=pd.Timestamp(2022,1,1)>>>freq=pd.offsets.Hour(5)>>>freq.is_quarter_end(ts)False"
Pandas,Date offsets,pandas.tseries.offsets.Milli.is_year_start,"pandas.tseries.offsets.Milli.is_year_start#Milli.is_year_start()#Return boolean whether a timestamp occurs on the year start.Examples>>>ts=pd.Timestamp(2022,1,1)>>>freq=pd.offsets.Hour(5)>>>freq.is_year_start(ts)True"
Pandas,Date offsets,pandas.tseries.offsets.Milli.is_year_end,"pandas.tseries.offsets.Milli.is_year_end#Milli.is_year_end()#Return boolean whether a timestamp occurs on the year end.Examples>>>ts=pd.Timestamp(2022,1,1)>>>freq=pd.offsets.Hour(5)>>>freq.is_year_end(ts)False"
Pandas,Date offsets,pandas.tseries.offsets.Micro,pandas.tseries.offsets.Micro#classpandas.tseries.offsets.Micro#AttributesbaseReturns a copy of the calling offset object with n=1 and all other attributes equal.freqstrReturn a string representing the frequency.kwdsReturn a dict of extra parameters for the offset.nameReturn a string representing the base frequency.nanosReturn an integer of the total number of nanoseconds.deltannormalizerule_codeMethodscopyReturn a copy of the frequency.is_anchoredReturn boolean whether the frequency is a unit frequency (n=1).is_month_endReturn boolean whether a timestamp occurs on the month end.is_month_startReturn boolean whether a timestamp occurs on the month start.is_on_offsetReturn boolean whether a timestamp intersects with this frequency.is_quarter_endReturn boolean whether a timestamp occurs on the quarter end.is_quarter_startReturn boolean whether a timestamp occurs on the quarter start.is_year_endReturn boolean whether a timestamp occurs on the year end.is_year_startReturn boolean whether a timestamp occurs on the year start.rollbackRoll provided date backward to next offset only if not on offset.rollforwardRoll provided date forward to next offset only if not on offset.
Pandas,Date offsets,pandas.tseries.offsets.Micro.delta,pandas.tseries.offsets.Micro.delta#Micro.delta#
Pandas,Date offsets,pandas.tseries.offsets.Micro.freqstr,pandas.tseries.offsets.Micro.freqstr#Micro.freqstr#Return a string representing the frequency.Examples>>>pd.DateOffset(5).freqstr'<5 * DateOffsets>'>>>pd.offsets.BusinessHour(2).freqstr'2BH'>>>pd.offsets.Nano().freqstr'N'>>>pd.offsets.Nano(-3).freqstr'-3N'
Pandas,Date offsets,pandas.tseries.offsets.Micro.kwds,"pandas.tseries.offsets.Micro.kwds#Micro.kwds#Return a dict of extra parameters for the offset.Examples>>>pd.DateOffset(5).kwds{}>>>pd.offsets.FY5253Quarter().kwds{'weekday': 0,'startingMonth': 1,'qtr_with_extra_week': 1,'variation': 'nearest'}"
Pandas,Date offsets,pandas.tseries.offsets.Micro.name,pandas.tseries.offsets.Micro.name#Micro.name#Return a string representing the base frequency.Examples>>>pd.offsets.Hour().name'H'>>>pd.offsets.Hour(5).name'H'
Pandas,Date offsets,pandas.tseries.offsets.Micro.nanos,pandas.tseries.offsets.Micro.nanos#Micro.nanos#Return an integer of the total number of nanoseconds.Raises:ValueErrorIf the frequency is non-fixed.Examples>>>pd.offsets.Hour(5).nanos18000000000000
Pandas,Date offsets,pandas.tseries.offsets.Micro.normalize,pandas.tseries.offsets.Micro.normalize#Micro.normalize#
Pandas,Date offsets,pandas.tseries.offsets.Micro.rule_code,pandas.tseries.offsets.Micro.rule_code#Micro.rule_code#
Pandas,Date offsets,pandas.tseries.offsets.Micro.n,pandas.tseries.offsets.Micro.n#Micro.n#
Pandas,Date offsets,pandas.tseries.offsets.Micro.copy,pandas.tseries.offsets.Micro.copy#Micro.copy()#Return a copy of the frequency.Examples>>>freq=pd.DateOffset(1)>>>freq_copy=freq.copy()>>>freqisfreq_copyFalse
Pandas,Date offsets,pandas.tseries.offsets.Micro.is_anchored,pandas.tseries.offsets.Micro.is_anchored#Micro.is_anchored()#Return boolean whether the frequency is a unit frequency (n=1).Examples>>>pd.DateOffset().is_anchored()True>>>pd.DateOffset(2).is_anchored()False
Pandas,Date offsets,pandas.tseries.offsets.Micro.is_on_offset,"pandas.tseries.offsets.Micro.is_on_offset#Micro.is_on_offset()#Return boolean whether a timestamp intersects with this frequency.Parameters:dtdatetime.datetimeTimestamp to check intersections with frequency.Examples>>>ts=pd.Timestamp(2022,1,1)>>>freq=pd.offsets.Day(1)>>>freq.is_on_offset(ts)True>>>ts=pd.Timestamp(2022,8,6)>>>ts.day_name()'Saturday'>>>freq=pd.offsets.BusinessDay(1)>>>freq.is_on_offset(ts)False"
Pandas,Date offsets,pandas.tseries.offsets.Micro.is_month_start,"pandas.tseries.offsets.Micro.is_month_start#Micro.is_month_start()#Return boolean whether a timestamp occurs on the month start.Examples>>>ts=pd.Timestamp(2022,1,1)>>>freq=pd.offsets.Hour(5)>>>freq.is_month_start(ts)True"
Pandas,Date offsets,pandas.tseries.offsets.Micro.is_month_end,"pandas.tseries.offsets.Micro.is_month_end#Micro.is_month_end()#Return boolean whether a timestamp occurs on the month end.Examples>>>ts=pd.Timestamp(2022,1,1)>>>freq=pd.offsets.Hour(5)>>>freq.is_month_end(ts)False"
Pandas,Date offsets,pandas.tseries.offsets.Micro.is_quarter_start,"pandas.tseries.offsets.Micro.is_quarter_start#Micro.is_quarter_start()#Return boolean whether a timestamp occurs on the quarter start.Examples>>>ts=pd.Timestamp(2022,1,1)>>>freq=pd.offsets.Hour(5)>>>freq.is_quarter_start(ts)True"
Pandas,Date offsets,pandas.tseries.offsets.Micro.is_quarter_end,"pandas.tseries.offsets.Micro.is_quarter_end#Micro.is_quarter_end()#Return boolean whether a timestamp occurs on the quarter end.Examples>>>ts=pd.Timestamp(2022,1,1)>>>freq=pd.offsets.Hour(5)>>>freq.is_quarter_end(ts)False"
Pandas,Date offsets,pandas.tseries.offsets.Micro.is_year_start,"pandas.tseries.offsets.Micro.is_year_start#Micro.is_year_start()#Return boolean whether a timestamp occurs on the year start.Examples>>>ts=pd.Timestamp(2022,1,1)>>>freq=pd.offsets.Hour(5)>>>freq.is_year_start(ts)True"
Pandas,Date offsets,pandas.tseries.offsets.Micro.is_year_end,"pandas.tseries.offsets.Micro.is_year_end#Micro.is_year_end()#Return boolean whether a timestamp occurs on the year end.Examples>>>ts=pd.Timestamp(2022,1,1)>>>freq=pd.offsets.Hour(5)>>>freq.is_year_end(ts)False"
Pandas,Date offsets,pandas.tseries.offsets.Nano,pandas.tseries.offsets.Nano#classpandas.tseries.offsets.Nano#AttributesbaseReturns a copy of the calling offset object with n=1 and all other attributes equal.freqstrReturn a string representing the frequency.kwdsReturn a dict of extra parameters for the offset.nameReturn a string representing the base frequency.nanosReturn an integer of the total number of nanoseconds.deltannormalizerule_codeMethodscopyReturn a copy of the frequency.is_anchoredReturn boolean whether the frequency is a unit frequency (n=1).is_month_endReturn boolean whether a timestamp occurs on the month end.is_month_startReturn boolean whether a timestamp occurs on the month start.is_on_offsetReturn boolean whether a timestamp intersects with this frequency.is_quarter_endReturn boolean whether a timestamp occurs on the quarter end.is_quarter_startReturn boolean whether a timestamp occurs on the quarter start.is_year_endReturn boolean whether a timestamp occurs on the year end.is_year_startReturn boolean whether a timestamp occurs on the year start.rollbackRoll provided date backward to next offset only if not on offset.rollforwardRoll provided date forward to next offset only if not on offset.
Pandas,Date offsets,pandas.tseries.offsets.Nano.delta,pandas.tseries.offsets.Nano.delta#Nano.delta#
Pandas,Date offsets,pandas.tseries.offsets.Nano.freqstr,pandas.tseries.offsets.Nano.freqstr#Nano.freqstr#Return a string representing the frequency.Examples>>>pd.DateOffset(5).freqstr'<5 * DateOffsets>'>>>pd.offsets.BusinessHour(2).freqstr'2BH'>>>pd.offsets.Nano().freqstr'N'>>>pd.offsets.Nano(-3).freqstr'-3N'
Pandas,Date offsets,pandas.tseries.offsets.Nano.kwds,"pandas.tseries.offsets.Nano.kwds#Nano.kwds#Return a dict of extra parameters for the offset.Examples>>>pd.DateOffset(5).kwds{}>>>pd.offsets.FY5253Quarter().kwds{'weekday': 0,'startingMonth': 1,'qtr_with_extra_week': 1,'variation': 'nearest'}"
Pandas,Date offsets,pandas.tseries.offsets.Nano.name,pandas.tseries.offsets.Nano.name#Nano.name#Return a string representing the base frequency.Examples>>>pd.offsets.Hour().name'H'>>>pd.offsets.Hour(5).name'H'
Pandas,Date offsets,pandas.tseries.offsets.Nano.nanos,pandas.tseries.offsets.Nano.nanos#Nano.nanos#Return an integer of the total number of nanoseconds.Raises:ValueErrorIf the frequency is non-fixed.Examples>>>pd.offsets.Hour(5).nanos18000000000000
Pandas,Date offsets,pandas.tseries.offsets.Nano.normalize,pandas.tseries.offsets.Nano.normalize#Nano.normalize#
Pandas,Date offsets,pandas.tseries.offsets.Nano.rule_code,pandas.tseries.offsets.Nano.rule_code#Nano.rule_code#
Pandas,Date offsets,pandas.tseries.offsets.Nano.n,pandas.tseries.offsets.Nano.n#Nano.n#
Pandas,Date offsets,pandas.tseries.offsets.Nano.copy,pandas.tseries.offsets.Nano.copy#Nano.copy()#Return a copy of the frequency.Examples>>>freq=pd.DateOffset(1)>>>freq_copy=freq.copy()>>>freqisfreq_copyFalse
Pandas,Date offsets,pandas.tseries.offsets.Nano.is_anchored,pandas.tseries.offsets.Nano.is_anchored#Nano.is_anchored()#Return boolean whether the frequency is a unit frequency (n=1).Examples>>>pd.DateOffset().is_anchored()True>>>pd.DateOffset(2).is_anchored()False
Pandas,Date offsets,pandas.tseries.offsets.Nano.is_on_offset,"pandas.tseries.offsets.Nano.is_on_offset#Nano.is_on_offset()#Return boolean whether a timestamp intersects with this frequency.Parameters:dtdatetime.datetimeTimestamp to check intersections with frequency.Examples>>>ts=pd.Timestamp(2022,1,1)>>>freq=pd.offsets.Day(1)>>>freq.is_on_offset(ts)True>>>ts=pd.Timestamp(2022,8,6)>>>ts.day_name()'Saturday'>>>freq=pd.offsets.BusinessDay(1)>>>freq.is_on_offset(ts)False"
Pandas,Date offsets,pandas.tseries.offsets.Nano.is_month_start,"pandas.tseries.offsets.Nano.is_month_start#Nano.is_month_start()#Return boolean whether a timestamp occurs on the month start.Examples>>>ts=pd.Timestamp(2022,1,1)>>>freq=pd.offsets.Hour(5)>>>freq.is_month_start(ts)True"
Pandas,Date offsets,pandas.tseries.offsets.Nano.is_month_end,"pandas.tseries.offsets.Nano.is_month_end#Nano.is_month_end()#Return boolean whether a timestamp occurs on the month end.Examples>>>ts=pd.Timestamp(2022,1,1)>>>freq=pd.offsets.Hour(5)>>>freq.is_month_end(ts)False"
Pandas,Date offsets,pandas.tseries.offsets.Nano.is_quarter_start,"pandas.tseries.offsets.Nano.is_quarter_start#Nano.is_quarter_start()#Return boolean whether a timestamp occurs on the quarter start.Examples>>>ts=pd.Timestamp(2022,1,1)>>>freq=pd.offsets.Hour(5)>>>freq.is_quarter_start(ts)True"
Pandas,Date offsets,pandas.tseries.offsets.Nano.is_quarter_end,"pandas.tseries.offsets.Nano.is_quarter_end#Nano.is_quarter_end()#Return boolean whether a timestamp occurs on the quarter end.Examples>>>ts=pd.Timestamp(2022,1,1)>>>freq=pd.offsets.Hour(5)>>>freq.is_quarter_end(ts)False"
Pandas,Date offsets,pandas.tseries.offsets.Nano.is_year_start,"pandas.tseries.offsets.Nano.is_year_start#Nano.is_year_start()#Return boolean whether a timestamp occurs on the year start.Examples>>>ts=pd.Timestamp(2022,1,1)>>>freq=pd.offsets.Hour(5)>>>freq.is_year_start(ts)True"
Pandas,Date offsets,pandas.tseries.offsets.Nano.is_year_end,"pandas.tseries.offsets.Nano.is_year_end#Nano.is_year_end()#Return boolean whether a timestamp occurs on the year end.Examples>>>ts=pd.Timestamp(2022,1,1)>>>freq=pd.offsets.Hour(5)>>>freq.is_year_end(ts)False"
