ライブラリ名,章,節,内容
Pandas,Plotting,pandas.plotting.andrews_curves,"pandas.plotting.andrews_curves#pandas.plotting.andrews_curves(frame,class_column,ax=None,samples=200,color=None,colormap=None,**kwargs)[source]#Generate a matplotlib plot for visualising clusters of multivariate data.Andrews curves have the functional form:\[f(t) = \frac{x_1}{\sqrt{2}} + x_2 \sin(t) + x_3 \cos(t) +
x_4 \sin(2t) + x_5 \cos(2t) + \cdots\]Where\(x\)coefficients correspond to the values of each dimension
and\(t\)is linearly spaced between\(-\pi\)and\(+\pi\).
Each row of frame then corresponds to a single curve.Parameters:frameDataFrameData to be plotted, preferably normalized to (0.0, 1.0).class_columnlabelName of the column containing class names.axaxes object, default NoneAxes to use.samplesintNumber of points to plot in each curve.colorstr, list[str] or tuple[str], optionalColors to use for the different classes. Colors can be strings
or 3-element floating point RGB values.colormapstr or matplotlib colormap object, default NoneColormap to select colors from. If a string, load colormap with that
name from matplotlib.**kwargsOptions to pass to matplotlib plotting method.Returns:matplotlib.axes.AxesExamples>>>df=pd.read_csv(...'https://raw.githubusercontent.com/pandas-dev/'...'pandas/main/pandas/tests/io/data/csv/iris.csv'...)>>>pd.plotting.andrews_curves(df,'Name')"
Pandas,Plotting,pandas.plotting.autocorrelation_plot,"pandas.plotting.autocorrelation_plot#pandas.plotting.autocorrelation_plot(series,ax=None,**kwargs)[source]#Autocorrelation plot for time series.Parameters:seriesSeriesThe time series to visualize.axMatplotlib axis object, optionalThe matplotlib axis object to use.**kwargsOptions to pass to matplotlib plotting method.Returns:matplotlib.axes.AxesExamplesThe horizontal lines in the plot correspond to 95% and 99% confidence bands.The dashed line is 99% confidence band.>>>spacing=np.linspace(-9*np.pi,9*np.pi,num=1000)>>>s=pd.Series(0.7*np.random.rand(1000)+0.3*np.sin(spacing))>>>pd.plotting.autocorrelation_plot(s)"
Pandas,Plotting,pandas.plotting.bootstrap_plot,"pandas.plotting.bootstrap_plot#pandas.plotting.bootstrap_plot(series,fig=None,size=50,samples=500,**kwds)[source]#Bootstrap plot on mean, median and mid-range statistics.The bootstrap plot is used to estimate the uncertainty of a statistic
by relying on random sampling with replacement[1]. This function will
generate bootstrapping plots for mean, median and mid-range statistics
for the given number of samples of the given size.[1]“Bootstrapping (statistics)” inhttps://en.wikipedia.org/wiki/Bootstrapping_%28statistics%29Parameters:seriespandas.SeriesSeries from where to get the samplings for the bootstrapping.figmatplotlib.figure.Figure, default NoneIf given, it will use thefigreference for plotting instead of
creating a new one with default parameters.sizeint, default 50Number of data points to consider during each sampling. It must be
less than or equal to the length of theseries.samplesint, default 500Number of times the bootstrap procedure is performed.**kwdsOptions to pass to matplotlib plotting method.Returns:matplotlib.figure.FigureMatplotlib figure.See alsopandas.DataFrame.plotBasic plotting for DataFrame objects.pandas.Series.plotBasic plotting for Series objects.ExamplesThis example draws a basic bootstrap plot for a Series.>>>s=pd.Series(np.random.uniform(size=100))>>>pd.plotting.bootstrap_plot(s)<Figure size 640x480 with 6 Axes>"
Pandas,Plotting,pandas.plotting.boxplot,"pandas.plotting.boxplot#pandas.plotting.boxplot(data,column=None,by=None,ax=None,fontsize=None,rot=0,grid=True,figsize=None,layout=None,return_type=None,**kwargs)[source]#Make a box plot from DataFrame columns.Make a box-and-whisker plot from DataFrame columns, optionally grouped
by some other columns. A box plot is a method for graphically depicting
groups of numerical data through their quartiles.
The box extends from the Q1 to Q3 quartile values of the data,
with a line at the median (Q2). The whiskers extend from the edges
of box to show the range of the data. By default, they extend no more than1.5 * IQR (IQR = Q3 - Q1)from the edges of the box, ending at the farthest
data point within that interval. Outliers are plotted as separate dots.For further details see
Wikipedia’s entry forboxplot.Parameters:dataDataFrameThe data to visualize.columnstr or list of str, optionalColumn name or list of names, or vector.
Can be any valid input topandas.DataFrame.groupby().bystr or array-like, optionalColumn in the DataFrame topandas.DataFrame.groupby().
One box-plot will be done per value of columns inby.axobject of class matplotlib.axes.Axes, optionalThe matplotlib axes to be used by boxplot.fontsizefloat or strTick label font size in points or as a string (e.g.,large).rotfloat, default 0The rotation angle of labels (in degrees)
with respect to the screen coordinate system.gridbool, default TrueSetting this to True will show the grid.figsizeA tuple (width, height) in inchesThe size of the figure to create in matplotlib.layouttuple (rows, columns), optionalFor example, (3, 5) will display the subplots
using 3 rows and 5 columns, starting from the top-left.return_type{‘axes’, ‘dict’, ‘both’} or None, default ‘axes’The kind of object to return. The default isaxes.‘axes’ returns the matplotlib axes the boxplot is drawn on.‘dict’ returns a dictionary whose values are the matplotlib
Lines of the boxplot.‘both’ returns a namedtuple with the axes and dict.when grouping withby, a Series mapping columns toreturn_typeis returned.Ifreturn_typeisNone, a NumPy array
of axes with the same shape aslayoutis returned.**kwargsAll other plotting keyword arguments to be passed tomatplotlib.pyplot.boxplot().Returns:resultSee Notes.See alsopandas.Series.plot.histMake a histogram.matplotlib.pyplot.boxplotMatplotlib equivalent plot.NotesThe return type depends on thereturn_typeparameter:‘axes’ : object of class matplotlib.axes.Axes‘dict’ : dict of matplotlib.lines.Line2D objects‘both’ : a namedtuple with structure (ax, lines)For data grouped withby, return a Series of the above or a numpy
array:Seriesarray(forreturn_type=None)Usereturn_type='dict'when you want to tweak the appearance
of the lines after plotting. In this case a dict containing the Lines
making up the boxes, caps, fliers, medians, and whiskers is returned.ExamplesBoxplots can be created for every column in the dataframe
bydf.boxplot()or indicating the columns to be used:>>>np.random.seed(1234)>>>df=pd.DataFrame(np.random.randn(10,4),...columns=['Col1','Col2','Col3','Col4'])>>>boxplot=df.boxplot(column=['Col1','Col2','Col3'])Boxplots of variables distributions grouped by the values of a third
variable can be created using the optionby. For instance:>>>df=pd.DataFrame(np.random.randn(10,2),...columns=['Col1','Col2'])>>>df['X']=pd.Series(['A','A','A','A','A',...'B','B','B','B','B'])>>>boxplot=df.boxplot(by='X')A list of strings (i.e.['X','Y']) can be passed to boxplot
in order to group the data by combination of the variables in the x-axis:>>>df=pd.DataFrame(np.random.randn(10,3),...columns=['Col1','Col2','Col3'])>>>df['X']=pd.Series(['A','A','A','A','A',...'B','B','B','B','B'])>>>df['Y']=pd.Series(['A','B','A','B','A',...'B','A','B','A','B'])>>>boxplot=df.boxplot(column=['Col1','Col2'],by=['X','Y'])The layout of boxplot can be adjusted giving a tuple tolayout:>>>boxplot=df.boxplot(column=['Col1','Col2'],by='X',...layout=(2,1))Additional formatting can be done to the boxplot, like suppressing the grid
(grid=False), rotating the labels in the x-axis (i.e.rot=45)
or changing the fontsize (i.e.fontsize=15):>>>boxplot=df.boxplot(grid=False,rot=45,fontsize=15)The parameterreturn_typecan be used to select the type of element
returned byboxplot. Whenreturn_type='axes'is selected,
the matplotlib axes on which the boxplot is drawn are returned:>>>boxplot=df.boxplot(column=['Col1','Col2'],return_type='axes')>>>type(boxplot)<class 'matplotlib.axes._axes.Axes'>When grouping withby, a Series mapping columns toreturn_typeis returned:>>>boxplot=df.boxplot(column=['Col1','Col2'],by='X',...return_type='axes')>>>type(boxplot)<class 'pandas.core.series.Series'>Ifreturn_typeisNone, a NumPy array of axes with the same shape
aslayoutis returned:>>>boxplot=df.boxplot(column=['Col1','Col2'],by='X',...return_type=None)>>>type(boxplot)<class 'numpy.ndarray'>"
Pandas,Plotting,pandas.plotting.deregister_matplotlib_converters,"pandas.plotting.deregister_matplotlib_converters#pandas.plotting.deregister_matplotlib_converters()[source]#Remove pandas formatters and converters.Removes the custom converters added byregister(). This
attempts to set the state of the registry back to the state before
pandas registered its own units. Converters for pandas’ own types like
Timestamp and Period are removed completely. Converters for types
pandas overwrites, likedatetime.datetime, are restored to their
original value.See alsoregister_matplotlib_convertersRegister pandas formatters and converters with matplotlib.ExamplesThe following line is done automatically by pandas so
the plot can be rendered:>>>pd.plotting.register_matplotlib_converters()>>>df=pd.DataFrame({'ts':pd.period_range('2020',periods=2,freq='M'),...'y':[1,2]...})>>>plot=df.plot.line(x='ts',y='y')Unsetting the register manually an error will be raised:>>>pd.set_option(""plotting.matplotlib.register_converters"",...False)>>>df.plot.line(x='ts',y='y')Traceback (most recent call last):TypeError:float() argument must be a string or a real number, not 'Period'"
Pandas,Plotting,pandas.plotting.lag_plot,"pandas.plotting.lag_plot#pandas.plotting.lag_plot(series,lag=1,ax=None,**kwds)[source]#Lag plot for time series.Parameters:seriesSeriesThe time series to visualize.lagint, default 1Lag length of the scatter plot.axMatplotlib axis object, optionalThe matplotlib axis object to use.**kwdsMatplotlib scatter method keyword arguments.Returns:matplotlib.axes.AxesExamplesLag plots are most commonly used to look for patterns in time series data.Given the following time series>>>np.random.seed(5)>>>x=np.cumsum(np.random.normal(loc=1,scale=5,size=50))>>>s=pd.Series(x)>>>s.plot()A lag plot withlag=1returns>>>pd.plotting.lag_plot(s,lag=1)<Axes: xlabel='y(t)', ylabel='y(t + 1)'>"
Pandas,Plotting,pandas.plotting.parallel_coordinates,"pandas.plotting.parallel_coordinates#pandas.plotting.parallel_coordinates(frame,class_column,cols=None,ax=None,color=None,use_columns=False,xticks=None,colormap=None,axvlines=True,axvlines_kwds=None,sort_labels=False,**kwargs)[source]#Parallel coordinates plotting.Parameters:frameDataFrameclass_columnstrColumn name containing class names.colslist, optionalA list of column names to use.axmatplotlib.axis, optionalMatplotlib axis object.colorlist or tuple, optionalColors to use for the different classes.use_columnsbool, optionalIf true, columns will be used as xticks.xtickslist or tuple, optionalA list of values to use for xticks.colormapstr or matplotlib colormap, default NoneColormap to use for line colors.axvlinesbool, optionalIf true, vertical lines will be added at each xtick.axvlines_kwdskeywords, optionalOptions to be passed to axvline method for vertical lines.sort_labelsbool, default FalseSort class_column labels, useful when assigning colors.**kwargsOptions to pass to matplotlib plotting method.Returns:matplotlib.axes.AxesExamples>>>df=pd.read_csv(...'https://raw.githubusercontent.com/pandas-dev/'...'pandas/main/pandas/tests/io/data/csv/iris.csv'...)>>>pd.plotting.parallel_coordinates(...df,'Name',color=('#556270','#4ECDC4','#C7F464')...)"
Pandas,Plotting,pandas.plotting.plot_params,"pandas.plotting.plot_params#pandas.plotting.plot_params={'xaxis.compat':False}#Stores pandas plotting options.Allows for parameter aliasing so you can just use parameter names that are
the same as the plot function parameters, but is stored in a canonical
format that makes it easy to breakdown into groups later.Examples>>>np.random.seed(42)>>>df=pd.DataFrame({'A':np.random.randn(10),...'B':np.random.randn(10)},...index=pd.date_range(""1/1/2000"",...freq='4MS',periods=10))>>>withpd.plotting.plot_params.use(""x_compat"",True):..._=df[""A""].plot(color=""r"")..._=df[""B""].plot(color=""g"")"
Pandas,Plotting,pandas.plotting.radviz,"pandas.plotting.radviz#pandas.plotting.radviz(frame,class_column,ax=None,color=None,colormap=None,**kwds)[source]#Plot a multidimensional dataset in 2D.Each Series in the DataFrame is represented as a evenly distributed
slice on a circle. Each data point is rendered in the circle according to
the value on each Series. Highly correlatedSeriesin theDataFrameare placed closer on the unit circle.RadViz allow to project a N-dimensional data set into a 2D space where the
influence of each dimension can be interpreted as a balance between the
influence of all dimensions.More info available at theoriginal articledescribing RadViz.Parameters:frameDataFrameObject holding the data.class_columnstrColumn name containing the name of the data point category.axmatplotlib.axes.Axes, optionalA plot instance to which to add the information.colorlist[str] or tuple[str], optionalAssign a color to each category. Example: [‘blue’, ‘green’].colormapstr ormatplotlib.colors.Colormap, default NoneColormap to select colors from. If string, load colormap with that
name from matplotlib.**kwdsOptions to pass to matplotlib scatter plotting method.Returns:matplotlib.axes.AxesSee alsopandas.plotting.andrews_curvesPlot clustering visualization.Examples>>>df=pd.DataFrame(...{...'SepalLength':[6.5,7.7,5.1,5.8,7.6,5.0,5.4,4.6,6.7,4.6],...'SepalWidth':[3.0,3.8,3.8,2.7,3.0,2.3,3.0,3.2,3.3,3.6],...'PetalLength':[5.5,6.7,1.9,5.1,6.6,3.3,4.5,1.4,5.7,1.0],...'PetalWidth':[1.8,2.2,0.4,1.9,2.1,1.0,1.5,0.2,2.1,0.2],...'Category':[...'virginica',...'virginica',...'setosa',...'virginica',...'virginica',...'versicolor',...'versicolor',...'setosa',...'virginica',...'setosa'...]...}...)>>>pd.plotting.radviz(df,'Category')"
Pandas,Plotting,pandas.plotting.register_matplotlib_converters,"pandas.plotting.register_matplotlib_converters#pandas.plotting.register_matplotlib_converters()[source]#Register pandas formatters and converters with matplotlib.This function modifies the globalmatplotlib.units.registrydictionary. pandas adds custom converters forpd.Timestamppd.Periodnp.datetime64datetime.datetimedatetime.datedatetime.timeSee alsoderegister_matplotlib_convertersRemove pandas formatters and converters.ExamplesThe following line is done automatically by pandas so
the plot can be rendered:>>>pd.plotting.register_matplotlib_converters()>>>df=pd.DataFrame({'ts':pd.period_range('2020',periods=2,freq='M'),...'y':[1,2]...})>>>plot=df.plot.line(x='ts',y='y')Unsetting the register manually an error will be raised:>>>pd.set_option(""plotting.matplotlib.register_converters"",...False)>>>df.plot.line(x='ts',y='y')Traceback (most recent call last):TypeError:float() argument must be a string or a real number, not 'Period'"
Pandas,Plotting,pandas.plotting.scatter_matrix,"pandas.plotting.scatter_matrix#pandas.plotting.scatter_matrix(frame,alpha=0.5,figsize=None,ax=None,grid=False,diagonal='hist',marker='.',density_kwds=None,hist_kwds=None,range_padding=0.05,**kwargs)[source]#Draw a matrix of scatter plots.Parameters:frameDataFramealphafloat, optionalAmount of transparency applied.figsize(float,float), optionalA tuple (width, height) in inches.axMatplotlib axis object, optionalgridbool, optionalSetting this to True will show the grid.diagonal{‘hist’, ‘kde’}Pick between ‘kde’ and ‘hist’ for either Kernel Density Estimation or
Histogram plot in the diagonal.markerstr, optionalMatplotlib marker type, default ‘.’.density_kwdskeywordsKeyword arguments to be passed to kernel density estimate plot.hist_kwdskeywordsKeyword arguments to be passed to hist function.range_paddingfloat, default 0.05Relative extension of axis range in x and y with respect to
(x_max - x_min) or (y_max - y_min).**kwargsKeyword arguments to be passed to scatter function.Returns:numpy.ndarrayA matrix of scatter plots.Examples>>>df=pd.DataFrame(np.random.randn(1000,4),columns=['A','B','C','D'])>>>pd.plotting.scatter_matrix(df,alpha=0.2)array([[<Axes: xlabel='A', ylabel='A'>, <Axes: xlabel='B', ylabel='A'>,<Axes: xlabel='C', ylabel='A'>, <Axes: xlabel='D', ylabel='A'>],[<Axes: xlabel='A', ylabel='B'>, <Axes: xlabel='B', ylabel='B'>,<Axes: xlabel='C', ylabel='B'>, <Axes: xlabel='D', ylabel='B'>],[<Axes: xlabel='A', ylabel='C'>, <Axes: xlabel='B', ylabel='C'>,<Axes: xlabel='C', ylabel='C'>, <Axes: xlabel='D', ylabel='C'>],[<Axes: xlabel='A', ylabel='D'>, <Axes: xlabel='B', ylabel='D'>,<Axes: xlabel='C', ylabel='D'>, <Axes: xlabel='D', ylabel='D'>]],dtype=object)"
Pandas,Plotting,pandas.plotting.table,"pandas.plotting.table#pandas.plotting.table(ax,data,**kwargs)[source]#Helper function to convert DataFrame and Series to matplotlib.table.Parameters:axMatplotlib axes objectdataDataFrame or SeriesData for table contents.**kwargsKeyword arguments to be passed to matplotlib.table.table.
IfrowLabelsorcolLabelsis not specified, data index or column
name will be used.Returns:matplotlib table objectExamples>>>importmatplotlib.pyplotasplt>>>df=pd.DataFrame({'A':[1,2],'B':[3,4]})>>>fix,ax=plt.subplots()>>>ax.axis('off')(0.0, 1.0, 0.0, 1.0)>>>table=pd.plotting.table(ax,df,loc='center',...cellLoc='center',colWidths=list([.2,.2]))"
